
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002df2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00002df2  00002e86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800078  00800078  00002e9e  2**0
                  ALLOC
  3 .stab         000032d0  00000000  00000000  00002ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000159e  00000000  00000000  00006170  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000770e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000784e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000079be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009607  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a4f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b2a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b400  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b68d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000be5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 84 13 	jmp	0x2708	; 0x2708 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ef       	ldi	r30, 0xF2	; 242
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 38       	cpi	r26, 0x8E	; 142
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 f7 16 	jmp	0x2dee	; 0x2dee <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8f 16 	jmp	0x2d1e	; 0x2d1e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ab 16 	jmp	0x2d56	; 0x2d56 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9b 16 	jmp	0x2d36	; 0x2d36 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b7 16 	jmp	0x2d6e	; 0x2d6e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9b 16 	jmp	0x2d36	; 0x2d36 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b7 16 	jmp	0x2d6e	; 0x2d6e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8f 16 	jmp	0x2d1e	; 0x2d1e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ab 16 	jmp	0x2d56	; 0x2d56 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9b 16 	jmp	0x2d36	; 0x2d36 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b7 16 	jmp	0x2d6e	; 0x2d6e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 9b 16 	jmp	0x2d36	; 0x2d36 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b7 16 	jmp	0x2d6e	; 0x2d6e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 9b 16 	jmp	0x2d36	; 0x2d36 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b7 16 	jmp	0x2d6e	; 0x2d6e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 9f 16 	jmp	0x2d3e	; 0x2d3e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 bb 16 	jmp	0x2d76	; 0x2d76 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
void Timer1_ISR(void);
void Timer1_delay(uint8 delay);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	68 97       	sbiw	r28, 0x18	; 24
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61

	uint8 option=0;
     b5a:	1a 82       	std	Y+2, r1	; 0x02
	uint8 pass_check;

	UART_ConfigType UART_configuration = {bit8,Parity_Disabled,one_stopbit,9600};
     b5c:	9e 01       	movw	r18, r28
     b5e:	2d 5f       	subi	r18, 0xFD	; 253
     b60:	3f 4f       	sbci	r19, 0xFF	; 255
     b62:	38 8b       	std	Y+16, r19	; 0x10
     b64:	2f 87       	std	Y+15, r18	; 0x0f
     b66:	81 e7       	ldi	r24, 0x71	; 113
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	9a 8b       	std	Y+18, r25	; 0x12
     b6c:	89 8b       	std	Y+17, r24	; 0x11
     b6e:	97 e0       	ldi	r25, 0x07	; 7
     b70:	9b 8b       	std	Y+19, r25	; 0x13
     b72:	e9 89       	ldd	r30, Y+17	; 0x11
     b74:	fa 89       	ldd	r31, Y+18	; 0x12
     b76:	00 80       	ld	r0, Z
     b78:	29 89       	ldd	r18, Y+17	; 0x11
     b7a:	3a 89       	ldd	r19, Y+18	; 0x12
     b7c:	2f 5f       	subi	r18, 0xFF	; 255
     b7e:	3f 4f       	sbci	r19, 0xFF	; 255
     b80:	3a 8b       	std	Y+18, r19	; 0x12
     b82:	29 8b       	std	Y+17, r18	; 0x11
     b84:	ef 85       	ldd	r30, Y+15	; 0x0f
     b86:	f8 89       	ldd	r31, Y+16	; 0x10
     b88:	00 82       	st	Z, r0
     b8a:	2f 85       	ldd	r18, Y+15	; 0x0f
     b8c:	38 89       	ldd	r19, Y+16	; 0x10
     b8e:	2f 5f       	subi	r18, 0xFF	; 255
     b90:	3f 4f       	sbci	r19, 0xFF	; 255
     b92:	38 8b       	std	Y+16, r19	; 0x10
     b94:	2f 87       	std	Y+15, r18	; 0x0f
     b96:	3b 89       	ldd	r19, Y+19	; 0x13
     b98:	31 50       	subi	r19, 0x01	; 1
     b9a:	3b 8b       	std	Y+19, r19	; 0x13
     b9c:	8b 89       	ldd	r24, Y+19	; 0x13
     b9e:	88 23       	and	r24, r24
     ba0:	41 f7       	brne	.-48     	; 0xb72 <main+0x2c>
	TWI_ConfigType TWI_configuration = {bit_3,0b00000010};
     ba2:	fe 01       	movw	r30, r28
     ba4:	3a 96       	adiw	r30, 0x0a	; 10
     ba6:	fd 8b       	std	Y+21, r31	; 0x15
     ba8:	ec 8b       	std	Y+20, r30	; 0x14
     baa:	2e e6       	ldi	r18, 0x6E	; 110
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	3f 8b       	std	Y+23, r19	; 0x17
     bb0:	2e 8b       	std	Y+22, r18	; 0x16
     bb2:	33 e0       	ldi	r19, 0x03	; 3
     bb4:	38 8f       	std	Y+24, r19	; 0x18
     bb6:	ee 89       	ldd	r30, Y+22	; 0x16
     bb8:	ff 89       	ldd	r31, Y+23	; 0x17
     bba:	00 80       	ld	r0, Z
     bbc:	2e 89       	ldd	r18, Y+22	; 0x16
     bbe:	3f 89       	ldd	r19, Y+23	; 0x17
     bc0:	2f 5f       	subi	r18, 0xFF	; 255
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	3f 8b       	std	Y+23, r19	; 0x17
     bc6:	2e 8b       	std	Y+22, r18	; 0x16
     bc8:	ec 89       	ldd	r30, Y+20	; 0x14
     bca:	fd 89       	ldd	r31, Y+21	; 0x15
     bcc:	00 82       	st	Z, r0
     bce:	2c 89       	ldd	r18, Y+20	; 0x14
     bd0:	3d 89       	ldd	r19, Y+21	; 0x15
     bd2:	2f 5f       	subi	r18, 0xFF	; 255
     bd4:	3f 4f       	sbci	r19, 0xFF	; 255
     bd6:	3d 8b       	std	Y+21, r19	; 0x15
     bd8:	2c 8b       	std	Y+20, r18	; 0x14
     bda:	38 8d       	ldd	r19, Y+24	; 0x18
     bdc:	31 50       	subi	r19, 0x01	; 1
     bde:	38 8f       	std	Y+24, r19	; 0x18
     be0:	88 8d       	ldd	r24, Y+24	; 0x18
     be2:	88 23       	and	r24, r24
     be4:	41 f7       	brne	.-48     	; 0xbb6 <main+0x70>

	LCD_init();
     be6:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <LCD_init>

	TWI_init(&TWI_configuration);
     bea:	ce 01       	movw	r24, r28
     bec:	0a 96       	adiw	r24, 0x0a	; 10
     bee:	0e 94 7d 14 	call	0x28fa	; 0x28fa <TWI_init>
	//TWI_init();
	Buzzer_init();
     bf2:	0e 94 bb 09 	call	0x1376	; 0x1376 <Buzzer_init>
	UART_init(&UART_configuration);
     bf6:	ce 01       	movw	r24, r28
     bf8:	03 96       	adiw	r24, 0x03	; 3
     bfa:	0e 94 04 15 	call	0x2a08	; 0x2a08 <UART_init>
	DcMotor_Init();
     bfe:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <DcMotor_Init>


	while(UART_recieveByte() != MC_READY);
     c02:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <UART_recieveByte>
     c06:	80 31       	cpi	r24, 0x10	; 16
     c08:	e1 f7       	brne	.-8      	; 0xc02 <main+0xbc>
	UART_sendByte(MC_READY);
     c0a:	80 e1       	ldi	r24, 0x10	; 16
     c0c:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <UART_sendByte>


	while(1)
	{
		LCD_clearScreen();
     c10:	0e 94 4a 13 	call	0x2694	; 0x2694 <LCD_clearScreen>
		readPassfromEEPROM(EEPROM_address,mainPassword,pass_size);
     c14:	28 e7       	ldi	r18, 0x78	; 120
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	81 e1       	ldi	r24, 0x11	; 17
     c1a:	93 e0       	ldi	r25, 0x03	; 3
     c1c:	b9 01       	movw	r22, r18
     c1e:	45 e0       	ldi	r20, 0x05	; 5
     c20:	0e 94 ed 08 	call	0x11da	; 0x11da <readPassfromEEPROM>
		LCD_arrayDisplay(mainPassword,pass_size);
     c24:	88 e7       	ldi	r24, 0x78	; 120
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	65 e0       	ldi	r22, 0x05	; 5
     c2a:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <LCD_arrayDisplay>

		option=UART_recieveByte();
     c2e:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <UART_recieveByte>
     c32:	8a 83       	std	Y+2, r24	; 0x02

		switch(option)
     c34:	8a 81       	ldd	r24, Y+2	; 0x02
     c36:	e8 2f       	mov	r30, r24
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	fe 87       	std	Y+14, r31	; 0x0e
     c3c:	ed 87       	std	Y+13, r30	; 0x0d
     c3e:	2d 85       	ldd	r18, Y+13	; 0x0d
     c40:	3e 85       	ldd	r19, Y+14	; 0x0e
     c42:	25 36       	cpi	r18, 0x65	; 101
     c44:	31 05       	cpc	r19, r1
     c46:	09 f4       	brne	.+2      	; 0xc4a <main+0x104>
     c48:	a8 c0       	rjmp	.+336    	; 0xd9a <main+0x254>
     c4a:	8d 85       	ldd	r24, Y+13	; 0x0d
     c4c:	9e 85       	ldd	r25, Y+14	; 0x0e
     c4e:	86 36       	cpi	r24, 0x66	; 102
     c50:	91 05       	cpc	r25, r1
     c52:	3c f4       	brge	.+14     	; 0xc62 <main+0x11c>
     c54:	ed 85       	ldd	r30, Y+13	; 0x0d
     c56:	fe 85       	ldd	r31, Y+14	; 0x0e
     c58:	e3 36       	cpi	r30, 0x63	; 99
     c5a:	f1 05       	cpc	r31, r1
     c5c:	09 f4       	brne	.+2      	; 0xc60 <main+0x11a>
     c5e:	7c c0       	rjmp	.+248    	; 0xd58 <main+0x212>
     c60:	d7 cf       	rjmp	.-82     	; 0xc10 <main+0xca>
     c62:	2d 85       	ldd	r18, Y+13	; 0x0d
     c64:	3e 85       	ldd	r19, Y+14	; 0x0e
     c66:	2f 36       	cpi	r18, 0x6F	; 111
     c68:	31 05       	cpc	r19, r1
     c6a:	99 f1       	breq	.+102    	; 0xcd2 <main+0x18c>
     c6c:	8d 85       	ldd	r24, Y+13	; 0x0d
     c6e:	9e 85       	ldd	r25, Y+14	; 0x0e
     c70:	83 37       	cpi	r24, 0x73	; 115
     c72:	91 05       	cpc	r25, r1
     c74:	69 f6       	brne	.-102    	; 0xc10 <main+0xca>
		{
		case set :
			UART_recieveArray(password1,pass_size);
     c76:	8d e7       	ldi	r24, 0x7D	; 125
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	65 e0       	ldi	r22, 0x05	; 5
     c7c:	0e 94 01 07 	call	0xe02	; 0xe02 <UART_recieveArray>
			UART_recieveArray(password2,pass_size);
     c80:	82 e8       	ldi	r24, 0x82	; 130
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	65 e0       	ldi	r22, 0x05	; 5
     c86:	0e 94 01 07 	call	0xe02	; 0xe02 <UART_recieveArray>
			pass_check=password_checker(password1,password2,pass_size);
     c8a:	8d e7       	ldi	r24, 0x7D	; 125
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	22 e8       	ldi	r18, 0x82	; 130
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	b9 01       	movw	r22, r18
     c94:	45 e0       	ldi	r20, 0x05	; 5
     c96:	0e 94 2a 07 	call	0xe54	; 0xe54 <password_checker>
     c9a:	89 83       	std	Y+1, r24	; 0x01

			if(pass_check==1)
     c9c:	89 81       	ldd	r24, Y+1	; 0x01
     c9e:	81 30       	cpi	r24, 0x01	; 1
     ca0:	a1 f4       	brne	.+40     	; 0xcca <main+0x184>
			{
				UART_sendByte(1);
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <UART_sendByte>
				assignPass(mainPassword,password1,pass_size);
     ca8:	88 e7       	ldi	r24, 0x78	; 120
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	2d e7       	ldi	r18, 0x7D	; 125
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	b9 01       	movw	r22, r18
     cb2:	45 e0       	ldi	r20, 0x05	; 5
     cb4:	0e 94 14 08 	call	0x1028	; 0x1028 <assignPass>
				savePasstoEEPROM(EEPROM_address,mainPassword,pass_size);
     cb8:	28 e7       	ldi	r18, 0x78	; 120
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	81 e1       	ldi	r24, 0x11	; 17
     cbe:	93 e0       	ldi	r25, 0x03	; 3
     cc0:	b9 01       	movw	r22, r18
     cc2:	45 e0       	ldi	r20, 0x05	; 5
     cc4:	0e 94 44 08 	call	0x1088	; 0x1088 <savePasstoEEPROM>
     cc8:	a3 cf       	rjmp	.-186    	; 0xc10 <main+0xca>
			}
			else
			{
				UART_sendByte(0);
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <UART_sendByte>
     cd0:	9f cf       	rjmp	.-194    	; 0xc10 <main+0xca>

			}
			break;

		case open :
			UART_recieveArray(password1,pass_size);
     cd2:	8d e7       	ldi	r24, 0x7D	; 125
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	65 e0       	ldi	r22, 0x05	; 5
     cd8:	0e 94 01 07 	call	0xe02	; 0xe02 <UART_recieveArray>
			readPassfromEEPROM(EEPROM_address,mainPassword,pass_size);
     cdc:	28 e7       	ldi	r18, 0x78	; 120
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	81 e1       	ldi	r24, 0x11	; 17
     ce2:	93 e0       	ldi	r25, 0x03	; 3
     ce4:	b9 01       	movw	r22, r18
     ce6:	45 e0       	ldi	r20, 0x05	; 5
     ce8:	0e 94 ed 08 	call	0x11da	; 0x11da <readPassfromEEPROM>
			pass_check=password_checker(mainPassword,password1,pass_size);
     cec:	88 e7       	ldi	r24, 0x78	; 120
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	2d e7       	ldi	r18, 0x7D	; 125
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	b9 01       	movw	r22, r18
     cf6:	45 e0       	ldi	r20, 0x05	; 5
     cf8:	0e 94 2a 07 	call	0xe54	; 0xe54 <password_checker>
     cfc:	89 83       	std	Y+1, r24	; 0x01

			if(pass_check==1)
     cfe:	89 81       	ldd	r24, Y+1	; 0x01
     d00:	81 30       	cpi	r24, 0x01	; 1
     d02:	31 f5       	brne	.+76     	; 0xd50 <main+0x20a>
			{
				UART_sendByte(1);
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <UART_sendByte>
				DcMotor_Rotate(CW,100);
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	64 e6       	ldi	r22, 0x64	; 100
     d0e:	0e 94 ff 09 	call	0x13fe	; 0x13fe <DcMotor_Rotate>
				Timer1_delay(15);
     d12:	8f e0       	ldi	r24, 0x0F	; 15
     d14:	0e 94 a0 09 	call	0x1340	; 0x1340 <Timer1_delay>


				UART_sendByte(1);
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <UART_sendByte>
				DcMotor_Rotate(stop,0);
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	60 e0       	ldi	r22, 0x00	; 0
     d22:	0e 94 ff 09 	call	0x13fe	; 0x13fe <DcMotor_Rotate>
				Timer1_delay(3);
     d26:	83 e0       	ldi	r24, 0x03	; 3
     d28:	0e 94 a0 09 	call	0x1340	; 0x1340 <Timer1_delay>


				UART_sendByte(1);
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <UART_sendByte>
				DcMotor_Rotate(A_CW,100);
     d32:	82 e0       	ldi	r24, 0x02	; 2
     d34:	64 e6       	ldi	r22, 0x64	; 100
     d36:	0e 94 ff 09 	call	0x13fe	; 0x13fe <DcMotor_Rotate>
				Timer1_delay(15);
     d3a:	8f e0       	ldi	r24, 0x0F	; 15
     d3c:	0e 94 a0 09 	call	0x1340	; 0x1340 <Timer1_delay>

				UART_sendByte(1);
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <UART_sendByte>
				DcMotor_Rotate(stop,0);
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	60 e0       	ldi	r22, 0x00	; 0
     d4a:	0e 94 ff 09 	call	0x13fe	; 0x13fe <DcMotor_Rotate>
     d4e:	60 cf       	rjmp	.-320    	; 0xc10 <main+0xca>


			}
			else
			{
				UART_sendByte(0);
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <UART_sendByte>
     d56:	5c cf       	rjmp	.-328    	; 0xc10 <main+0xca>
			}
			break;

		case change :
			UART_recieveArray(password1,pass_size);
     d58:	8d e7       	ldi	r24, 0x7D	; 125
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	65 e0       	ldi	r22, 0x05	; 5
     d5e:	0e 94 01 07 	call	0xe02	; 0xe02 <UART_recieveArray>
			readPassfromEEPROM(EEPROM_address,mainPassword,pass_size);
     d62:	28 e7       	ldi	r18, 0x78	; 120
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	81 e1       	ldi	r24, 0x11	; 17
     d68:	93 e0       	ldi	r25, 0x03	; 3
     d6a:	b9 01       	movw	r22, r18
     d6c:	45 e0       	ldi	r20, 0x05	; 5
     d6e:	0e 94 ed 08 	call	0x11da	; 0x11da <readPassfromEEPROM>
			pass_check=password_checker(mainPassword,password1,pass_size);
     d72:	88 e7       	ldi	r24, 0x78	; 120
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	2d e7       	ldi	r18, 0x7D	; 125
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	b9 01       	movw	r22, r18
     d7c:	45 e0       	ldi	r20, 0x05	; 5
     d7e:	0e 94 2a 07 	call	0xe54	; 0xe54 <password_checker>
     d82:	89 83       	std	Y+1, r24	; 0x01

			if(pass_check==1)
     d84:	89 81       	ldd	r24, Y+1	; 0x01
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	21 f4       	brne	.+8      	; 0xd92 <main+0x24c>
			{
				UART_sendByte(1);
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <UART_sendByte>
     d90:	3f cf       	rjmp	.-386    	; 0xc10 <main+0xca>
			}
			else
			{
				UART_sendByte(0);
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <UART_sendByte>
     d98:	3b cf       	rjmp	.-394    	; 0xc10 <main+0xca>
			}
			break;

		case error :

			Buzzer_on();
     d9a:	0e 94 cc 09 	call	0x1398	; 0x1398 <Buzzer_on>
			Timer1_delay(60);
     d9e:	8c e3       	ldi	r24, 0x3C	; 60
     da0:	0e 94 a0 09 	call	0x1340	; 0x1340 <Timer1_delay>
			Buzzer_off();
     da4:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <Buzzer_off>
			UART_sendByte(1);
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <UART_sendByte>
     dae:	30 cf       	rjmp	.-416    	; 0xc10 <main+0xca>

00000db0 <LCD_arrayDisplay>:
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void LCD_arrayDisplay(uint8 *array,uint8 size)
{
     db0:	df 93       	push	r29
     db2:	cf 93       	push	r28
     db4:	00 d0       	rcall	.+0      	; 0xdb6 <LCD_arrayDisplay+0x6>
     db6:	00 d0       	rcall	.+0      	; 0xdb8 <LCD_arrayDisplay+0x8>
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62
     dbc:	9b 83       	std	Y+3, r25	; 0x03
     dbe:	8a 83       	std	Y+2, r24	; 0x02
     dc0:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i ;
	for(i=0;i<size;i++)
     dc2:	19 82       	std	Y+1, r1	; 0x01
     dc4:	13 c0       	rjmp	.+38     	; 0xdec <LCD_arrayDisplay+0x3c>
	{
		LCD_intgerToString(array[i]);
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	8a 81       	ldd	r24, Y+2	; 0x02
     dce:	9b 81       	ldd	r25, Y+3	; 0x03
     dd0:	fc 01       	movw	r30, r24
     dd2:	e2 0f       	add	r30, r18
     dd4:	f3 1f       	adc	r31, r19
     dd6:	80 81       	ld	r24, Z
     dd8:	88 2f       	mov	r24, r24
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	0e 94 27 13 	call	0x264e	; 0x264e <LCD_intgerToString>
		LCD_displayCharacter(' ');
     de0:	80 e2       	ldi	r24, 0x20	; 32
     de2:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_displayCharacter>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void LCD_arrayDisplay(uint8 *array,uint8 size)
{
	uint8 i ;
	for(i=0;i<size;i++)
     de6:	89 81       	ldd	r24, Y+1	; 0x01
     de8:	8f 5f       	subi	r24, 0xFF	; 255
     dea:	89 83       	std	Y+1, r24	; 0x01
     dec:	99 81       	ldd	r25, Y+1	; 0x01
     dee:	8c 81       	ldd	r24, Y+4	; 0x04
     df0:	98 17       	cp	r25, r24
     df2:	48 f3       	brcs	.-46     	; 0xdc6 <LCD_arrayDisplay+0x16>
	{
		LCD_intgerToString(array[i]);
		LCD_displayCharacter(' ');
	}
}
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	0f 90       	pop	r0
     dfc:	cf 91       	pop	r28
     dfe:	df 91       	pop	r29
     e00:	08 95       	ret

00000e02 <UART_recieveArray>:
void UART_recieveArray(uint8 *array,uint8 size)
{
     e02:	0f 93       	push	r16
     e04:	1f 93       	push	r17
     e06:	df 93       	push	r29
     e08:	cf 93       	push	r28
     e0a:	00 d0       	rcall	.+0      	; 0xe0c <UART_recieveArray+0xa>
     e0c:	00 d0       	rcall	.+0      	; 0xe0e <UART_recieveArray+0xc>
     e0e:	cd b7       	in	r28, 0x3d	; 61
     e10:	de b7       	in	r29, 0x3e	; 62
     e12:	9b 83       	std	Y+3, r25	; 0x03
     e14:	8a 83       	std	Y+2, r24	; 0x02
     e16:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i ;
	for(i=0;i<size;i++)
     e18:	19 82       	std	Y+1, r1	; 0x01
     e1a:	0f c0       	rjmp	.+30     	; 0xe3a <UART_recieveArray+0x38>
	{
		array[i] = UART_recieveByte();
     e1c:	89 81       	ldd	r24, Y+1	; 0x01
     e1e:	28 2f       	mov	r18, r24
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	8a 81       	ldd	r24, Y+2	; 0x02
     e24:	9b 81       	ldd	r25, Y+3	; 0x03
     e26:	8c 01       	movw	r16, r24
     e28:	02 0f       	add	r16, r18
     e2a:	13 1f       	adc	r17, r19
     e2c:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <UART_recieveByte>
     e30:	f8 01       	movw	r30, r16
     e32:	80 83       	st	Z, r24
	}
}
void UART_recieveArray(uint8 *array,uint8 size)
{
	uint8 i ;
	for(i=0;i<size;i++)
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	8f 5f       	subi	r24, 0xFF	; 255
     e38:	89 83       	std	Y+1, r24	; 0x01
     e3a:	99 81       	ldd	r25, Y+1	; 0x01
     e3c:	8c 81       	ldd	r24, Y+4	; 0x04
     e3e:	98 17       	cp	r25, r24
     e40:	68 f3       	brcs	.-38     	; 0xe1c <UART_recieveArray+0x1a>
	{
		array[i] = UART_recieveByte();
	}
}
     e42:	0f 90       	pop	r0
     e44:	0f 90       	pop	r0
     e46:	0f 90       	pop	r0
     e48:	0f 90       	pop	r0
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	1f 91       	pop	r17
     e50:	0f 91       	pop	r16
     e52:	08 95       	ret

00000e54 <password_checker>:

uint8 password_checker(uint8 *pass1,uint8 *pass2,uint8 size)
{
     e54:	df 93       	push	r29
     e56:	cf 93       	push	r28
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
     e5c:	27 97       	sbiw	r28, 0x07	; 7
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	f8 94       	cli
     e62:	de bf       	out	0x3e, r29	; 62
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	cd bf       	out	0x3d, r28	; 61
     e68:	9b 83       	std	Y+3, r25	; 0x03
     e6a:	8a 83       	std	Y+2, r24	; 0x02
     e6c:	7d 83       	std	Y+5, r23	; 0x05
     e6e:	6c 83       	std	Y+4, r22	; 0x04
     e70:	4e 83       	std	Y+6, r20	; 0x06
	uint8 i;
	for(i=0;i<size;i++)
     e72:	19 82       	std	Y+1, r1	; 0x01
     e74:	19 c0       	rjmp	.+50     	; 0xea8 <password_checker+0x54>
	{
		if(pass1[i]!= pass2[i])
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	28 2f       	mov	r18, r24
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	8a 81       	ldd	r24, Y+2	; 0x02
     e7e:	9b 81       	ldd	r25, Y+3	; 0x03
     e80:	fc 01       	movw	r30, r24
     e82:	e2 0f       	add	r30, r18
     e84:	f3 1f       	adc	r31, r19
     e86:	40 81       	ld	r20, Z
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	28 2f       	mov	r18, r24
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	8c 81       	ldd	r24, Y+4	; 0x04
     e90:	9d 81       	ldd	r25, Y+5	; 0x05
     e92:	fc 01       	movw	r30, r24
     e94:	e2 0f       	add	r30, r18
     e96:	f3 1f       	adc	r31, r19
     e98:	80 81       	ld	r24, Z
     e9a:	48 17       	cp	r20, r24
     e9c:	11 f0       	breq	.+4      	; 0xea2 <password_checker+0x4e>
		{return 0;}
     e9e:	1f 82       	std	Y+7, r1	; 0x07
     ea0:	09 c0       	rjmp	.+18     	; 0xeb4 <password_checker+0x60>
}

uint8 password_checker(uint8 *pass1,uint8 *pass2,uint8 size)
{
	uint8 i;
	for(i=0;i<size;i++)
     ea2:	89 81       	ldd	r24, Y+1	; 0x01
     ea4:	8f 5f       	subi	r24, 0xFF	; 255
     ea6:	89 83       	std	Y+1, r24	; 0x01
     ea8:	99 81       	ldd	r25, Y+1	; 0x01
     eaa:	8e 81       	ldd	r24, Y+6	; 0x06
     eac:	98 17       	cp	r25, r24
     eae:	18 f3       	brcs	.-58     	; 0xe76 <password_checker+0x22>
	{
		if(pass1[i]!= pass2[i])
		{return 0;}
	}
	return 1;
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	8f 83       	std	Y+7, r24	; 0x07
     eb4:	8f 81       	ldd	r24, Y+7	; 0x07
}
     eb6:	27 96       	adiw	r28, 0x07	; 7
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	f8 94       	cli
     ebc:	de bf       	out	0x3e, r29	; 62
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	cd bf       	out	0x3d, r28	; 61
     ec2:	cf 91       	pop	r28
     ec4:	df 91       	pop	r29
     ec6:	08 95       	ret

00000ec8 <calc>:

uint32 calc(uint8 key,uint8 position, uint32 currentVal){
     ec8:	df 93       	push	r29
     eca:	cf 93       	push	r28
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
     ed0:	2a 97       	sbiw	r28, 0x0a	; 10
     ed2:	0f b6       	in	r0, 0x3f	; 63
     ed4:	f8 94       	cli
     ed6:	de bf       	out	0x3e, r29	; 62
     ed8:	0f be       	out	0x3f, r0	; 63
     eda:	cd bf       	out	0x3d, r28	; 61
     edc:	8d 83       	std	Y+5, r24	; 0x05
     ede:	6e 83       	std	Y+6, r22	; 0x06
     ee0:	2f 83       	std	Y+7, r18	; 0x07
     ee2:	38 87       	std	Y+8, r19	; 0x08
     ee4:	49 87       	std	Y+9, r20	; 0x09
     ee6:	5a 87       	std	Y+10, r21	; 0x0a
	uint32 multi =0;
     ee8:	19 82       	std	Y+1, r1	; 0x01
     eea:	1a 82       	std	Y+2, r1	; 0x02
     eec:	1b 82       	std	Y+3, r1	; 0x03
     eee:	1c 82       	std	Y+4, r1	; 0x04

	if(position ==0)
     ef0:	8e 81       	ldd	r24, Y+6	; 0x06
     ef2:	88 23       	and	r24, r24
     ef4:	49 f4       	brne	.+18     	; 0xf08 <calc+0x40>
		multi=10000;
     ef6:	80 e1       	ldi	r24, 0x10	; 16
     ef8:	97 e2       	ldi	r25, 0x27	; 39
     efa:	a0 e0       	ldi	r26, 0x00	; 0
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	89 83       	std	Y+1, r24	; 0x01
     f00:	9a 83       	std	Y+2, r25	; 0x02
     f02:	ab 83       	std	Y+3, r26	; 0x03
     f04:	bc 83       	std	Y+4, r27	; 0x04
     f06:	2f c0       	rjmp	.+94     	; 0xf66 <calc+0x9e>
	else if(position ==1)
     f08:	8e 81       	ldd	r24, Y+6	; 0x06
     f0a:	81 30       	cpi	r24, 0x01	; 1
     f0c:	49 f4       	brne	.+18     	; 0xf20 <calc+0x58>
		multi=1000;
     f0e:	88 ee       	ldi	r24, 0xE8	; 232
     f10:	93 e0       	ldi	r25, 0x03	; 3
     f12:	a0 e0       	ldi	r26, 0x00	; 0
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	89 83       	std	Y+1, r24	; 0x01
     f18:	9a 83       	std	Y+2, r25	; 0x02
     f1a:	ab 83       	std	Y+3, r26	; 0x03
     f1c:	bc 83       	std	Y+4, r27	; 0x04
     f1e:	23 c0       	rjmp	.+70     	; 0xf66 <calc+0x9e>
	else if(position ==2)
     f20:	8e 81       	ldd	r24, Y+6	; 0x06
     f22:	82 30       	cpi	r24, 0x02	; 2
     f24:	49 f4       	brne	.+18     	; 0xf38 <calc+0x70>
		multi=100;
     f26:	84 e6       	ldi	r24, 0x64	; 100
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	a0 e0       	ldi	r26, 0x00	; 0
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	89 83       	std	Y+1, r24	; 0x01
     f30:	9a 83       	std	Y+2, r25	; 0x02
     f32:	ab 83       	std	Y+3, r26	; 0x03
     f34:	bc 83       	std	Y+4, r27	; 0x04
     f36:	17 c0       	rjmp	.+46     	; 0xf66 <calc+0x9e>
	else if(position ==3)
     f38:	8e 81       	ldd	r24, Y+6	; 0x06
     f3a:	83 30       	cpi	r24, 0x03	; 3
     f3c:	49 f4       	brne	.+18     	; 0xf50 <calc+0x88>
		multi=10;
     f3e:	8a e0       	ldi	r24, 0x0A	; 10
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	a0 e0       	ldi	r26, 0x00	; 0
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	89 83       	std	Y+1, r24	; 0x01
     f48:	9a 83       	std	Y+2, r25	; 0x02
     f4a:	ab 83       	std	Y+3, r26	; 0x03
     f4c:	bc 83       	std	Y+4, r27	; 0x04
     f4e:	0b c0       	rjmp	.+22     	; 0xf66 <calc+0x9e>
	else if(position ==4)
     f50:	8e 81       	ldd	r24, Y+6	; 0x06
     f52:	84 30       	cpi	r24, 0x04	; 4
     f54:	41 f4       	brne	.+16     	; 0xf66 <calc+0x9e>
		multi=1;
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	a0 e0       	ldi	r26, 0x00	; 0
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	89 83       	std	Y+1, r24	; 0x01
     f60:	9a 83       	std	Y+2, r25	; 0x02
     f62:	ab 83       	std	Y+3, r26	; 0x03
     f64:	bc 83       	std	Y+4, r27	; 0x04

	return currentVal+key*multi;
     f66:	8d 81       	ldd	r24, Y+5	; 0x05
     f68:	88 2f       	mov	r24, r24
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	a0 e0       	ldi	r26, 0x00	; 0
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	29 81       	ldd	r18, Y+1	; 0x01
     f72:	3a 81       	ldd	r19, Y+2	; 0x02
     f74:	4b 81       	ldd	r20, Y+3	; 0x03
     f76:	5c 81       	ldd	r21, Y+4	; 0x04
     f78:	bc 01       	movw	r22, r24
     f7a:	cd 01       	movw	r24, r26
     f7c:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <__mulsi3>
     f80:	9b 01       	movw	r18, r22
     f82:	ac 01       	movw	r20, r24
     f84:	8f 81       	ldd	r24, Y+7	; 0x07
     f86:	98 85       	ldd	r25, Y+8	; 0x08
     f88:	a9 85       	ldd	r26, Y+9	; 0x09
     f8a:	ba 85       	ldd	r27, Y+10	; 0x0a
     f8c:	82 0f       	add	r24, r18
     f8e:	93 1f       	adc	r25, r19
     f90:	a4 1f       	adc	r26, r20
     f92:	b5 1f       	adc	r27, r21

}
     f94:	bc 01       	movw	r22, r24
     f96:	cd 01       	movw	r24, r26
     f98:	2a 96       	adiw	r28, 0x0a	; 10
     f9a:	0f b6       	in	r0, 0x3f	; 63
     f9c:	f8 94       	cli
     f9e:	de bf       	out	0x3e, r29	; 62
     fa0:	0f be       	out	0x3f, r0	; 63
     fa2:	cd bf       	out	0x3d, r28	; 61
     fa4:	cf 91       	pop	r28
     fa6:	df 91       	pop	r29
     fa8:	08 95       	ret

00000faa <convertArrayToInt>:


uint32 convertArrayToInt(uint8 *array,uint8 size)
{
     faa:	df 93       	push	r29
     fac:	cf 93       	push	r28
     fae:	cd b7       	in	r28, 0x3d	; 61
     fb0:	de b7       	in	r29, 0x3e	; 62
     fb2:	28 97       	sbiw	r28, 0x08	; 8
     fb4:	0f b6       	in	r0, 0x3f	; 63
     fb6:	f8 94       	cli
     fb8:	de bf       	out	0x3e, r29	; 62
     fba:	0f be       	out	0x3f, r0	; 63
     fbc:	cd bf       	out	0x3d, r28	; 61
     fbe:	9f 83       	std	Y+7, r25	; 0x07
     fc0:	8e 83       	std	Y+6, r24	; 0x06
     fc2:	68 87       	std	Y+8, r22	; 0x08
	uint8 i ;
	uint32	number=0;
     fc4:	19 82       	std	Y+1, r1	; 0x01
     fc6:	1a 82       	std	Y+2, r1	; 0x02
     fc8:	1b 82       	std	Y+3, r1	; 0x03
     fca:	1c 82       	std	Y+4, r1	; 0x04
	for(i=0;i<size;i++)
     fcc:	1d 82       	std	Y+5, r1	; 0x05
     fce:	19 c0       	rjmp	.+50     	; 0x1002 <convertArrayToInt+0x58>
	{
		number=calc(array[i],i,number);
     fd0:	8d 81       	ldd	r24, Y+5	; 0x05
     fd2:	28 2f       	mov	r18, r24
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	8e 81       	ldd	r24, Y+6	; 0x06
     fd8:	9f 81       	ldd	r25, Y+7	; 0x07
     fda:	fc 01       	movw	r30, r24
     fdc:	e2 0f       	add	r30, r18
     fde:	f3 1f       	adc	r31, r19
     fe0:	80 81       	ld	r24, Z
     fe2:	29 81       	ldd	r18, Y+1	; 0x01
     fe4:	3a 81       	ldd	r19, Y+2	; 0x02
     fe6:	4b 81       	ldd	r20, Y+3	; 0x03
     fe8:	5c 81       	ldd	r21, Y+4	; 0x04
     fea:	6d 81       	ldd	r22, Y+5	; 0x05
     fec:	0e 94 64 07 	call	0xec8	; 0xec8 <calc>
     ff0:	dc 01       	movw	r26, r24
     ff2:	cb 01       	movw	r24, r22
     ff4:	89 83       	std	Y+1, r24	; 0x01
     ff6:	9a 83       	std	Y+2, r25	; 0x02
     ff8:	ab 83       	std	Y+3, r26	; 0x03
     ffa:	bc 83       	std	Y+4, r27	; 0x04

uint32 convertArrayToInt(uint8 *array,uint8 size)
{
	uint8 i ;
	uint32	number=0;
	for(i=0;i<size;i++)
     ffc:	8d 81       	ldd	r24, Y+5	; 0x05
     ffe:	8f 5f       	subi	r24, 0xFF	; 255
    1000:	8d 83       	std	Y+5, r24	; 0x05
    1002:	9d 81       	ldd	r25, Y+5	; 0x05
    1004:	88 85       	ldd	r24, Y+8	; 0x08
    1006:	98 17       	cp	r25, r24
    1008:	18 f3       	brcs	.-58     	; 0xfd0 <convertArrayToInt+0x26>
	{
		number=calc(array[i],i,number);
	}
	return number;
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	9a 81       	ldd	r25, Y+2	; 0x02
    100e:	ab 81       	ldd	r26, Y+3	; 0x03
    1010:	bc 81       	ldd	r27, Y+4	; 0x04
}
    1012:	bc 01       	movw	r22, r24
    1014:	cd 01       	movw	r24, r26
    1016:	28 96       	adiw	r28, 0x08	; 8
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	f8 94       	cli
    101c:	de bf       	out	0x3e, r29	; 62
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	cd bf       	out	0x3d, r28	; 61
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <assignPass>:


void assignPass(uint8 *array1,uint8 *array2,uint8 size)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	00 d0       	rcall	.+0      	; 0x102e <assignPass+0x6>
    102e:	00 d0       	rcall	.+0      	; 0x1030 <assignPass+0x8>
    1030:	00 d0       	rcall	.+0      	; 0x1032 <assignPass+0xa>
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
    1036:	9b 83       	std	Y+3, r25	; 0x03
    1038:	8a 83       	std	Y+2, r24	; 0x02
    103a:	7d 83       	std	Y+5, r23	; 0x05
    103c:	6c 83       	std	Y+4, r22	; 0x04
    103e:	4e 83       	std	Y+6, r20	; 0x06
	uint8 i ;

	for(i=0;i<size;i++)
    1040:	19 82       	std	Y+1, r1	; 0x01
    1042:	15 c0       	rjmp	.+42     	; 0x106e <assignPass+0x46>
	{
		array1[i]=array2[i];
    1044:	89 81       	ldd	r24, Y+1	; 0x01
    1046:	28 2f       	mov	r18, r24
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	8a 81       	ldd	r24, Y+2	; 0x02
    104c:	9b 81       	ldd	r25, Y+3	; 0x03
    104e:	dc 01       	movw	r26, r24
    1050:	a2 0f       	add	r26, r18
    1052:	b3 1f       	adc	r27, r19
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	28 2f       	mov	r18, r24
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	8c 81       	ldd	r24, Y+4	; 0x04
    105c:	9d 81       	ldd	r25, Y+5	; 0x05
    105e:	fc 01       	movw	r30, r24
    1060:	e2 0f       	add	r30, r18
    1062:	f3 1f       	adc	r31, r19
    1064:	80 81       	ld	r24, Z
    1066:	8c 93       	st	X, r24

void assignPass(uint8 *array1,uint8 *array2,uint8 size)
{
	uint8 i ;

	for(i=0;i<size;i++)
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	8f 5f       	subi	r24, 0xFF	; 255
    106c:	89 83       	std	Y+1, r24	; 0x01
    106e:	99 81       	ldd	r25, Y+1	; 0x01
    1070:	8e 81       	ldd	r24, Y+6	; 0x06
    1072:	98 17       	cp	r25, r24
    1074:	38 f3       	brcs	.-50     	; 0x1044 <assignPass+0x1c>
	{
		array1[i]=array2[i];
	}

}
    1076:	26 96       	adiw	r28, 0x06	; 6
    1078:	0f b6       	in	r0, 0x3f	; 63
    107a:	f8 94       	cli
    107c:	de bf       	out	0x3e, r29	; 62
    107e:	0f be       	out	0x3f, r0	; 63
    1080:	cd bf       	out	0x3d, r28	; 61
    1082:	cf 91       	pop	r28
    1084:	df 91       	pop	r29
    1086:	08 95       	ret

00001088 <savePasstoEEPROM>:

void savePasstoEEPROM(uint16 address , uint8 *array,uint8 size)
{
    1088:	df 93       	push	r29
    108a:	cf 93       	push	r28
    108c:	cd b7       	in	r28, 0x3d	; 61
    108e:	de b7       	in	r29, 0x3e	; 62
    1090:	64 97       	sbiw	r28, 0x14	; 20
    1092:	0f b6       	in	r0, 0x3f	; 63
    1094:	f8 94       	cli
    1096:	de bf       	out	0x3e, r29	; 62
    1098:	0f be       	out	0x3f, r0	; 63
    109a:	cd bf       	out	0x3d, r28	; 61
    109c:	99 8b       	std	Y+17, r25	; 0x11
    109e:	88 8b       	std	Y+16, r24	; 0x10
    10a0:	7b 8b       	std	Y+19, r23	; 0x13
    10a2:	6a 8b       	std	Y+18, r22	; 0x12
    10a4:	4c 8b       	std	Y+20, r20	; 0x14
	uint8 i ;
	for(i=0;i<size;i++)
    10a6:	1f 86       	std	Y+15, r1	; 0x0f
    10a8:	8a c0       	rjmp	.+276    	; 0x11be <savePasstoEEPROM+0x136>
	{
		EEPROM_writeByte(address+i,array[i]);
    10aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	88 89       	ldd	r24, Y+16	; 0x10
    10b2:	99 89       	ldd	r25, Y+17	; 0x11
    10b4:	a9 01       	movw	r20, r18
    10b6:	48 0f       	add	r20, r24
    10b8:	59 1f       	adc	r21, r25
    10ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    10bc:	28 2f       	mov	r18, r24
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	8a 89       	ldd	r24, Y+18	; 0x12
    10c2:	9b 89       	ldd	r25, Y+19	; 0x13
    10c4:	fc 01       	movw	r30, r24
    10c6:	e2 0f       	add	r30, r18
    10c8:	f3 1f       	adc	r31, r19
    10ca:	20 81       	ld	r18, Z
    10cc:	ca 01       	movw	r24, r20
    10ce:	62 2f       	mov	r22, r18
    10d0:	0e 94 4a 0a 	call	0x1494	; 0x1494 <EEPROM_writeByte>
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	a0 e2       	ldi	r26, 0x20	; 32
    10da:	b1 e4       	ldi	r27, 0x41	; 65
    10dc:	8b 87       	std	Y+11, r24	; 0x0b
    10de:	9c 87       	std	Y+12, r25	; 0x0c
    10e0:	ad 87       	std	Y+13, r26	; 0x0d
    10e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	4a ef       	ldi	r20, 0xFA	; 250
    10f2:	54 e4       	ldi	r21, 0x44	; 68
    10f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	8f 83       	std	Y+7, r24	; 0x07
    10fe:	98 87       	std	Y+8, r25	; 0x08
    1100:	a9 87       	std	Y+9, r26	; 0x09
    1102:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1104:	6f 81       	ldd	r22, Y+7	; 0x07
    1106:	78 85       	ldd	r23, Y+8	; 0x08
    1108:	89 85       	ldd	r24, Y+9	; 0x09
    110a:	9a 85       	ldd	r25, Y+10	; 0x0a
    110c:	20 e0       	ldi	r18, 0x00	; 0
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	40 e8       	ldi	r20, 0x80	; 128
    1112:	5f e3       	ldi	r21, 0x3F	; 63
    1114:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1118:	88 23       	and	r24, r24
    111a:	2c f4       	brge	.+10     	; 0x1126 <savePasstoEEPROM+0x9e>
		__ticks = 1;
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	9e 83       	std	Y+6, r25	; 0x06
    1122:	8d 83       	std	Y+5, r24	; 0x05
    1124:	3f c0       	rjmp	.+126    	; 0x11a4 <savePasstoEEPROM+0x11c>
	else if (__tmp > 65535)
    1126:	6f 81       	ldd	r22, Y+7	; 0x07
    1128:	78 85       	ldd	r23, Y+8	; 0x08
    112a:	89 85       	ldd	r24, Y+9	; 0x09
    112c:	9a 85       	ldd	r25, Y+10	; 0x0a
    112e:	20 e0       	ldi	r18, 0x00	; 0
    1130:	3f ef       	ldi	r19, 0xFF	; 255
    1132:	4f e7       	ldi	r20, 0x7F	; 127
    1134:	57 e4       	ldi	r21, 0x47	; 71
    1136:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    113a:	18 16       	cp	r1, r24
    113c:	4c f5       	brge	.+82     	; 0x1190 <savePasstoEEPROM+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    113e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1140:	7c 85       	ldd	r23, Y+12	; 0x0c
    1142:	8d 85       	ldd	r24, Y+13	; 0x0d
    1144:	9e 85       	ldd	r25, Y+14	; 0x0e
    1146:	20 e0       	ldi	r18, 0x00	; 0
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	40 e2       	ldi	r20, 0x20	; 32
    114c:	51 e4       	ldi	r21, 0x41	; 65
    114e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1152:	dc 01       	movw	r26, r24
    1154:	cb 01       	movw	r24, r22
    1156:	bc 01       	movw	r22, r24
    1158:	cd 01       	movw	r24, r26
    115a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    115e:	dc 01       	movw	r26, r24
    1160:	cb 01       	movw	r24, r22
    1162:	9e 83       	std	Y+6, r25	; 0x06
    1164:	8d 83       	std	Y+5, r24	; 0x05
    1166:	0f c0       	rjmp	.+30     	; 0x1186 <savePasstoEEPROM+0xfe>
    1168:	88 ec       	ldi	r24, 0xC8	; 200
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	9c 83       	std	Y+4, r25	; 0x04
    116e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	9c 81       	ldd	r25, Y+4	; 0x04
    1174:	01 97       	sbiw	r24, 0x01	; 1
    1176:	f1 f7       	brne	.-4      	; 0x1174 <savePasstoEEPROM+0xec>
    1178:	9c 83       	std	Y+4, r25	; 0x04
    117a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    117c:	8d 81       	ldd	r24, Y+5	; 0x05
    117e:	9e 81       	ldd	r25, Y+6	; 0x06
    1180:	01 97       	sbiw	r24, 0x01	; 1
    1182:	9e 83       	std	Y+6, r25	; 0x06
    1184:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1186:	8d 81       	ldd	r24, Y+5	; 0x05
    1188:	9e 81       	ldd	r25, Y+6	; 0x06
    118a:	00 97       	sbiw	r24, 0x00	; 0
    118c:	69 f7       	brne	.-38     	; 0x1168 <savePasstoEEPROM+0xe0>
    118e:	14 c0       	rjmp	.+40     	; 0x11b8 <savePasstoEEPROM+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1190:	6f 81       	ldd	r22, Y+7	; 0x07
    1192:	78 85       	ldd	r23, Y+8	; 0x08
    1194:	89 85       	ldd	r24, Y+9	; 0x09
    1196:	9a 85       	ldd	r25, Y+10	; 0x0a
    1198:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    119c:	dc 01       	movw	r26, r24
    119e:	cb 01       	movw	r24, r22
    11a0:	9e 83       	std	Y+6, r25	; 0x06
    11a2:	8d 83       	std	Y+5, r24	; 0x05
    11a4:	8d 81       	ldd	r24, Y+5	; 0x05
    11a6:	9e 81       	ldd	r25, Y+6	; 0x06
    11a8:	9a 83       	std	Y+2, r25	; 0x02
    11aa:	89 83       	std	Y+1, r24	; 0x01
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	9a 81       	ldd	r25, Y+2	; 0x02
    11b0:	01 97       	sbiw	r24, 0x01	; 1
    11b2:	f1 f7       	brne	.-4      	; 0x11b0 <savePasstoEEPROM+0x128>
    11b4:	9a 83       	std	Y+2, r25	; 0x02
    11b6:	89 83       	std	Y+1, r24	; 0x01
}

void savePasstoEEPROM(uint16 address , uint8 *array,uint8 size)
{
	uint8 i ;
	for(i=0;i<size;i++)
    11b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    11ba:	8f 5f       	subi	r24, 0xFF	; 255
    11bc:	8f 87       	std	Y+15, r24	; 0x0f
    11be:	9f 85       	ldd	r25, Y+15	; 0x0f
    11c0:	8c 89       	ldd	r24, Y+20	; 0x14
    11c2:	98 17       	cp	r25, r24
    11c4:	08 f4       	brcc	.+2      	; 0x11c8 <savePasstoEEPROM+0x140>
    11c6:	71 cf       	rjmp	.-286    	; 0x10aa <savePasstoEEPROM+0x22>
	{
		EEPROM_writeByte(address+i,array[i]);
		_delay_ms(10);
	}

}
    11c8:	64 96       	adiw	r28, 0x14	; 20
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	f8 94       	cli
    11ce:	de bf       	out	0x3e, r29	; 62
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	cd bf       	out	0x3d, r28	; 61
    11d4:	cf 91       	pop	r28
    11d6:	df 91       	pop	r29
    11d8:	08 95       	ret

000011da <readPassfromEEPROM>:
void readPassfromEEPROM(uint16 address , uint8 *array,uint8 size)
{
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
    11e2:	64 97       	sbiw	r28, 0x14	; 20
    11e4:	0f b6       	in	r0, 0x3f	; 63
    11e6:	f8 94       	cli
    11e8:	de bf       	out	0x3e, r29	; 62
    11ea:	0f be       	out	0x3f, r0	; 63
    11ec:	cd bf       	out	0x3d, r28	; 61
    11ee:	99 8b       	std	Y+17, r25	; 0x11
    11f0:	88 8b       	std	Y+16, r24	; 0x10
    11f2:	7b 8b       	std	Y+19, r23	; 0x13
    11f4:	6a 8b       	std	Y+18, r22	; 0x12
    11f6:	4c 8b       	std	Y+20, r20	; 0x14
	uint8 i ;
	for(i=0;i<size;i++)
    11f8:	1f 86       	std	Y+15, r1	; 0x0f
    11fa:	88 c0       	rjmp	.+272    	; 0x130c <readPassfromEEPROM+0x132>
	{
		EEPROM_readByte(address+i,&array[i]);
    11fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	88 89       	ldd	r24, Y+16	; 0x10
    1204:	99 89       	ldd	r25, Y+17	; 0x11
    1206:	a9 01       	movw	r20, r18
    1208:	48 0f       	add	r20, r24
    120a:	59 1f       	adc	r21, r25
    120c:	8f 85       	ldd	r24, Y+15	; 0x0f
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	8a 89       	ldd	r24, Y+18	; 0x12
    1214:	9b 89       	ldd	r25, Y+19	; 0x13
    1216:	28 0f       	add	r18, r24
    1218:	39 1f       	adc	r19, r25
    121a:	ca 01       	movw	r24, r20
    121c:	b9 01       	movw	r22, r18
    121e:	0e 94 8b 0a 	call	0x1516	; 0x1516 <EEPROM_readByte>
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	a0 e2       	ldi	r26, 0x20	; 32
    1228:	b1 e4       	ldi	r27, 0x41	; 65
    122a:	8b 87       	std	Y+11, r24	; 0x0b
    122c:	9c 87       	std	Y+12, r25	; 0x0c
    122e:	ad 87       	std	Y+13, r26	; 0x0d
    1230:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1232:	6b 85       	ldd	r22, Y+11	; 0x0b
    1234:	7c 85       	ldd	r23, Y+12	; 0x0c
    1236:	8d 85       	ldd	r24, Y+13	; 0x0d
    1238:	9e 85       	ldd	r25, Y+14	; 0x0e
    123a:	20 e0       	ldi	r18, 0x00	; 0
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	4a ef       	ldi	r20, 0xFA	; 250
    1240:	54 e4       	ldi	r21, 0x44	; 68
    1242:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1246:	dc 01       	movw	r26, r24
    1248:	cb 01       	movw	r24, r22
    124a:	8f 83       	std	Y+7, r24	; 0x07
    124c:	98 87       	std	Y+8, r25	; 0x08
    124e:	a9 87       	std	Y+9, r26	; 0x09
    1250:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1252:	6f 81       	ldd	r22, Y+7	; 0x07
    1254:	78 85       	ldd	r23, Y+8	; 0x08
    1256:	89 85       	ldd	r24, Y+9	; 0x09
    1258:	9a 85       	ldd	r25, Y+10	; 0x0a
    125a:	20 e0       	ldi	r18, 0x00	; 0
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	40 e8       	ldi	r20, 0x80	; 128
    1260:	5f e3       	ldi	r21, 0x3F	; 63
    1262:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1266:	88 23       	and	r24, r24
    1268:	2c f4       	brge	.+10     	; 0x1274 <readPassfromEEPROM+0x9a>
		__ticks = 1;
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	9e 83       	std	Y+6, r25	; 0x06
    1270:	8d 83       	std	Y+5, r24	; 0x05
    1272:	3f c0       	rjmp	.+126    	; 0x12f2 <readPassfromEEPROM+0x118>
	else if (__tmp > 65535)
    1274:	6f 81       	ldd	r22, Y+7	; 0x07
    1276:	78 85       	ldd	r23, Y+8	; 0x08
    1278:	89 85       	ldd	r24, Y+9	; 0x09
    127a:	9a 85       	ldd	r25, Y+10	; 0x0a
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	3f ef       	ldi	r19, 0xFF	; 255
    1280:	4f e7       	ldi	r20, 0x7F	; 127
    1282:	57 e4       	ldi	r21, 0x47	; 71
    1284:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1288:	18 16       	cp	r1, r24
    128a:	4c f5       	brge	.+82     	; 0x12de <readPassfromEEPROM+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    128c:	6b 85       	ldd	r22, Y+11	; 0x0b
    128e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1290:	8d 85       	ldd	r24, Y+13	; 0x0d
    1292:	9e 85       	ldd	r25, Y+14	; 0x0e
    1294:	20 e0       	ldi	r18, 0x00	; 0
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	40 e2       	ldi	r20, 0x20	; 32
    129a:	51 e4       	ldi	r21, 0x41	; 65
    129c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12a0:	dc 01       	movw	r26, r24
    12a2:	cb 01       	movw	r24, r22
    12a4:	bc 01       	movw	r22, r24
    12a6:	cd 01       	movw	r24, r26
    12a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ac:	dc 01       	movw	r26, r24
    12ae:	cb 01       	movw	r24, r22
    12b0:	9e 83       	std	Y+6, r25	; 0x06
    12b2:	8d 83       	std	Y+5, r24	; 0x05
    12b4:	0f c0       	rjmp	.+30     	; 0x12d4 <readPassfromEEPROM+0xfa>
    12b6:	88 ec       	ldi	r24, 0xC8	; 200
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	9c 83       	std	Y+4, r25	; 0x04
    12bc:	8b 83       	std	Y+3, r24	; 0x03
    12be:	8b 81       	ldd	r24, Y+3	; 0x03
    12c0:	9c 81       	ldd	r25, Y+4	; 0x04
    12c2:	01 97       	sbiw	r24, 0x01	; 1
    12c4:	f1 f7       	brne	.-4      	; 0x12c2 <readPassfromEEPROM+0xe8>
    12c6:	9c 83       	std	Y+4, r25	; 0x04
    12c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ca:	8d 81       	ldd	r24, Y+5	; 0x05
    12cc:	9e 81       	ldd	r25, Y+6	; 0x06
    12ce:	01 97       	sbiw	r24, 0x01	; 1
    12d0:	9e 83       	std	Y+6, r25	; 0x06
    12d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12d4:	8d 81       	ldd	r24, Y+5	; 0x05
    12d6:	9e 81       	ldd	r25, Y+6	; 0x06
    12d8:	00 97       	sbiw	r24, 0x00	; 0
    12da:	69 f7       	brne	.-38     	; 0x12b6 <readPassfromEEPROM+0xdc>
    12dc:	14 c0       	rjmp	.+40     	; 0x1306 <readPassfromEEPROM+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12de:	6f 81       	ldd	r22, Y+7	; 0x07
    12e0:	78 85       	ldd	r23, Y+8	; 0x08
    12e2:	89 85       	ldd	r24, Y+9	; 0x09
    12e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ea:	dc 01       	movw	r26, r24
    12ec:	cb 01       	movw	r24, r22
    12ee:	9e 83       	std	Y+6, r25	; 0x06
    12f0:	8d 83       	std	Y+5, r24	; 0x05
    12f2:	8d 81       	ldd	r24, Y+5	; 0x05
    12f4:	9e 81       	ldd	r25, Y+6	; 0x06
    12f6:	9a 83       	std	Y+2, r25	; 0x02
    12f8:	89 83       	std	Y+1, r24	; 0x01
    12fa:	89 81       	ldd	r24, Y+1	; 0x01
    12fc:	9a 81       	ldd	r25, Y+2	; 0x02
    12fe:	01 97       	sbiw	r24, 0x01	; 1
    1300:	f1 f7       	brne	.-4      	; 0x12fe <readPassfromEEPROM+0x124>
    1302:	9a 83       	std	Y+2, r25	; 0x02
    1304:	89 83       	std	Y+1, r24	; 0x01

}
void readPassfromEEPROM(uint16 address , uint8 *array,uint8 size)
{
	uint8 i ;
	for(i=0;i<size;i++)
    1306:	8f 85       	ldd	r24, Y+15	; 0x0f
    1308:	8f 5f       	subi	r24, 0xFF	; 255
    130a:	8f 87       	std	Y+15, r24	; 0x0f
    130c:	9f 85       	ldd	r25, Y+15	; 0x0f
    130e:	8c 89       	ldd	r24, Y+20	; 0x14
    1310:	98 17       	cp	r25, r24
    1312:	08 f4       	brcc	.+2      	; 0x1316 <readPassfromEEPROM+0x13c>
    1314:	73 cf       	rjmp	.-282    	; 0x11fc <readPassfromEEPROM+0x22>
	{
		EEPROM_readByte(address+i,&array[i]);
		_delay_ms(10);
	}

}
    1316:	64 96       	adiw	r28, 0x14	; 20
    1318:	0f b6       	in	r0, 0x3f	; 63
    131a:	f8 94       	cli
    131c:	de bf       	out	0x3e, r29	; 62
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	cd bf       	out	0x3d, r28	; 61
    1322:	cf 91       	pop	r28
    1324:	df 91       	pop	r29
    1326:	08 95       	ret

00001328 <Timer1_ISR>:
void Timer1_ISR(void){
    1328:	df 93       	push	r29
    132a:	cf 93       	push	r28
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
	sec++;
    1330:	80 91 87 00 	lds	r24, 0x0087
    1334:	8f 5f       	subi	r24, 0xFF	; 255
    1336:	80 93 87 00 	sts	0x0087, r24
}
    133a:	cf 91       	pop	r28
    133c:	df 91       	pop	r29
    133e:	08 95       	ret

00001340 <Timer1_delay>:

void Timer1_delay(uint8 delay){
    1340:	df 93       	push	r29
    1342:	cf 93       	push	r28
    1344:	0f 92       	push	r0
    1346:	cd b7       	in	r28, 0x3d	; 61
    1348:	de b7       	in	r29, 0x3e	; 62
    134a:	89 83       	std	Y+1, r24	; 0x01
	Timer1_init(&Timer1_ConfigStruct);
    134c:	88 e6       	ldi	r24, 0x68	; 104
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	0e 94 de 13 	call	0x27bc	; 0x27bc <Timer1_init>
	Timer1_setCallBack(Timer1_ISR);
    1354:	84 e9       	ldi	r24, 0x94	; 148
    1356:	99 e0       	ldi	r25, 0x09	; 9
    1358:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <Timer1_setCallBack>
	while(sec != delay);
    135c:	90 91 87 00 	lds	r25, 0x0087
    1360:	89 81       	ldd	r24, Y+1	; 0x01
    1362:	98 17       	cp	r25, r24
    1364:	d9 f7       	brne	.-10     	; 0x135c <Timer1_delay+0x1c>
	Timer1_deInit();
    1366:	0e 94 43 14 	call	0x2886	; 0x2886 <Timer1_deInit>
	sec=0;
    136a:	10 92 87 00 	sts	0x0087, r1
}
    136e:	0f 90       	pop	r0
    1370:	cf 91       	pop	r28
    1372:	df 91       	pop	r29
    1374:	08 95       	ret

00001376 <Buzzer_init>:
#include"gpio.h"



void Buzzer_init(void)
{
    1376:	df 93       	push	r29
    1378:	cf 93       	push	r28
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(buzzer_Port,buzzer_pin,buzzerDir);
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	67 e0       	ldi	r22, 0x07	; 7
    1382:	41 e0       	ldi	r20, 0x01	; 1
    1384:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <GPIO_setupPinDirection>
	GPIO_writePin(buzzer_Port,buzzer_pin,buzzerOff);
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	67 e0       	ldi	r22, 0x07	; 7
    138c:	40 e0       	ldi	r20, 0x00	; 0
    138e:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <GPIO_writePin>
}
    1392:	cf 91       	pop	r28
    1394:	df 91       	pop	r29
    1396:	08 95       	ret

00001398 <Buzzer_on>:

void Buzzer_on(void)
{
    1398:	df 93       	push	r29
    139a:	cf 93       	push	r28
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(buzzer_Port,buzzer_pin,buzzerOn);
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	67 e0       	ldi	r22, 0x07	; 7
    13a4:	41 e0       	ldi	r20, 0x01	; 1
    13a6:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <GPIO_writePin>
}
    13aa:	cf 91       	pop	r28
    13ac:	df 91       	pop	r29
    13ae:	08 95       	ret

000013b0 <Buzzer_off>:

void Buzzer_off(void)
{
    13b0:	df 93       	push	r29
    13b2:	cf 93       	push	r28
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(buzzer_Port,buzzer_pin,buzzerOff);
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	67 e0       	ldi	r22, 0x07	; 7
    13bc:	40 e0       	ldi	r20, 0x00	; 0
    13be:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <GPIO_writePin>
}
    13c2:	cf 91       	pop	r28
    13c4:	df 91       	pop	r29
    13c6:	08 95       	ret

000013c8 <DcMotor_Init>:
#include "gpio.h"
#include "dc_motor.h"


void DcMotor_Init(void)
{
    13c8:	df 93       	push	r29
    13ca:	cf 93       	push	r28
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(motor_PORT_ID, motor_CW_PIN, PIN_OUTPUT);
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	60 e0       	ldi	r22, 0x00	; 0
    13d4:	41 e0       	ldi	r20, 0x01	; 1
    13d6:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(motor_PORT_ID, motor_A_CW_PIN, PIN_OUTPUT);
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	61 e0       	ldi	r22, 0x01	; 1
    13de:	41 e0       	ldi	r20, 0x01	; 1
    13e0:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <GPIO_setupPinDirection>

	GPIO_writePin(motor_PORT_ID,motor_CW_PIN,LOGIC_LOW);
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	60 e0       	ldi	r22, 0x00	; 0
    13e8:	40 e0       	ldi	r20, 0x00	; 0
    13ea:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <GPIO_writePin>
	GPIO_writePin(motor_PORT_ID,motor_A_CW_PIN,LOGIC_LOW);
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	61 e0       	ldi	r22, 0x01	; 1
    13f2:	40 e0       	ldi	r20, 0x00	; 0
    13f4:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <GPIO_writePin>
}
    13f8:	cf 91       	pop	r28
    13fa:	df 91       	pop	r29
    13fc:	08 95       	ret

000013fe <DcMotor_Rotate>:


void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
    13fe:	df 93       	push	r29
    1400:	cf 93       	push	r28
    1402:	00 d0       	rcall	.+0      	; 0x1404 <DcMotor_Rotate+0x6>
    1404:	00 d0       	rcall	.+0      	; 0x1406 <DcMotor_Rotate+0x8>
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
    140a:	89 83       	std	Y+1, r24	; 0x01
    140c:	6a 83       	std	Y+2, r22	; 0x02

	switch(state){
    140e:	89 81       	ldd	r24, Y+1	; 0x01
    1410:	28 2f       	mov	r18, r24
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	3c 83       	std	Y+4, r19	; 0x04
    1416:	2b 83       	std	Y+3, r18	; 0x03
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	9c 81       	ldd	r25, Y+4	; 0x04
    141c:	81 30       	cpi	r24, 0x01	; 1
    141e:	91 05       	cpc	r25, r1
    1420:	29 f1       	breq	.+74     	; 0x146c <DcMotor_Rotate+0x6e>
    1422:	2b 81       	ldd	r18, Y+3	; 0x03
    1424:	3c 81       	ldd	r19, Y+4	; 0x04
    1426:	22 30       	cpi	r18, 0x02	; 2
    1428:	31 05       	cpc	r19, r1
    142a:	91 f0       	breq	.+36     	; 0x1450 <DcMotor_Rotate+0x52>
    142c:	8b 81       	ldd	r24, Y+3	; 0x03
    142e:	9c 81       	ldd	r25, Y+4	; 0x04
    1430:	00 97       	sbiw	r24, 0x00	; 0
    1432:	49 f5       	brne	.+82     	; 0x1486 <DcMotor_Rotate+0x88>

	case stop:
		GPIO_writePin(motor_PORT_ID,motor_CW_PIN,LOGIC_LOW);
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	60 e0       	ldi	r22, 0x00	; 0
    1438:	40 e0       	ldi	r20, 0x00	; 0
    143a:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <GPIO_writePin>
		GPIO_writePin(motor_PORT_ID,motor_A_CW_PIN,LOGIC_LOW);
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	61 e0       	ldi	r22, 0x01	; 1
    1442:	40 e0       	ldi	r20, 0x00	; 0
    1444:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <GPIO_writePin>
		PWM_Timer0_Start(speed);
    1448:	8a 81       	ldd	r24, Y+2	; 0x02
    144a:	0e 94 54 13 	call	0x26a8	; 0x26a8 <PWM_Timer0_Start>
    144e:	1b c0       	rjmp	.+54     	; 0x1486 <DcMotor_Rotate+0x88>
		break;

	case A_CW:
		GPIO_writePin(motor_PORT_ID,motor_CW_PIN,LOGIC_LOW);
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	60 e0       	ldi	r22, 0x00	; 0
    1454:	40 e0       	ldi	r20, 0x00	; 0
    1456:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <GPIO_writePin>
		GPIO_writePin(motor_PORT_ID,motor_A_CW_PIN,LOGIC_HIGH);
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	61 e0       	ldi	r22, 0x01	; 1
    145e:	41 e0       	ldi	r20, 0x01	; 1
    1460:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <GPIO_writePin>
		PWM_Timer0_Start(speed);
    1464:	8a 81       	ldd	r24, Y+2	; 0x02
    1466:	0e 94 54 13 	call	0x26a8	; 0x26a8 <PWM_Timer0_Start>
    146a:	0d c0       	rjmp	.+26     	; 0x1486 <DcMotor_Rotate+0x88>
		break;
	case CW:
		GPIO_writePin(motor_PORT_ID,motor_CW_PIN,LOGIC_HIGH);
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	60 e0       	ldi	r22, 0x00	; 0
    1470:	41 e0       	ldi	r20, 0x01	; 1
    1472:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <GPIO_writePin>
		GPIO_writePin(motor_PORT_ID,motor_A_CW_PIN,LOGIC_LOW);
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	61 e0       	ldi	r22, 0x01	; 1
    147a:	40 e0       	ldi	r20, 0x00	; 0
    147c:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <GPIO_writePin>
		PWM_Timer0_Start(speed);
    1480:	8a 81       	ldd	r24, Y+2	; 0x02
    1482:	0e 94 54 13 	call	0x26a8	; 0x26a8 <PWM_Timer0_Start>
	}

}
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	cf 91       	pop	r28
    1490:	df 91       	pop	r29
    1492:	08 95       	ret

00001494 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1494:	df 93       	push	r29
    1496:	cf 93       	push	r28
    1498:	00 d0       	rcall	.+0      	; 0x149a <EEPROM_writeByte+0x6>
    149a:	00 d0       	rcall	.+0      	; 0x149c <EEPROM_writeByte+0x8>
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
    14a0:	9a 83       	std	Y+2, r25	; 0x02
    14a2:	89 83       	std	Y+1, r24	; 0x01
    14a4:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    14a6:	0e 94 9d 14 	call	0x293a	; 0x293a <TWI_start>
    if (TWI_getStatus() != TWI_START)
    14aa:	0e 94 f5 14 	call	0x29ea	; 0x29ea <TWI_getStatus>
    14ae:	88 30       	cpi	r24, 0x08	; 8
    14b0:	11 f0       	breq	.+4      	; 0x14b6 <EEPROM_writeByte+0x22>
        return ERROR;
    14b2:	1c 82       	std	Y+4, r1	; 0x04
    14b4:	28 c0       	rjmp	.+80     	; 0x1506 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
    14b8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ba:	80 70       	andi	r24, 0x00	; 0
    14bc:	97 70       	andi	r25, 0x07	; 7
    14be:	88 0f       	add	r24, r24
    14c0:	89 2f       	mov	r24, r25
    14c2:	88 1f       	adc	r24, r24
    14c4:	99 0b       	sbc	r25, r25
    14c6:	91 95       	neg	r25
    14c8:	80 6a       	ori	r24, 0xA0	; 160
    14ca:	0e 94 b8 14 	call	0x2970	; 0x2970 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    14ce:	0e 94 f5 14 	call	0x29ea	; 0x29ea <TWI_getStatus>
    14d2:	88 31       	cpi	r24, 0x18	; 24
    14d4:	11 f0       	breq	.+4      	; 0x14da <EEPROM_writeByte+0x46>
        return ERROR; 
    14d6:	1c 82       	std	Y+4, r1	; 0x04
    14d8:	16 c0       	rjmp	.+44     	; 0x1506 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    14da:	89 81       	ldd	r24, Y+1	; 0x01
    14dc:	0e 94 b8 14 	call	0x2970	; 0x2970 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    14e0:	0e 94 f5 14 	call	0x29ea	; 0x29ea <TWI_getStatus>
    14e4:	88 32       	cpi	r24, 0x28	; 40
    14e6:	11 f0       	breq	.+4      	; 0x14ec <EEPROM_writeByte+0x58>
        return ERROR;
    14e8:	1c 82       	std	Y+4, r1	; 0x04
    14ea:	0d c0       	rjmp	.+26     	; 0x1506 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    14ec:	8b 81       	ldd	r24, Y+3	; 0x03
    14ee:	0e 94 b8 14 	call	0x2970	; 0x2970 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    14f2:	0e 94 f5 14 	call	0x29ea	; 0x29ea <TWI_getStatus>
    14f6:	88 32       	cpi	r24, 0x28	; 40
    14f8:	11 f0       	breq	.+4      	; 0x14fe <EEPROM_writeByte+0x6a>
        return ERROR;
    14fa:	1c 82       	std	Y+4, r1	; 0x04
    14fc:	04 c0       	rjmp	.+8      	; 0x1506 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    14fe:	0e 94 ad 14 	call	0x295a	; 0x295a <TWI_stop>
	
    return SUCCESS;
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	8c 83       	std	Y+4, r24	; 0x04
    1506:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1508:	0f 90       	pop	r0
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	cf 91       	pop	r28
    1512:	df 91       	pop	r29
    1514:	08 95       	ret

00001516 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1516:	df 93       	push	r29
    1518:	cf 93       	push	r28
    151a:	00 d0       	rcall	.+0      	; 0x151c <EEPROM_readByte+0x6>
    151c:	00 d0       	rcall	.+0      	; 0x151e <EEPROM_readByte+0x8>
    151e:	0f 92       	push	r0
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
    1524:	9a 83       	std	Y+2, r25	; 0x02
    1526:	89 83       	std	Y+1, r24	; 0x01
    1528:	7c 83       	std	Y+4, r23	; 0x04
    152a:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    152c:	0e 94 9d 14 	call	0x293a	; 0x293a <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1530:	0e 94 f5 14 	call	0x29ea	; 0x29ea <TWI_getStatus>
    1534:	88 30       	cpi	r24, 0x08	; 8
    1536:	11 f0       	breq	.+4      	; 0x153c <EEPROM_readByte+0x26>
        return ERROR;
    1538:	1d 82       	std	Y+5, r1	; 0x05
    153a:	44 c0       	rjmp	.+136    	; 0x15c4 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    153c:	89 81       	ldd	r24, Y+1	; 0x01
    153e:	9a 81       	ldd	r25, Y+2	; 0x02
    1540:	80 70       	andi	r24, 0x00	; 0
    1542:	97 70       	andi	r25, 0x07	; 7
    1544:	88 0f       	add	r24, r24
    1546:	89 2f       	mov	r24, r25
    1548:	88 1f       	adc	r24, r24
    154a:	99 0b       	sbc	r25, r25
    154c:	91 95       	neg	r25
    154e:	80 6a       	ori	r24, 0xA0	; 160
    1550:	0e 94 b8 14 	call	0x2970	; 0x2970 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1554:	0e 94 f5 14 	call	0x29ea	; 0x29ea <TWI_getStatus>
    1558:	88 31       	cpi	r24, 0x18	; 24
    155a:	11 f0       	breq	.+4      	; 0x1560 <EEPROM_readByte+0x4a>
        return ERROR;
    155c:	1d 82       	std	Y+5, r1	; 0x05
    155e:	32 c0       	rjmp	.+100    	; 0x15c4 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1560:	89 81       	ldd	r24, Y+1	; 0x01
    1562:	0e 94 b8 14 	call	0x2970	; 0x2970 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1566:	0e 94 f5 14 	call	0x29ea	; 0x29ea <TWI_getStatus>
    156a:	88 32       	cpi	r24, 0x28	; 40
    156c:	11 f0       	breq	.+4      	; 0x1572 <EEPROM_readByte+0x5c>
        return ERROR;
    156e:	1d 82       	std	Y+5, r1	; 0x05
    1570:	29 c0       	rjmp	.+82     	; 0x15c4 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1572:	0e 94 9d 14 	call	0x293a	; 0x293a <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1576:	0e 94 f5 14 	call	0x29ea	; 0x29ea <TWI_getStatus>
    157a:	80 31       	cpi	r24, 0x10	; 16
    157c:	11 f0       	breq	.+4      	; 0x1582 <EEPROM_readByte+0x6c>
        return ERROR;
    157e:	1d 82       	std	Y+5, r1	; 0x05
    1580:	21 c0       	rjmp	.+66     	; 0x15c4 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1582:	89 81       	ldd	r24, Y+1	; 0x01
    1584:	9a 81       	ldd	r25, Y+2	; 0x02
    1586:	80 70       	andi	r24, 0x00	; 0
    1588:	97 70       	andi	r25, 0x07	; 7
    158a:	88 0f       	add	r24, r24
    158c:	89 2f       	mov	r24, r25
    158e:	88 1f       	adc	r24, r24
    1590:	99 0b       	sbc	r25, r25
    1592:	91 95       	neg	r25
    1594:	81 6a       	ori	r24, 0xA1	; 161
    1596:	0e 94 b8 14 	call	0x2970	; 0x2970 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    159a:	0e 94 f5 14 	call	0x29ea	; 0x29ea <TWI_getStatus>
    159e:	80 34       	cpi	r24, 0x40	; 64
    15a0:	11 f0       	breq	.+4      	; 0x15a6 <EEPROM_readByte+0x90>
        return ERROR;
    15a2:	1d 82       	std	Y+5, r1	; 0x05
    15a4:	0f c0       	rjmp	.+30     	; 0x15c4 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    15a6:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <TWI_readByteWithNACK>
    15aa:	eb 81       	ldd	r30, Y+3	; 0x03
    15ac:	fc 81       	ldd	r31, Y+4	; 0x04
    15ae:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    15b0:	0e 94 f5 14 	call	0x29ea	; 0x29ea <TWI_getStatus>
    15b4:	88 35       	cpi	r24, 0x58	; 88
    15b6:	11 f0       	breq	.+4      	; 0x15bc <EEPROM_readByte+0xa6>
        return ERROR;
    15b8:	1d 82       	std	Y+5, r1	; 0x05
    15ba:	04 c0       	rjmp	.+8      	; 0x15c4 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    15bc:	0e 94 ad 14 	call	0x295a	; 0x295a <TWI_stop>

    return SUCCESS;
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	8d 83       	std	Y+5, r24	; 0x05
    15c4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    15c6:	0f 90       	pop	r0
    15c8:	0f 90       	pop	r0
    15ca:	0f 90       	pop	r0
    15cc:	0f 90       	pop	r0
    15ce:	0f 90       	pop	r0
    15d0:	cf 91       	pop	r28
    15d2:	df 91       	pop	r29
    15d4:	08 95       	ret

000015d6 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    15d6:	df 93       	push	r29
    15d8:	cf 93       	push	r28
    15da:	00 d0       	rcall	.+0      	; 0x15dc <GPIO_setupPinDirection+0x6>
    15dc:	00 d0       	rcall	.+0      	; 0x15de <GPIO_setupPinDirection+0x8>
    15de:	0f 92       	push	r0
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
    15e4:	89 83       	std	Y+1, r24	; 0x01
    15e6:	6a 83       	std	Y+2, r22	; 0x02
    15e8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    15ea:	8a 81       	ldd	r24, Y+2	; 0x02
    15ec:	88 30       	cpi	r24, 0x08	; 8
    15ee:	08 f0       	brcs	.+2      	; 0x15f2 <GPIO_setupPinDirection+0x1c>
    15f0:	d5 c0       	rjmp	.+426    	; 0x179c <GPIO_setupPinDirection+0x1c6>
    15f2:	89 81       	ldd	r24, Y+1	; 0x01
    15f4:	84 30       	cpi	r24, 0x04	; 4
    15f6:	08 f0       	brcs	.+2      	; 0x15fa <GPIO_setupPinDirection+0x24>
    15f8:	d1 c0       	rjmp	.+418    	; 0x179c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    15fa:	89 81       	ldd	r24, Y+1	; 0x01
    15fc:	28 2f       	mov	r18, r24
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	3d 83       	std	Y+5, r19	; 0x05
    1602:	2c 83       	std	Y+4, r18	; 0x04
    1604:	8c 81       	ldd	r24, Y+4	; 0x04
    1606:	9d 81       	ldd	r25, Y+5	; 0x05
    1608:	81 30       	cpi	r24, 0x01	; 1
    160a:	91 05       	cpc	r25, r1
    160c:	09 f4       	brne	.+2      	; 0x1610 <GPIO_setupPinDirection+0x3a>
    160e:	43 c0       	rjmp	.+134    	; 0x1696 <GPIO_setupPinDirection+0xc0>
    1610:	2c 81       	ldd	r18, Y+4	; 0x04
    1612:	3d 81       	ldd	r19, Y+5	; 0x05
    1614:	22 30       	cpi	r18, 0x02	; 2
    1616:	31 05       	cpc	r19, r1
    1618:	2c f4       	brge	.+10     	; 0x1624 <GPIO_setupPinDirection+0x4e>
    161a:	8c 81       	ldd	r24, Y+4	; 0x04
    161c:	9d 81       	ldd	r25, Y+5	; 0x05
    161e:	00 97       	sbiw	r24, 0x00	; 0
    1620:	71 f0       	breq	.+28     	; 0x163e <GPIO_setupPinDirection+0x68>
    1622:	bc c0       	rjmp	.+376    	; 0x179c <GPIO_setupPinDirection+0x1c6>
    1624:	2c 81       	ldd	r18, Y+4	; 0x04
    1626:	3d 81       	ldd	r19, Y+5	; 0x05
    1628:	22 30       	cpi	r18, 0x02	; 2
    162a:	31 05       	cpc	r19, r1
    162c:	09 f4       	brne	.+2      	; 0x1630 <GPIO_setupPinDirection+0x5a>
    162e:	5f c0       	rjmp	.+190    	; 0x16ee <GPIO_setupPinDirection+0x118>
    1630:	8c 81       	ldd	r24, Y+4	; 0x04
    1632:	9d 81       	ldd	r25, Y+5	; 0x05
    1634:	83 30       	cpi	r24, 0x03	; 3
    1636:	91 05       	cpc	r25, r1
    1638:	09 f4       	brne	.+2      	; 0x163c <GPIO_setupPinDirection+0x66>
    163a:	85 c0       	rjmp	.+266    	; 0x1746 <GPIO_setupPinDirection+0x170>
    163c:	af c0       	rjmp	.+350    	; 0x179c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    163e:	8b 81       	ldd	r24, Y+3	; 0x03
    1640:	81 30       	cpi	r24, 0x01	; 1
    1642:	a1 f4       	brne	.+40     	; 0x166c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1644:	aa e3       	ldi	r26, 0x3A	; 58
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	ea e3       	ldi	r30, 0x3A	; 58
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	48 2f       	mov	r20, r24
    1650:	8a 81       	ldd	r24, Y+2	; 0x02
    1652:	28 2f       	mov	r18, r24
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	02 2e       	mov	r0, r18
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <GPIO_setupPinDirection+0x8c>
    165e:	88 0f       	add	r24, r24
    1660:	99 1f       	adc	r25, r25
    1662:	0a 94       	dec	r0
    1664:	e2 f7       	brpl	.-8      	; 0x165e <GPIO_setupPinDirection+0x88>
    1666:	84 2b       	or	r24, r20
    1668:	8c 93       	st	X, r24
    166a:	98 c0       	rjmp	.+304    	; 0x179c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    166c:	aa e3       	ldi	r26, 0x3A	; 58
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	ea e3       	ldi	r30, 0x3A	; 58
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	48 2f       	mov	r20, r24
    1678:	8a 81       	ldd	r24, Y+2	; 0x02
    167a:	28 2f       	mov	r18, r24
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	02 2e       	mov	r0, r18
    1684:	02 c0       	rjmp	.+4      	; 0x168a <GPIO_setupPinDirection+0xb4>
    1686:	88 0f       	add	r24, r24
    1688:	99 1f       	adc	r25, r25
    168a:	0a 94       	dec	r0
    168c:	e2 f7       	brpl	.-8      	; 0x1686 <GPIO_setupPinDirection+0xb0>
    168e:	80 95       	com	r24
    1690:	84 23       	and	r24, r20
    1692:	8c 93       	st	X, r24
    1694:	83 c0       	rjmp	.+262    	; 0x179c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1696:	8b 81       	ldd	r24, Y+3	; 0x03
    1698:	81 30       	cpi	r24, 0x01	; 1
    169a:	a1 f4       	brne	.+40     	; 0x16c4 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    169c:	a7 e3       	ldi	r26, 0x37	; 55
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	e7 e3       	ldi	r30, 0x37	; 55
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	48 2f       	mov	r20, r24
    16a8:	8a 81       	ldd	r24, Y+2	; 0x02
    16aa:	28 2f       	mov	r18, r24
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	02 2e       	mov	r0, r18
    16b4:	02 c0       	rjmp	.+4      	; 0x16ba <GPIO_setupPinDirection+0xe4>
    16b6:	88 0f       	add	r24, r24
    16b8:	99 1f       	adc	r25, r25
    16ba:	0a 94       	dec	r0
    16bc:	e2 f7       	brpl	.-8      	; 0x16b6 <GPIO_setupPinDirection+0xe0>
    16be:	84 2b       	or	r24, r20
    16c0:	8c 93       	st	X, r24
    16c2:	6c c0       	rjmp	.+216    	; 0x179c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    16c4:	a7 e3       	ldi	r26, 0x37	; 55
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	e7 e3       	ldi	r30, 0x37	; 55
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	48 2f       	mov	r20, r24
    16d0:	8a 81       	ldd	r24, Y+2	; 0x02
    16d2:	28 2f       	mov	r18, r24
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	02 2e       	mov	r0, r18
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <GPIO_setupPinDirection+0x10c>
    16de:	88 0f       	add	r24, r24
    16e0:	99 1f       	adc	r25, r25
    16e2:	0a 94       	dec	r0
    16e4:	e2 f7       	brpl	.-8      	; 0x16de <GPIO_setupPinDirection+0x108>
    16e6:	80 95       	com	r24
    16e8:	84 23       	and	r24, r20
    16ea:	8c 93       	st	X, r24
    16ec:	57 c0       	rjmp	.+174    	; 0x179c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    16ee:	8b 81       	ldd	r24, Y+3	; 0x03
    16f0:	81 30       	cpi	r24, 0x01	; 1
    16f2:	a1 f4       	brne	.+40     	; 0x171c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    16f4:	a4 e3       	ldi	r26, 0x34	; 52
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	e4 e3       	ldi	r30, 0x34	; 52
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	48 2f       	mov	r20, r24
    1700:	8a 81       	ldd	r24, Y+2	; 0x02
    1702:	28 2f       	mov	r18, r24
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	02 2e       	mov	r0, r18
    170c:	02 c0       	rjmp	.+4      	; 0x1712 <GPIO_setupPinDirection+0x13c>
    170e:	88 0f       	add	r24, r24
    1710:	99 1f       	adc	r25, r25
    1712:	0a 94       	dec	r0
    1714:	e2 f7       	brpl	.-8      	; 0x170e <GPIO_setupPinDirection+0x138>
    1716:	84 2b       	or	r24, r20
    1718:	8c 93       	st	X, r24
    171a:	40 c0       	rjmp	.+128    	; 0x179c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    171c:	a4 e3       	ldi	r26, 0x34	; 52
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	e4 e3       	ldi	r30, 0x34	; 52
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	48 2f       	mov	r20, r24
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	28 2f       	mov	r18, r24
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	02 2e       	mov	r0, r18
    1734:	02 c0       	rjmp	.+4      	; 0x173a <GPIO_setupPinDirection+0x164>
    1736:	88 0f       	add	r24, r24
    1738:	99 1f       	adc	r25, r25
    173a:	0a 94       	dec	r0
    173c:	e2 f7       	brpl	.-8      	; 0x1736 <GPIO_setupPinDirection+0x160>
    173e:	80 95       	com	r24
    1740:	84 23       	and	r24, r20
    1742:	8c 93       	st	X, r24
    1744:	2b c0       	rjmp	.+86     	; 0x179c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1746:	8b 81       	ldd	r24, Y+3	; 0x03
    1748:	81 30       	cpi	r24, 0x01	; 1
    174a:	a1 f4       	brne	.+40     	; 0x1774 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    174c:	a1 e3       	ldi	r26, 0x31	; 49
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	e1 e3       	ldi	r30, 0x31	; 49
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	48 2f       	mov	r20, r24
    1758:	8a 81       	ldd	r24, Y+2	; 0x02
    175a:	28 2f       	mov	r18, r24
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	02 2e       	mov	r0, r18
    1764:	02 c0       	rjmp	.+4      	; 0x176a <GPIO_setupPinDirection+0x194>
    1766:	88 0f       	add	r24, r24
    1768:	99 1f       	adc	r25, r25
    176a:	0a 94       	dec	r0
    176c:	e2 f7       	brpl	.-8      	; 0x1766 <GPIO_setupPinDirection+0x190>
    176e:	84 2b       	or	r24, r20
    1770:	8c 93       	st	X, r24
    1772:	14 c0       	rjmp	.+40     	; 0x179c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1774:	a1 e3       	ldi	r26, 0x31	; 49
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	e1 e3       	ldi	r30, 0x31	; 49
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	48 2f       	mov	r20, r24
    1780:	8a 81       	ldd	r24, Y+2	; 0x02
    1782:	28 2f       	mov	r18, r24
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	02 2e       	mov	r0, r18
    178c:	02 c0       	rjmp	.+4      	; 0x1792 <GPIO_setupPinDirection+0x1bc>
    178e:	88 0f       	add	r24, r24
    1790:	99 1f       	adc	r25, r25
    1792:	0a 94       	dec	r0
    1794:	e2 f7       	brpl	.-8      	; 0x178e <GPIO_setupPinDirection+0x1b8>
    1796:	80 95       	com	r24
    1798:	84 23       	and	r24, r20
    179a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    179c:	0f 90       	pop	r0
    179e:	0f 90       	pop	r0
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	cf 91       	pop	r28
    17a8:	df 91       	pop	r29
    17aa:	08 95       	ret

000017ac <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    17ac:	df 93       	push	r29
    17ae:	cf 93       	push	r28
    17b0:	00 d0       	rcall	.+0      	; 0x17b2 <GPIO_writePin+0x6>
    17b2:	00 d0       	rcall	.+0      	; 0x17b4 <GPIO_writePin+0x8>
    17b4:	0f 92       	push	r0
    17b6:	cd b7       	in	r28, 0x3d	; 61
    17b8:	de b7       	in	r29, 0x3e	; 62
    17ba:	89 83       	std	Y+1, r24	; 0x01
    17bc:	6a 83       	std	Y+2, r22	; 0x02
    17be:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    17c0:	8a 81       	ldd	r24, Y+2	; 0x02
    17c2:	88 30       	cpi	r24, 0x08	; 8
    17c4:	08 f0       	brcs	.+2      	; 0x17c8 <GPIO_writePin+0x1c>
    17c6:	d5 c0       	rjmp	.+426    	; 0x1972 <GPIO_writePin+0x1c6>
    17c8:	89 81       	ldd	r24, Y+1	; 0x01
    17ca:	84 30       	cpi	r24, 0x04	; 4
    17cc:	08 f0       	brcs	.+2      	; 0x17d0 <GPIO_writePin+0x24>
    17ce:	d1 c0       	rjmp	.+418    	; 0x1972 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    17d0:	89 81       	ldd	r24, Y+1	; 0x01
    17d2:	28 2f       	mov	r18, r24
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	3d 83       	std	Y+5, r19	; 0x05
    17d8:	2c 83       	std	Y+4, r18	; 0x04
    17da:	8c 81       	ldd	r24, Y+4	; 0x04
    17dc:	9d 81       	ldd	r25, Y+5	; 0x05
    17de:	81 30       	cpi	r24, 0x01	; 1
    17e0:	91 05       	cpc	r25, r1
    17e2:	09 f4       	brne	.+2      	; 0x17e6 <GPIO_writePin+0x3a>
    17e4:	43 c0       	rjmp	.+134    	; 0x186c <GPIO_writePin+0xc0>
    17e6:	2c 81       	ldd	r18, Y+4	; 0x04
    17e8:	3d 81       	ldd	r19, Y+5	; 0x05
    17ea:	22 30       	cpi	r18, 0x02	; 2
    17ec:	31 05       	cpc	r19, r1
    17ee:	2c f4       	brge	.+10     	; 0x17fa <GPIO_writePin+0x4e>
    17f0:	8c 81       	ldd	r24, Y+4	; 0x04
    17f2:	9d 81       	ldd	r25, Y+5	; 0x05
    17f4:	00 97       	sbiw	r24, 0x00	; 0
    17f6:	71 f0       	breq	.+28     	; 0x1814 <GPIO_writePin+0x68>
    17f8:	bc c0       	rjmp	.+376    	; 0x1972 <GPIO_writePin+0x1c6>
    17fa:	2c 81       	ldd	r18, Y+4	; 0x04
    17fc:	3d 81       	ldd	r19, Y+5	; 0x05
    17fe:	22 30       	cpi	r18, 0x02	; 2
    1800:	31 05       	cpc	r19, r1
    1802:	09 f4       	brne	.+2      	; 0x1806 <GPIO_writePin+0x5a>
    1804:	5f c0       	rjmp	.+190    	; 0x18c4 <GPIO_writePin+0x118>
    1806:	8c 81       	ldd	r24, Y+4	; 0x04
    1808:	9d 81       	ldd	r25, Y+5	; 0x05
    180a:	83 30       	cpi	r24, 0x03	; 3
    180c:	91 05       	cpc	r25, r1
    180e:	09 f4       	brne	.+2      	; 0x1812 <GPIO_writePin+0x66>
    1810:	85 c0       	rjmp	.+266    	; 0x191c <GPIO_writePin+0x170>
    1812:	af c0       	rjmp	.+350    	; 0x1972 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1814:	8b 81       	ldd	r24, Y+3	; 0x03
    1816:	81 30       	cpi	r24, 0x01	; 1
    1818:	a1 f4       	brne	.+40     	; 0x1842 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    181a:	ab e3       	ldi	r26, 0x3B	; 59
    181c:	b0 e0       	ldi	r27, 0x00	; 0
    181e:	eb e3       	ldi	r30, 0x3B	; 59
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	80 81       	ld	r24, Z
    1824:	48 2f       	mov	r20, r24
    1826:	8a 81       	ldd	r24, Y+2	; 0x02
    1828:	28 2f       	mov	r18, r24
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	02 2e       	mov	r0, r18
    1832:	02 c0       	rjmp	.+4      	; 0x1838 <GPIO_writePin+0x8c>
    1834:	88 0f       	add	r24, r24
    1836:	99 1f       	adc	r25, r25
    1838:	0a 94       	dec	r0
    183a:	e2 f7       	brpl	.-8      	; 0x1834 <GPIO_writePin+0x88>
    183c:	84 2b       	or	r24, r20
    183e:	8c 93       	st	X, r24
    1840:	98 c0       	rjmp	.+304    	; 0x1972 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1842:	ab e3       	ldi	r26, 0x3B	; 59
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	eb e3       	ldi	r30, 0x3B	; 59
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	48 2f       	mov	r20, r24
    184e:	8a 81       	ldd	r24, Y+2	; 0x02
    1850:	28 2f       	mov	r18, r24
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	02 2e       	mov	r0, r18
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <GPIO_writePin+0xb4>
    185c:	88 0f       	add	r24, r24
    185e:	99 1f       	adc	r25, r25
    1860:	0a 94       	dec	r0
    1862:	e2 f7       	brpl	.-8      	; 0x185c <GPIO_writePin+0xb0>
    1864:	80 95       	com	r24
    1866:	84 23       	and	r24, r20
    1868:	8c 93       	st	X, r24
    186a:	83 c0       	rjmp	.+262    	; 0x1972 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    186c:	8b 81       	ldd	r24, Y+3	; 0x03
    186e:	81 30       	cpi	r24, 0x01	; 1
    1870:	a1 f4       	brne	.+40     	; 0x189a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1872:	a8 e3       	ldi	r26, 0x38	; 56
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	e8 e3       	ldi	r30, 0x38	; 56
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	48 2f       	mov	r20, r24
    187e:	8a 81       	ldd	r24, Y+2	; 0x02
    1880:	28 2f       	mov	r18, r24
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	02 2e       	mov	r0, r18
    188a:	02 c0       	rjmp	.+4      	; 0x1890 <GPIO_writePin+0xe4>
    188c:	88 0f       	add	r24, r24
    188e:	99 1f       	adc	r25, r25
    1890:	0a 94       	dec	r0
    1892:	e2 f7       	brpl	.-8      	; 0x188c <GPIO_writePin+0xe0>
    1894:	84 2b       	or	r24, r20
    1896:	8c 93       	st	X, r24
    1898:	6c c0       	rjmp	.+216    	; 0x1972 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    189a:	a8 e3       	ldi	r26, 0x38	; 56
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	e8 e3       	ldi	r30, 0x38	; 56
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	48 2f       	mov	r20, r24
    18a6:	8a 81       	ldd	r24, Y+2	; 0x02
    18a8:	28 2f       	mov	r18, r24
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	02 2e       	mov	r0, r18
    18b2:	02 c0       	rjmp	.+4      	; 0x18b8 <GPIO_writePin+0x10c>
    18b4:	88 0f       	add	r24, r24
    18b6:	99 1f       	adc	r25, r25
    18b8:	0a 94       	dec	r0
    18ba:	e2 f7       	brpl	.-8      	; 0x18b4 <GPIO_writePin+0x108>
    18bc:	80 95       	com	r24
    18be:	84 23       	and	r24, r20
    18c0:	8c 93       	st	X, r24
    18c2:	57 c0       	rjmp	.+174    	; 0x1972 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    18c4:	8b 81       	ldd	r24, Y+3	; 0x03
    18c6:	81 30       	cpi	r24, 0x01	; 1
    18c8:	a1 f4       	brne	.+40     	; 0x18f2 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    18ca:	a5 e3       	ldi	r26, 0x35	; 53
    18cc:	b0 e0       	ldi	r27, 0x00	; 0
    18ce:	e5 e3       	ldi	r30, 0x35	; 53
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	48 2f       	mov	r20, r24
    18d6:	8a 81       	ldd	r24, Y+2	; 0x02
    18d8:	28 2f       	mov	r18, r24
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	02 2e       	mov	r0, r18
    18e2:	02 c0       	rjmp	.+4      	; 0x18e8 <GPIO_writePin+0x13c>
    18e4:	88 0f       	add	r24, r24
    18e6:	99 1f       	adc	r25, r25
    18e8:	0a 94       	dec	r0
    18ea:	e2 f7       	brpl	.-8      	; 0x18e4 <GPIO_writePin+0x138>
    18ec:	84 2b       	or	r24, r20
    18ee:	8c 93       	st	X, r24
    18f0:	40 c0       	rjmp	.+128    	; 0x1972 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    18f2:	a5 e3       	ldi	r26, 0x35	; 53
    18f4:	b0 e0       	ldi	r27, 0x00	; 0
    18f6:	e5 e3       	ldi	r30, 0x35	; 53
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	48 2f       	mov	r20, r24
    18fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1900:	28 2f       	mov	r18, r24
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	02 2e       	mov	r0, r18
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <GPIO_writePin+0x164>
    190c:	88 0f       	add	r24, r24
    190e:	99 1f       	adc	r25, r25
    1910:	0a 94       	dec	r0
    1912:	e2 f7       	brpl	.-8      	; 0x190c <GPIO_writePin+0x160>
    1914:	80 95       	com	r24
    1916:	84 23       	and	r24, r20
    1918:	8c 93       	st	X, r24
    191a:	2b c0       	rjmp	.+86     	; 0x1972 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    191c:	8b 81       	ldd	r24, Y+3	; 0x03
    191e:	81 30       	cpi	r24, 0x01	; 1
    1920:	a1 f4       	brne	.+40     	; 0x194a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1922:	a2 e3       	ldi	r26, 0x32	; 50
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	e2 e3       	ldi	r30, 0x32	; 50
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	48 2f       	mov	r20, r24
    192e:	8a 81       	ldd	r24, Y+2	; 0x02
    1930:	28 2f       	mov	r18, r24
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	02 2e       	mov	r0, r18
    193a:	02 c0       	rjmp	.+4      	; 0x1940 <GPIO_writePin+0x194>
    193c:	88 0f       	add	r24, r24
    193e:	99 1f       	adc	r25, r25
    1940:	0a 94       	dec	r0
    1942:	e2 f7       	brpl	.-8      	; 0x193c <GPIO_writePin+0x190>
    1944:	84 2b       	or	r24, r20
    1946:	8c 93       	st	X, r24
    1948:	14 c0       	rjmp	.+40     	; 0x1972 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    194a:	a2 e3       	ldi	r26, 0x32	; 50
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	e2 e3       	ldi	r30, 0x32	; 50
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	80 81       	ld	r24, Z
    1954:	48 2f       	mov	r20, r24
    1956:	8a 81       	ldd	r24, Y+2	; 0x02
    1958:	28 2f       	mov	r18, r24
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	02 2e       	mov	r0, r18
    1962:	02 c0       	rjmp	.+4      	; 0x1968 <GPIO_writePin+0x1bc>
    1964:	88 0f       	add	r24, r24
    1966:	99 1f       	adc	r25, r25
    1968:	0a 94       	dec	r0
    196a:	e2 f7       	brpl	.-8      	; 0x1964 <GPIO_writePin+0x1b8>
    196c:	80 95       	com	r24
    196e:	84 23       	and	r24, r20
    1970:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1972:	0f 90       	pop	r0
    1974:	0f 90       	pop	r0
    1976:	0f 90       	pop	r0
    1978:	0f 90       	pop	r0
    197a:	0f 90       	pop	r0
    197c:	cf 91       	pop	r28
    197e:	df 91       	pop	r29
    1980:	08 95       	ret

00001982 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1982:	df 93       	push	r29
    1984:	cf 93       	push	r28
    1986:	00 d0       	rcall	.+0      	; 0x1988 <GPIO_readPin+0x6>
    1988:	00 d0       	rcall	.+0      	; 0x198a <GPIO_readPin+0x8>
    198a:	0f 92       	push	r0
    198c:	cd b7       	in	r28, 0x3d	; 61
    198e:	de b7       	in	r29, 0x3e	; 62
    1990:	8a 83       	std	Y+2, r24	; 0x02
    1992:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1994:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1996:	8b 81       	ldd	r24, Y+3	; 0x03
    1998:	88 30       	cpi	r24, 0x08	; 8
    199a:	08 f0       	brcs	.+2      	; 0x199e <GPIO_readPin+0x1c>
    199c:	84 c0       	rjmp	.+264    	; 0x1aa6 <GPIO_readPin+0x124>
    199e:	8a 81       	ldd	r24, Y+2	; 0x02
    19a0:	84 30       	cpi	r24, 0x04	; 4
    19a2:	08 f0       	brcs	.+2      	; 0x19a6 <GPIO_readPin+0x24>
    19a4:	80 c0       	rjmp	.+256    	; 0x1aa6 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	28 2f       	mov	r18, r24
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	3d 83       	std	Y+5, r19	; 0x05
    19ae:	2c 83       	std	Y+4, r18	; 0x04
    19b0:	4c 81       	ldd	r20, Y+4	; 0x04
    19b2:	5d 81       	ldd	r21, Y+5	; 0x05
    19b4:	41 30       	cpi	r20, 0x01	; 1
    19b6:	51 05       	cpc	r21, r1
    19b8:	79 f1       	breq	.+94     	; 0x1a18 <GPIO_readPin+0x96>
    19ba:	8c 81       	ldd	r24, Y+4	; 0x04
    19bc:	9d 81       	ldd	r25, Y+5	; 0x05
    19be:	82 30       	cpi	r24, 0x02	; 2
    19c0:	91 05       	cpc	r25, r1
    19c2:	34 f4       	brge	.+12     	; 0x19d0 <GPIO_readPin+0x4e>
    19c4:	2c 81       	ldd	r18, Y+4	; 0x04
    19c6:	3d 81       	ldd	r19, Y+5	; 0x05
    19c8:	21 15       	cp	r18, r1
    19ca:	31 05       	cpc	r19, r1
    19cc:	69 f0       	breq	.+26     	; 0x19e8 <GPIO_readPin+0x66>
    19ce:	6b c0       	rjmp	.+214    	; 0x1aa6 <GPIO_readPin+0x124>
    19d0:	4c 81       	ldd	r20, Y+4	; 0x04
    19d2:	5d 81       	ldd	r21, Y+5	; 0x05
    19d4:	42 30       	cpi	r20, 0x02	; 2
    19d6:	51 05       	cpc	r21, r1
    19d8:	b9 f1       	breq	.+110    	; 0x1a48 <GPIO_readPin+0xc6>
    19da:	8c 81       	ldd	r24, Y+4	; 0x04
    19dc:	9d 81       	ldd	r25, Y+5	; 0x05
    19de:	83 30       	cpi	r24, 0x03	; 3
    19e0:	91 05       	cpc	r25, r1
    19e2:	09 f4       	brne	.+2      	; 0x19e6 <GPIO_readPin+0x64>
    19e4:	49 c0       	rjmp	.+146    	; 0x1a78 <GPIO_readPin+0xf6>
    19e6:	5f c0       	rjmp	.+190    	; 0x1aa6 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    19e8:	e9 e3       	ldi	r30, 0x39	; 57
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	28 2f       	mov	r18, r24
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	8b 81       	ldd	r24, Y+3	; 0x03
    19f4:	88 2f       	mov	r24, r24
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	a9 01       	movw	r20, r18
    19fa:	02 c0       	rjmp	.+4      	; 0x1a00 <GPIO_readPin+0x7e>
    19fc:	55 95       	asr	r21
    19fe:	47 95       	ror	r20
    1a00:	8a 95       	dec	r24
    1a02:	e2 f7       	brpl	.-8      	; 0x19fc <GPIO_readPin+0x7a>
    1a04:	ca 01       	movw	r24, r20
    1a06:	81 70       	andi	r24, 0x01	; 1
    1a08:	90 70       	andi	r25, 0x00	; 0
    1a0a:	88 23       	and	r24, r24
    1a0c:	19 f0       	breq	.+6      	; 0x1a14 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	89 83       	std	Y+1, r24	; 0x01
    1a12:	49 c0       	rjmp	.+146    	; 0x1aa6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a14:	19 82       	std	Y+1, r1	; 0x01
    1a16:	47 c0       	rjmp	.+142    	; 0x1aa6 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1a18:	e6 e3       	ldi	r30, 0x36	; 54
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	28 2f       	mov	r18, r24
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	8b 81       	ldd	r24, Y+3	; 0x03
    1a24:	88 2f       	mov	r24, r24
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	a9 01       	movw	r20, r18
    1a2a:	02 c0       	rjmp	.+4      	; 0x1a30 <GPIO_readPin+0xae>
    1a2c:	55 95       	asr	r21
    1a2e:	47 95       	ror	r20
    1a30:	8a 95       	dec	r24
    1a32:	e2 f7       	brpl	.-8      	; 0x1a2c <GPIO_readPin+0xaa>
    1a34:	ca 01       	movw	r24, r20
    1a36:	81 70       	andi	r24, 0x01	; 1
    1a38:	90 70       	andi	r25, 0x00	; 0
    1a3a:	88 23       	and	r24, r24
    1a3c:	19 f0       	breq	.+6      	; 0x1a44 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	89 83       	std	Y+1, r24	; 0x01
    1a42:	31 c0       	rjmp	.+98     	; 0x1aa6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a44:	19 82       	std	Y+1, r1	; 0x01
    1a46:	2f c0       	rjmp	.+94     	; 0x1aa6 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1a48:	e3 e3       	ldi	r30, 0x33	; 51
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	28 2f       	mov	r18, r24
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	8b 81       	ldd	r24, Y+3	; 0x03
    1a54:	88 2f       	mov	r24, r24
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	a9 01       	movw	r20, r18
    1a5a:	02 c0       	rjmp	.+4      	; 0x1a60 <GPIO_readPin+0xde>
    1a5c:	55 95       	asr	r21
    1a5e:	47 95       	ror	r20
    1a60:	8a 95       	dec	r24
    1a62:	e2 f7       	brpl	.-8      	; 0x1a5c <GPIO_readPin+0xda>
    1a64:	ca 01       	movw	r24, r20
    1a66:	81 70       	andi	r24, 0x01	; 1
    1a68:	90 70       	andi	r25, 0x00	; 0
    1a6a:	88 23       	and	r24, r24
    1a6c:	19 f0       	breq	.+6      	; 0x1a74 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	89 83       	std	Y+1, r24	; 0x01
    1a72:	19 c0       	rjmp	.+50     	; 0x1aa6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a74:	19 82       	std	Y+1, r1	; 0x01
    1a76:	17 c0       	rjmp	.+46     	; 0x1aa6 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1a78:	e0 e3       	ldi	r30, 0x30	; 48
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	80 81       	ld	r24, Z
    1a7e:	28 2f       	mov	r18, r24
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	8b 81       	ldd	r24, Y+3	; 0x03
    1a84:	88 2f       	mov	r24, r24
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	a9 01       	movw	r20, r18
    1a8a:	02 c0       	rjmp	.+4      	; 0x1a90 <GPIO_readPin+0x10e>
    1a8c:	55 95       	asr	r21
    1a8e:	47 95       	ror	r20
    1a90:	8a 95       	dec	r24
    1a92:	e2 f7       	brpl	.-8      	; 0x1a8c <GPIO_readPin+0x10a>
    1a94:	ca 01       	movw	r24, r20
    1a96:	81 70       	andi	r24, 0x01	; 1
    1a98:	90 70       	andi	r25, 0x00	; 0
    1a9a:	88 23       	and	r24, r24
    1a9c:	19 f0       	breq	.+6      	; 0x1aa4 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	89 83       	std	Y+1, r24	; 0x01
    1aa2:	01 c0       	rjmp	.+2      	; 0x1aa6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1aa4:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1aa6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1aa8:	0f 90       	pop	r0
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	0f 90       	pop	r0
    1ab0:	0f 90       	pop	r0
    1ab2:	cf 91       	pop	r28
    1ab4:	df 91       	pop	r29
    1ab6:	08 95       	ret

00001ab8 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1ab8:	df 93       	push	r29
    1aba:	cf 93       	push	r28
    1abc:	00 d0       	rcall	.+0      	; 0x1abe <GPIO_setupPortDirection+0x6>
    1abe:	00 d0       	rcall	.+0      	; 0x1ac0 <GPIO_setupPortDirection+0x8>
    1ac0:	cd b7       	in	r28, 0x3d	; 61
    1ac2:	de b7       	in	r29, 0x3e	; 62
    1ac4:	89 83       	std	Y+1, r24	; 0x01
    1ac6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1ac8:	89 81       	ldd	r24, Y+1	; 0x01
    1aca:	84 30       	cpi	r24, 0x04	; 4
    1acc:	90 f5       	brcc	.+100    	; 0x1b32 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1ace:	89 81       	ldd	r24, Y+1	; 0x01
    1ad0:	28 2f       	mov	r18, r24
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	3c 83       	std	Y+4, r19	; 0x04
    1ad6:	2b 83       	std	Y+3, r18	; 0x03
    1ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ada:	9c 81       	ldd	r25, Y+4	; 0x04
    1adc:	81 30       	cpi	r24, 0x01	; 1
    1ade:	91 05       	cpc	r25, r1
    1ae0:	d1 f0       	breq	.+52     	; 0x1b16 <GPIO_setupPortDirection+0x5e>
    1ae2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ae4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ae6:	22 30       	cpi	r18, 0x02	; 2
    1ae8:	31 05       	cpc	r19, r1
    1aea:	2c f4       	brge	.+10     	; 0x1af6 <GPIO_setupPortDirection+0x3e>
    1aec:	8b 81       	ldd	r24, Y+3	; 0x03
    1aee:	9c 81       	ldd	r25, Y+4	; 0x04
    1af0:	00 97       	sbiw	r24, 0x00	; 0
    1af2:	61 f0       	breq	.+24     	; 0x1b0c <GPIO_setupPortDirection+0x54>
    1af4:	1e c0       	rjmp	.+60     	; 0x1b32 <GPIO_setupPortDirection+0x7a>
    1af6:	2b 81       	ldd	r18, Y+3	; 0x03
    1af8:	3c 81       	ldd	r19, Y+4	; 0x04
    1afa:	22 30       	cpi	r18, 0x02	; 2
    1afc:	31 05       	cpc	r19, r1
    1afe:	81 f0       	breq	.+32     	; 0x1b20 <GPIO_setupPortDirection+0x68>
    1b00:	8b 81       	ldd	r24, Y+3	; 0x03
    1b02:	9c 81       	ldd	r25, Y+4	; 0x04
    1b04:	83 30       	cpi	r24, 0x03	; 3
    1b06:	91 05       	cpc	r25, r1
    1b08:	81 f0       	breq	.+32     	; 0x1b2a <GPIO_setupPortDirection+0x72>
    1b0a:	13 c0       	rjmp	.+38     	; 0x1b32 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1b0c:	ea e3       	ldi	r30, 0x3A	; 58
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	8a 81       	ldd	r24, Y+2	; 0x02
    1b12:	80 83       	st	Z, r24
    1b14:	0e c0       	rjmp	.+28     	; 0x1b32 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1b16:	e7 e3       	ldi	r30, 0x37	; 55
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1c:	80 83       	st	Z, r24
    1b1e:	09 c0       	rjmp	.+18     	; 0x1b32 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1b20:	e4 e3       	ldi	r30, 0x34	; 52
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	8a 81       	ldd	r24, Y+2	; 0x02
    1b26:	80 83       	st	Z, r24
    1b28:	04 c0       	rjmp	.+8      	; 0x1b32 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1b2a:	e1 e3       	ldi	r30, 0x31	; 49
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b30:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b32:	0f 90       	pop	r0
    1b34:	0f 90       	pop	r0
    1b36:	0f 90       	pop	r0
    1b38:	0f 90       	pop	r0
    1b3a:	cf 91       	pop	r28
    1b3c:	df 91       	pop	r29
    1b3e:	08 95       	ret

00001b40 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1b40:	df 93       	push	r29
    1b42:	cf 93       	push	r28
    1b44:	00 d0       	rcall	.+0      	; 0x1b46 <GPIO_writePort+0x6>
    1b46:	00 d0       	rcall	.+0      	; 0x1b48 <GPIO_writePort+0x8>
    1b48:	cd b7       	in	r28, 0x3d	; 61
    1b4a:	de b7       	in	r29, 0x3e	; 62
    1b4c:	89 83       	std	Y+1, r24	; 0x01
    1b4e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b50:	89 81       	ldd	r24, Y+1	; 0x01
    1b52:	84 30       	cpi	r24, 0x04	; 4
    1b54:	90 f5       	brcc	.+100    	; 0x1bba <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1b56:	89 81       	ldd	r24, Y+1	; 0x01
    1b58:	28 2f       	mov	r18, r24
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	3c 83       	std	Y+4, r19	; 0x04
    1b5e:	2b 83       	std	Y+3, r18	; 0x03
    1b60:	8b 81       	ldd	r24, Y+3	; 0x03
    1b62:	9c 81       	ldd	r25, Y+4	; 0x04
    1b64:	81 30       	cpi	r24, 0x01	; 1
    1b66:	91 05       	cpc	r25, r1
    1b68:	d1 f0       	breq	.+52     	; 0x1b9e <GPIO_writePort+0x5e>
    1b6a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b6c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b6e:	22 30       	cpi	r18, 0x02	; 2
    1b70:	31 05       	cpc	r19, r1
    1b72:	2c f4       	brge	.+10     	; 0x1b7e <GPIO_writePort+0x3e>
    1b74:	8b 81       	ldd	r24, Y+3	; 0x03
    1b76:	9c 81       	ldd	r25, Y+4	; 0x04
    1b78:	00 97       	sbiw	r24, 0x00	; 0
    1b7a:	61 f0       	breq	.+24     	; 0x1b94 <GPIO_writePort+0x54>
    1b7c:	1e c0       	rjmp	.+60     	; 0x1bba <GPIO_writePort+0x7a>
    1b7e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b80:	3c 81       	ldd	r19, Y+4	; 0x04
    1b82:	22 30       	cpi	r18, 0x02	; 2
    1b84:	31 05       	cpc	r19, r1
    1b86:	81 f0       	breq	.+32     	; 0x1ba8 <GPIO_writePort+0x68>
    1b88:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b8c:	83 30       	cpi	r24, 0x03	; 3
    1b8e:	91 05       	cpc	r25, r1
    1b90:	81 f0       	breq	.+32     	; 0x1bb2 <GPIO_writePort+0x72>
    1b92:	13 c0       	rjmp	.+38     	; 0x1bba <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1b94:	eb e3       	ldi	r30, 0x3B	; 59
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9a:	80 83       	st	Z, r24
    1b9c:	0e c0       	rjmp	.+28     	; 0x1bba <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1b9e:	e8 e3       	ldi	r30, 0x38	; 56
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba4:	80 83       	st	Z, r24
    1ba6:	09 c0       	rjmp	.+18     	; 0x1bba <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1ba8:	e5 e3       	ldi	r30, 0x35	; 53
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	8a 81       	ldd	r24, Y+2	; 0x02
    1bae:	80 83       	st	Z, r24
    1bb0:	04 c0       	rjmp	.+8      	; 0x1bba <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1bb2:	e2 e3       	ldi	r30, 0x32	; 50
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb8:	80 83       	st	Z, r24
			break;
		}
	}
}
    1bba:	0f 90       	pop	r0
    1bbc:	0f 90       	pop	r0
    1bbe:	0f 90       	pop	r0
    1bc0:	0f 90       	pop	r0
    1bc2:	cf 91       	pop	r28
    1bc4:	df 91       	pop	r29
    1bc6:	08 95       	ret

00001bc8 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1bc8:	df 93       	push	r29
    1bca:	cf 93       	push	r28
    1bcc:	00 d0       	rcall	.+0      	; 0x1bce <GPIO_readPort+0x6>
    1bce:	00 d0       	rcall	.+0      	; 0x1bd0 <GPIO_readPort+0x8>
    1bd0:	cd b7       	in	r28, 0x3d	; 61
    1bd2:	de b7       	in	r29, 0x3e	; 62
    1bd4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1bd6:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bda:	84 30       	cpi	r24, 0x04	; 4
    1bdc:	90 f5       	brcc	.+100    	; 0x1c42 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1bde:	8a 81       	ldd	r24, Y+2	; 0x02
    1be0:	28 2f       	mov	r18, r24
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	3c 83       	std	Y+4, r19	; 0x04
    1be6:	2b 83       	std	Y+3, r18	; 0x03
    1be8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bea:	9c 81       	ldd	r25, Y+4	; 0x04
    1bec:	81 30       	cpi	r24, 0x01	; 1
    1bee:	91 05       	cpc	r25, r1
    1bf0:	d1 f0       	breq	.+52     	; 0x1c26 <GPIO_readPort+0x5e>
    1bf2:	2b 81       	ldd	r18, Y+3	; 0x03
    1bf4:	3c 81       	ldd	r19, Y+4	; 0x04
    1bf6:	22 30       	cpi	r18, 0x02	; 2
    1bf8:	31 05       	cpc	r19, r1
    1bfa:	2c f4       	brge	.+10     	; 0x1c06 <GPIO_readPort+0x3e>
    1bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1c00:	00 97       	sbiw	r24, 0x00	; 0
    1c02:	61 f0       	breq	.+24     	; 0x1c1c <GPIO_readPort+0x54>
    1c04:	1e c0       	rjmp	.+60     	; 0x1c42 <GPIO_readPort+0x7a>
    1c06:	2b 81       	ldd	r18, Y+3	; 0x03
    1c08:	3c 81       	ldd	r19, Y+4	; 0x04
    1c0a:	22 30       	cpi	r18, 0x02	; 2
    1c0c:	31 05       	cpc	r19, r1
    1c0e:	81 f0       	breq	.+32     	; 0x1c30 <GPIO_readPort+0x68>
    1c10:	8b 81       	ldd	r24, Y+3	; 0x03
    1c12:	9c 81       	ldd	r25, Y+4	; 0x04
    1c14:	83 30       	cpi	r24, 0x03	; 3
    1c16:	91 05       	cpc	r25, r1
    1c18:	81 f0       	breq	.+32     	; 0x1c3a <GPIO_readPort+0x72>
    1c1a:	13 c0       	rjmp	.+38     	; 0x1c42 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1c1c:	e9 e3       	ldi	r30, 0x39	; 57
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	89 83       	std	Y+1, r24	; 0x01
    1c24:	0e c0       	rjmp	.+28     	; 0x1c42 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1c26:	e6 e3       	ldi	r30, 0x36	; 54
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	89 83       	std	Y+1, r24	; 0x01
    1c2e:	09 c0       	rjmp	.+18     	; 0x1c42 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1c30:	e3 e3       	ldi	r30, 0x33	; 51
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	89 83       	std	Y+1, r24	; 0x01
    1c38:	04 c0       	rjmp	.+8      	; 0x1c42 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1c3a:	e0 e3       	ldi	r30, 0x30	; 48
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	80 81       	ld	r24, Z
    1c40:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1c42:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c44:	0f 90       	pop	r0
    1c46:	0f 90       	pop	r0
    1c48:	0f 90       	pop	r0
    1c4a:	0f 90       	pop	r0
    1c4c:	cf 91       	pop	r28
    1c4e:	df 91       	pop	r29
    1c50:	08 95       	ret

00001c52 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1c52:	df 93       	push	r29
    1c54:	cf 93       	push	r28
    1c56:	cd b7       	in	r28, 0x3d	; 61
    1c58:	de b7       	in	r29, 0x3e	; 62
    1c5a:	2e 97       	sbiw	r28, 0x0e	; 14
    1c5c:	0f b6       	in	r0, 0x3f	; 63
    1c5e:	f8 94       	cli
    1c60:	de bf       	out	0x3e, r29	; 62
    1c62:	0f be       	out	0x3f, r0	; 63
    1c64:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	66 e0       	ldi	r22, 0x06	; 6
    1c6a:	41 e0       	ldi	r20, 0x01	; 1
    1c6c:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	65 e0       	ldi	r22, 0x05	; 5
    1c74:	41 e0       	ldi	r20, 0x01	; 1
    1c76:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <GPIO_setupPinDirection>
    1c7a:	80 e0       	ldi	r24, 0x00	; 0
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	a0 ea       	ldi	r26, 0xA0	; 160
    1c80:	b1 e4       	ldi	r27, 0x41	; 65
    1c82:	8b 87       	std	Y+11, r24	; 0x0b
    1c84:	9c 87       	std	Y+12, r25	; 0x0c
    1c86:	ad 87       	std	Y+13, r26	; 0x0d
    1c88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c90:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c92:	20 e0       	ldi	r18, 0x00	; 0
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	4a ef       	ldi	r20, 0xFA	; 250
    1c98:	54 e4       	ldi	r21, 0x44	; 68
    1c9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	cb 01       	movw	r24, r22
    1ca2:	8f 83       	std	Y+7, r24	; 0x07
    1ca4:	98 87       	std	Y+8, r25	; 0x08
    1ca6:	a9 87       	std	Y+9, r26	; 0x09
    1ca8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1caa:	6f 81       	ldd	r22, Y+7	; 0x07
    1cac:	78 85       	ldd	r23, Y+8	; 0x08
    1cae:	89 85       	ldd	r24, Y+9	; 0x09
    1cb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	40 e8       	ldi	r20, 0x80	; 128
    1cb8:	5f e3       	ldi	r21, 0x3F	; 63
    1cba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cbe:	88 23       	and	r24, r24
    1cc0:	2c f4       	brge	.+10     	; 0x1ccc <LCD_init+0x7a>
		__ticks = 1;
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	9e 83       	std	Y+6, r25	; 0x06
    1cc8:	8d 83       	std	Y+5, r24	; 0x05
    1cca:	3f c0       	rjmp	.+126    	; 0x1d4a <LCD_init+0xf8>
	else if (__tmp > 65535)
    1ccc:	6f 81       	ldd	r22, Y+7	; 0x07
    1cce:	78 85       	ldd	r23, Y+8	; 0x08
    1cd0:	89 85       	ldd	r24, Y+9	; 0x09
    1cd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd4:	20 e0       	ldi	r18, 0x00	; 0
    1cd6:	3f ef       	ldi	r19, 0xFF	; 255
    1cd8:	4f e7       	ldi	r20, 0x7F	; 127
    1cda:	57 e4       	ldi	r21, 0x47	; 71
    1cdc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ce0:	18 16       	cp	r1, r24
    1ce2:	4c f5       	brge	.+82     	; 0x1d36 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ce6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ce8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cea:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	40 e2       	ldi	r20, 0x20	; 32
    1cf2:	51 e4       	ldi	r21, 0x41	; 65
    1cf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	cb 01       	movw	r24, r22
    1cfc:	bc 01       	movw	r22, r24
    1cfe:	cd 01       	movw	r24, r26
    1d00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d04:	dc 01       	movw	r26, r24
    1d06:	cb 01       	movw	r24, r22
    1d08:	9e 83       	std	Y+6, r25	; 0x06
    1d0a:	8d 83       	std	Y+5, r24	; 0x05
    1d0c:	0f c0       	rjmp	.+30     	; 0x1d2c <LCD_init+0xda>
    1d0e:	88 ec       	ldi	r24, 0xC8	; 200
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	9c 83       	std	Y+4, r25	; 0x04
    1d14:	8b 83       	std	Y+3, r24	; 0x03
    1d16:	8b 81       	ldd	r24, Y+3	; 0x03
    1d18:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1a:	01 97       	sbiw	r24, 0x01	; 1
    1d1c:	f1 f7       	brne	.-4      	; 0x1d1a <LCD_init+0xc8>
    1d1e:	9c 83       	std	Y+4, r25	; 0x04
    1d20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d22:	8d 81       	ldd	r24, Y+5	; 0x05
    1d24:	9e 81       	ldd	r25, Y+6	; 0x06
    1d26:	01 97       	sbiw	r24, 0x01	; 1
    1d28:	9e 83       	std	Y+6, r25	; 0x06
    1d2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d30:	00 97       	sbiw	r24, 0x00	; 0
    1d32:	69 f7       	brne	.-38     	; 0x1d0e <LCD_init+0xbc>
    1d34:	14 c0       	rjmp	.+40     	; 0x1d5e <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d36:	6f 81       	ldd	r22, Y+7	; 0x07
    1d38:	78 85       	ldd	r23, Y+8	; 0x08
    1d3a:	89 85       	ldd	r24, Y+9	; 0x09
    1d3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d42:	dc 01       	movw	r26, r24
    1d44:	cb 01       	movw	r24, r22
    1d46:	9e 83       	std	Y+6, r25	; 0x06
    1d48:	8d 83       	std	Y+5, r24	; 0x05
    1d4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4e:	9a 83       	std	Y+2, r25	; 0x02
    1d50:	89 83       	std	Y+1, r24	; 0x01
    1d52:	89 81       	ldd	r24, Y+1	; 0x01
    1d54:	9a 81       	ldd	r25, Y+2	; 0x02
    1d56:	01 97       	sbiw	r24, 0x01	; 1
    1d58:	f1 f7       	brne	.-4      	; 0x1d56 <LCD_init+0x104>
    1d5a:	9a 83       	std	Y+2, r25	; 0x02
    1d5c:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1d5e:	80 e0       	ldi	r24, 0x00	; 0
    1d60:	6f ef       	ldi	r22, 0xFF	; 255
    1d62:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1d66:	88 e3       	ldi	r24, 0x38	; 56
    1d68:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1d6c:	8c e0       	ldi	r24, 0x0C	; 12
    1d6e:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <LCD_sendCommand>
}
    1d78:	2e 96       	adiw	r28, 0x0e	; 14
    1d7a:	0f b6       	in	r0, 0x3f	; 63
    1d7c:	f8 94       	cli
    1d7e:	de bf       	out	0x3e, r29	; 62
    1d80:	0f be       	out	0x3f, r0	; 63
    1d82:	cd bf       	out	0x3d, r28	; 61
    1d84:	cf 91       	pop	r28
    1d86:	df 91       	pop	r29
    1d88:	08 95       	ret

00001d8a <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1d8a:	df 93       	push	r29
    1d8c:	cf 93       	push	r28
    1d8e:	cd b7       	in	r28, 0x3d	; 61
    1d90:	de b7       	in	r29, 0x3e	; 62
    1d92:	e9 97       	sbiw	r28, 0x39	; 57
    1d94:	0f b6       	in	r0, 0x3f	; 63
    1d96:	f8 94       	cli
    1d98:	de bf       	out	0x3e, r29	; 62
    1d9a:	0f be       	out	0x3f, r0	; 63
    1d9c:	cd bf       	out	0x3d, r28	; 61
    1d9e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	66 e0       	ldi	r22, 0x06	; 6
    1da4:	40 e0       	ldi	r20, 0x00	; 0
    1da6:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <GPIO_writePin>
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	a0 e8       	ldi	r26, 0x80	; 128
    1db0:	bf e3       	ldi	r27, 0x3F	; 63
    1db2:	8d ab       	std	Y+53, r24	; 0x35
    1db4:	9e ab       	std	Y+54, r25	; 0x36
    1db6:	af ab       	std	Y+55, r26	; 0x37
    1db8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dba:	6d a9       	ldd	r22, Y+53	; 0x35
    1dbc:	7e a9       	ldd	r23, Y+54	; 0x36
    1dbe:	8f a9       	ldd	r24, Y+55	; 0x37
    1dc0:	98 ad       	ldd	r25, Y+56	; 0x38
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	4a ef       	ldi	r20, 0xFA	; 250
    1dc8:	54 e4       	ldi	r21, 0x44	; 68
    1dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dce:	dc 01       	movw	r26, r24
    1dd0:	cb 01       	movw	r24, r22
    1dd2:	89 ab       	std	Y+49, r24	; 0x31
    1dd4:	9a ab       	std	Y+50, r25	; 0x32
    1dd6:	ab ab       	std	Y+51, r26	; 0x33
    1dd8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1dda:	69 a9       	ldd	r22, Y+49	; 0x31
    1ddc:	7a a9       	ldd	r23, Y+50	; 0x32
    1dde:	8b a9       	ldd	r24, Y+51	; 0x33
    1de0:	9c a9       	ldd	r25, Y+52	; 0x34
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	40 e8       	ldi	r20, 0x80	; 128
    1de8:	5f e3       	ldi	r21, 0x3F	; 63
    1dea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dee:	88 23       	and	r24, r24
    1df0:	2c f4       	brge	.+10     	; 0x1dfc <LCD_sendCommand+0x72>
		__ticks = 1;
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	98 ab       	std	Y+48, r25	; 0x30
    1df8:	8f a7       	std	Y+47, r24	; 0x2f
    1dfa:	3f c0       	rjmp	.+126    	; 0x1e7a <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1dfc:	69 a9       	ldd	r22, Y+49	; 0x31
    1dfe:	7a a9       	ldd	r23, Y+50	; 0x32
    1e00:	8b a9       	ldd	r24, Y+51	; 0x33
    1e02:	9c a9       	ldd	r25, Y+52	; 0x34
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	3f ef       	ldi	r19, 0xFF	; 255
    1e08:	4f e7       	ldi	r20, 0x7F	; 127
    1e0a:	57 e4       	ldi	r21, 0x47	; 71
    1e0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e10:	18 16       	cp	r1, r24
    1e12:	4c f5       	brge	.+82     	; 0x1e66 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e14:	6d a9       	ldd	r22, Y+53	; 0x35
    1e16:	7e a9       	ldd	r23, Y+54	; 0x36
    1e18:	8f a9       	ldd	r24, Y+55	; 0x37
    1e1a:	98 ad       	ldd	r25, Y+56	; 0x38
    1e1c:	20 e0       	ldi	r18, 0x00	; 0
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	40 e2       	ldi	r20, 0x20	; 32
    1e22:	51 e4       	ldi	r21, 0x41	; 65
    1e24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e28:	dc 01       	movw	r26, r24
    1e2a:	cb 01       	movw	r24, r22
    1e2c:	bc 01       	movw	r22, r24
    1e2e:	cd 01       	movw	r24, r26
    1e30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	98 ab       	std	Y+48, r25	; 0x30
    1e3a:	8f a7       	std	Y+47, r24	; 0x2f
    1e3c:	0f c0       	rjmp	.+30     	; 0x1e5c <LCD_sendCommand+0xd2>
    1e3e:	88 ec       	ldi	r24, 0xC8	; 200
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	9e a7       	std	Y+46, r25	; 0x2e
    1e44:	8d a7       	std	Y+45, r24	; 0x2d
    1e46:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e48:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e4a:	01 97       	sbiw	r24, 0x01	; 1
    1e4c:	f1 f7       	brne	.-4      	; 0x1e4a <LCD_sendCommand+0xc0>
    1e4e:	9e a7       	std	Y+46, r25	; 0x2e
    1e50:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e52:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e54:	98 a9       	ldd	r25, Y+48	; 0x30
    1e56:	01 97       	sbiw	r24, 0x01	; 1
    1e58:	98 ab       	std	Y+48, r25	; 0x30
    1e5a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e5c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e5e:	98 a9       	ldd	r25, Y+48	; 0x30
    1e60:	00 97       	sbiw	r24, 0x00	; 0
    1e62:	69 f7       	brne	.-38     	; 0x1e3e <LCD_sendCommand+0xb4>
    1e64:	14 c0       	rjmp	.+40     	; 0x1e8e <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e66:	69 a9       	ldd	r22, Y+49	; 0x31
    1e68:	7a a9       	ldd	r23, Y+50	; 0x32
    1e6a:	8b a9       	ldd	r24, Y+51	; 0x33
    1e6c:	9c a9       	ldd	r25, Y+52	; 0x34
    1e6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	98 ab       	std	Y+48, r25	; 0x30
    1e78:	8f a7       	std	Y+47, r24	; 0x2f
    1e7a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e7c:	98 a9       	ldd	r25, Y+48	; 0x30
    1e7e:	9c a7       	std	Y+44, r25	; 0x2c
    1e80:	8b a7       	std	Y+43, r24	; 0x2b
    1e82:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e84:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e86:	01 97       	sbiw	r24, 0x01	; 1
    1e88:	f1 f7       	brne	.-4      	; 0x1e86 <LCD_sendCommand+0xfc>
    1e8a:	9c a7       	std	Y+44, r25	; 0x2c
    1e8c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	65 e0       	ldi	r22, 0x05	; 5
    1e92:	41 e0       	ldi	r20, 0x01	; 1
    1e94:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <GPIO_writePin>
    1e98:	80 e0       	ldi	r24, 0x00	; 0
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	a0 e8       	ldi	r26, 0x80	; 128
    1e9e:	bf e3       	ldi	r27, 0x3F	; 63
    1ea0:	8f a3       	std	Y+39, r24	; 0x27
    1ea2:	98 a7       	std	Y+40, r25	; 0x28
    1ea4:	a9 a7       	std	Y+41, r26	; 0x29
    1ea6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea8:	6f a1       	ldd	r22, Y+39	; 0x27
    1eaa:	78 a5       	ldd	r23, Y+40	; 0x28
    1eac:	89 a5       	ldd	r24, Y+41	; 0x29
    1eae:	9a a5       	ldd	r25, Y+42	; 0x2a
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	4a ef       	ldi	r20, 0xFA	; 250
    1eb6:	54 e4       	ldi	r21, 0x44	; 68
    1eb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ebc:	dc 01       	movw	r26, r24
    1ebe:	cb 01       	movw	r24, r22
    1ec0:	8b a3       	std	Y+35, r24	; 0x23
    1ec2:	9c a3       	std	Y+36, r25	; 0x24
    1ec4:	ad a3       	std	Y+37, r26	; 0x25
    1ec6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ec8:	6b a1       	ldd	r22, Y+35	; 0x23
    1eca:	7c a1       	ldd	r23, Y+36	; 0x24
    1ecc:	8d a1       	ldd	r24, Y+37	; 0x25
    1ece:	9e a1       	ldd	r25, Y+38	; 0x26
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	40 e8       	ldi	r20, 0x80	; 128
    1ed6:	5f e3       	ldi	r21, 0x3F	; 63
    1ed8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1edc:	88 23       	and	r24, r24
    1ede:	2c f4       	brge	.+10     	; 0x1eea <LCD_sendCommand+0x160>
		__ticks = 1;
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	9a a3       	std	Y+34, r25	; 0x22
    1ee6:	89 a3       	std	Y+33, r24	; 0x21
    1ee8:	3f c0       	rjmp	.+126    	; 0x1f68 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1eea:	6b a1       	ldd	r22, Y+35	; 0x23
    1eec:	7c a1       	ldd	r23, Y+36	; 0x24
    1eee:	8d a1       	ldd	r24, Y+37	; 0x25
    1ef0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	3f ef       	ldi	r19, 0xFF	; 255
    1ef6:	4f e7       	ldi	r20, 0x7F	; 127
    1ef8:	57 e4       	ldi	r21, 0x47	; 71
    1efa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1efe:	18 16       	cp	r1, r24
    1f00:	4c f5       	brge	.+82     	; 0x1f54 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f02:	6f a1       	ldd	r22, Y+39	; 0x27
    1f04:	78 a5       	ldd	r23, Y+40	; 0x28
    1f06:	89 a5       	ldd	r24, Y+41	; 0x29
    1f08:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	40 e2       	ldi	r20, 0x20	; 32
    1f10:	51 e4       	ldi	r21, 0x41	; 65
    1f12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	bc 01       	movw	r22, r24
    1f1c:	cd 01       	movw	r24, r26
    1f1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	9a a3       	std	Y+34, r25	; 0x22
    1f28:	89 a3       	std	Y+33, r24	; 0x21
    1f2a:	0f c0       	rjmp	.+30     	; 0x1f4a <LCD_sendCommand+0x1c0>
    1f2c:	88 ec       	ldi	r24, 0xC8	; 200
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	98 a3       	std	Y+32, r25	; 0x20
    1f32:	8f 8f       	std	Y+31, r24	; 0x1f
    1f34:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f36:	98 a1       	ldd	r25, Y+32	; 0x20
    1f38:	01 97       	sbiw	r24, 0x01	; 1
    1f3a:	f1 f7       	brne	.-4      	; 0x1f38 <LCD_sendCommand+0x1ae>
    1f3c:	98 a3       	std	Y+32, r25	; 0x20
    1f3e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f40:	89 a1       	ldd	r24, Y+33	; 0x21
    1f42:	9a a1       	ldd	r25, Y+34	; 0x22
    1f44:	01 97       	sbiw	r24, 0x01	; 1
    1f46:	9a a3       	std	Y+34, r25	; 0x22
    1f48:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f4a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f4c:	9a a1       	ldd	r25, Y+34	; 0x22
    1f4e:	00 97       	sbiw	r24, 0x00	; 0
    1f50:	69 f7       	brne	.-38     	; 0x1f2c <LCD_sendCommand+0x1a2>
    1f52:	14 c0       	rjmp	.+40     	; 0x1f7c <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f54:	6b a1       	ldd	r22, Y+35	; 0x23
    1f56:	7c a1       	ldd	r23, Y+36	; 0x24
    1f58:	8d a1       	ldd	r24, Y+37	; 0x25
    1f5a:	9e a1       	ldd	r25, Y+38	; 0x26
    1f5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	9a a3       	std	Y+34, r25	; 0x22
    1f66:	89 a3       	std	Y+33, r24	; 0x21
    1f68:	89 a1       	ldd	r24, Y+33	; 0x21
    1f6a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f6c:	9e 8f       	std	Y+30, r25	; 0x1e
    1f6e:	8d 8f       	std	Y+29, r24	; 0x1d
    1f70:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f72:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f74:	01 97       	sbiw	r24, 0x01	; 1
    1f76:	f1 f7       	brne	.-4      	; 0x1f74 <LCD_sendCommand+0x1ea>
    1f78:	9e 8f       	std	Y+30, r25	; 0x1e
    1f7a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1f7c:	80 e0       	ldi	r24, 0x00	; 0
    1f7e:	69 ad       	ldd	r22, Y+57	; 0x39
    1f80:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <GPIO_writePort>
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	a0 e8       	ldi	r26, 0x80	; 128
    1f8a:	bf e3       	ldi	r27, 0x3F	; 63
    1f8c:	89 8f       	std	Y+25, r24	; 0x19
    1f8e:	9a 8f       	std	Y+26, r25	; 0x1a
    1f90:	ab 8f       	std	Y+27, r26	; 0x1b
    1f92:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f94:	69 8d       	ldd	r22, Y+25	; 0x19
    1f96:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f98:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f9c:	20 e0       	ldi	r18, 0x00	; 0
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	4a ef       	ldi	r20, 0xFA	; 250
    1fa2:	54 e4       	ldi	r21, 0x44	; 68
    1fa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	8d 8b       	std	Y+21, r24	; 0x15
    1fae:	9e 8b       	std	Y+22, r25	; 0x16
    1fb0:	af 8b       	std	Y+23, r26	; 0x17
    1fb2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fb4:	6d 89       	ldd	r22, Y+21	; 0x15
    1fb6:	7e 89       	ldd	r23, Y+22	; 0x16
    1fb8:	8f 89       	ldd	r24, Y+23	; 0x17
    1fba:	98 8d       	ldd	r25, Y+24	; 0x18
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	40 e8       	ldi	r20, 0x80	; 128
    1fc2:	5f e3       	ldi	r21, 0x3F	; 63
    1fc4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fc8:	88 23       	and	r24, r24
    1fca:	2c f4       	brge	.+10     	; 0x1fd6 <LCD_sendCommand+0x24c>
		__ticks = 1;
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	9c 8b       	std	Y+20, r25	; 0x14
    1fd2:	8b 8b       	std	Y+19, r24	; 0x13
    1fd4:	3f c0       	rjmp	.+126    	; 0x2054 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1fd6:	6d 89       	ldd	r22, Y+21	; 0x15
    1fd8:	7e 89       	ldd	r23, Y+22	; 0x16
    1fda:	8f 89       	ldd	r24, Y+23	; 0x17
    1fdc:	98 8d       	ldd	r25, Y+24	; 0x18
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	3f ef       	ldi	r19, 0xFF	; 255
    1fe2:	4f e7       	ldi	r20, 0x7F	; 127
    1fe4:	57 e4       	ldi	r21, 0x47	; 71
    1fe6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fea:	18 16       	cp	r1, r24
    1fec:	4c f5       	brge	.+82     	; 0x2040 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fee:	69 8d       	ldd	r22, Y+25	; 0x19
    1ff0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ff2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ff4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	40 e2       	ldi	r20, 0x20	; 32
    1ffc:	51 e4       	ldi	r21, 0x41	; 65
    1ffe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	bc 01       	movw	r22, r24
    2008:	cd 01       	movw	r24, r26
    200a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    200e:	dc 01       	movw	r26, r24
    2010:	cb 01       	movw	r24, r22
    2012:	9c 8b       	std	Y+20, r25	; 0x14
    2014:	8b 8b       	std	Y+19, r24	; 0x13
    2016:	0f c0       	rjmp	.+30     	; 0x2036 <LCD_sendCommand+0x2ac>
    2018:	88 ec       	ldi	r24, 0xC8	; 200
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	9a 8b       	std	Y+18, r25	; 0x12
    201e:	89 8b       	std	Y+17, r24	; 0x11
    2020:	89 89       	ldd	r24, Y+17	; 0x11
    2022:	9a 89       	ldd	r25, Y+18	; 0x12
    2024:	01 97       	sbiw	r24, 0x01	; 1
    2026:	f1 f7       	brne	.-4      	; 0x2024 <LCD_sendCommand+0x29a>
    2028:	9a 8b       	std	Y+18, r25	; 0x12
    202a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    202c:	8b 89       	ldd	r24, Y+19	; 0x13
    202e:	9c 89       	ldd	r25, Y+20	; 0x14
    2030:	01 97       	sbiw	r24, 0x01	; 1
    2032:	9c 8b       	std	Y+20, r25	; 0x14
    2034:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2036:	8b 89       	ldd	r24, Y+19	; 0x13
    2038:	9c 89       	ldd	r25, Y+20	; 0x14
    203a:	00 97       	sbiw	r24, 0x00	; 0
    203c:	69 f7       	brne	.-38     	; 0x2018 <LCD_sendCommand+0x28e>
    203e:	14 c0       	rjmp	.+40     	; 0x2068 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2040:	6d 89       	ldd	r22, Y+21	; 0x15
    2042:	7e 89       	ldd	r23, Y+22	; 0x16
    2044:	8f 89       	ldd	r24, Y+23	; 0x17
    2046:	98 8d       	ldd	r25, Y+24	; 0x18
    2048:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	9c 8b       	std	Y+20, r25	; 0x14
    2052:	8b 8b       	std	Y+19, r24	; 0x13
    2054:	8b 89       	ldd	r24, Y+19	; 0x13
    2056:	9c 89       	ldd	r25, Y+20	; 0x14
    2058:	98 8b       	std	Y+16, r25	; 0x10
    205a:	8f 87       	std	Y+15, r24	; 0x0f
    205c:	8f 85       	ldd	r24, Y+15	; 0x0f
    205e:	98 89       	ldd	r25, Y+16	; 0x10
    2060:	01 97       	sbiw	r24, 0x01	; 1
    2062:	f1 f7       	brne	.-4      	; 0x2060 <LCD_sendCommand+0x2d6>
    2064:	98 8b       	std	Y+16, r25	; 0x10
    2066:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	65 e0       	ldi	r22, 0x05	; 5
    206c:	40 e0       	ldi	r20, 0x00	; 0
    206e:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <GPIO_writePin>
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	a0 e8       	ldi	r26, 0x80	; 128
    2078:	bf e3       	ldi	r27, 0x3F	; 63
    207a:	8b 87       	std	Y+11, r24	; 0x0b
    207c:	9c 87       	std	Y+12, r25	; 0x0c
    207e:	ad 87       	std	Y+13, r26	; 0x0d
    2080:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2082:	6b 85       	ldd	r22, Y+11	; 0x0b
    2084:	7c 85       	ldd	r23, Y+12	; 0x0c
    2086:	8d 85       	ldd	r24, Y+13	; 0x0d
    2088:	9e 85       	ldd	r25, Y+14	; 0x0e
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	4a ef       	ldi	r20, 0xFA	; 250
    2090:	54 e4       	ldi	r21, 0x44	; 68
    2092:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	8f 83       	std	Y+7, r24	; 0x07
    209c:	98 87       	std	Y+8, r25	; 0x08
    209e:	a9 87       	std	Y+9, r26	; 0x09
    20a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20a2:	6f 81       	ldd	r22, Y+7	; 0x07
    20a4:	78 85       	ldd	r23, Y+8	; 0x08
    20a6:	89 85       	ldd	r24, Y+9	; 0x09
    20a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	40 e8       	ldi	r20, 0x80	; 128
    20b0:	5f e3       	ldi	r21, 0x3F	; 63
    20b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20b6:	88 23       	and	r24, r24
    20b8:	2c f4       	brge	.+10     	; 0x20c4 <LCD_sendCommand+0x33a>
		__ticks = 1;
    20ba:	81 e0       	ldi	r24, 0x01	; 1
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	9e 83       	std	Y+6, r25	; 0x06
    20c0:	8d 83       	std	Y+5, r24	; 0x05
    20c2:	3f c0       	rjmp	.+126    	; 0x2142 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    20c4:	6f 81       	ldd	r22, Y+7	; 0x07
    20c6:	78 85       	ldd	r23, Y+8	; 0x08
    20c8:	89 85       	ldd	r24, Y+9	; 0x09
    20ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	3f ef       	ldi	r19, 0xFF	; 255
    20d0:	4f e7       	ldi	r20, 0x7F	; 127
    20d2:	57 e4       	ldi	r21, 0x47	; 71
    20d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20d8:	18 16       	cp	r1, r24
    20da:	4c f5       	brge	.+82     	; 0x212e <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    20de:	7c 85       	ldd	r23, Y+12	; 0x0c
    20e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	40 e2       	ldi	r20, 0x20	; 32
    20ea:	51 e4       	ldi	r21, 0x41	; 65
    20ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f0:	dc 01       	movw	r26, r24
    20f2:	cb 01       	movw	r24, r22
    20f4:	bc 01       	movw	r22, r24
    20f6:	cd 01       	movw	r24, r26
    20f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20fc:	dc 01       	movw	r26, r24
    20fe:	cb 01       	movw	r24, r22
    2100:	9e 83       	std	Y+6, r25	; 0x06
    2102:	8d 83       	std	Y+5, r24	; 0x05
    2104:	0f c0       	rjmp	.+30     	; 0x2124 <LCD_sendCommand+0x39a>
    2106:	88 ec       	ldi	r24, 0xC8	; 200
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	9c 83       	std	Y+4, r25	; 0x04
    210c:	8b 83       	std	Y+3, r24	; 0x03
    210e:	8b 81       	ldd	r24, Y+3	; 0x03
    2110:	9c 81       	ldd	r25, Y+4	; 0x04
    2112:	01 97       	sbiw	r24, 0x01	; 1
    2114:	f1 f7       	brne	.-4      	; 0x2112 <LCD_sendCommand+0x388>
    2116:	9c 83       	std	Y+4, r25	; 0x04
    2118:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    211a:	8d 81       	ldd	r24, Y+5	; 0x05
    211c:	9e 81       	ldd	r25, Y+6	; 0x06
    211e:	01 97       	sbiw	r24, 0x01	; 1
    2120:	9e 83       	std	Y+6, r25	; 0x06
    2122:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2124:	8d 81       	ldd	r24, Y+5	; 0x05
    2126:	9e 81       	ldd	r25, Y+6	; 0x06
    2128:	00 97       	sbiw	r24, 0x00	; 0
    212a:	69 f7       	brne	.-38     	; 0x2106 <LCD_sendCommand+0x37c>
    212c:	14 c0       	rjmp	.+40     	; 0x2156 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    212e:	6f 81       	ldd	r22, Y+7	; 0x07
    2130:	78 85       	ldd	r23, Y+8	; 0x08
    2132:	89 85       	ldd	r24, Y+9	; 0x09
    2134:	9a 85       	ldd	r25, Y+10	; 0x0a
    2136:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    213a:	dc 01       	movw	r26, r24
    213c:	cb 01       	movw	r24, r22
    213e:	9e 83       	std	Y+6, r25	; 0x06
    2140:	8d 83       	std	Y+5, r24	; 0x05
    2142:	8d 81       	ldd	r24, Y+5	; 0x05
    2144:	9e 81       	ldd	r25, Y+6	; 0x06
    2146:	9a 83       	std	Y+2, r25	; 0x02
    2148:	89 83       	std	Y+1, r24	; 0x01
    214a:	89 81       	ldd	r24, Y+1	; 0x01
    214c:	9a 81       	ldd	r25, Y+2	; 0x02
    214e:	01 97       	sbiw	r24, 0x01	; 1
    2150:	f1 f7       	brne	.-4      	; 0x214e <LCD_sendCommand+0x3c4>
    2152:	9a 83       	std	Y+2, r25	; 0x02
    2154:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2156:	e9 96       	adiw	r28, 0x39	; 57
    2158:	0f b6       	in	r0, 0x3f	; 63
    215a:	f8 94       	cli
    215c:	de bf       	out	0x3e, r29	; 62
    215e:	0f be       	out	0x3f, r0	; 63
    2160:	cd bf       	out	0x3d, r28	; 61
    2162:	cf 91       	pop	r28
    2164:	df 91       	pop	r29
    2166:	08 95       	ret

00002168 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2168:	df 93       	push	r29
    216a:	cf 93       	push	r28
    216c:	cd b7       	in	r28, 0x3d	; 61
    216e:	de b7       	in	r29, 0x3e	; 62
    2170:	e9 97       	sbiw	r28, 0x39	; 57
    2172:	0f b6       	in	r0, 0x3f	; 63
    2174:	f8 94       	cli
    2176:	de bf       	out	0x3e, r29	; 62
    2178:	0f be       	out	0x3f, r0	; 63
    217a:	cd bf       	out	0x3d, r28	; 61
    217c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	66 e0       	ldi	r22, 0x06	; 6
    2182:	41 e0       	ldi	r20, 0x01	; 1
    2184:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <GPIO_writePin>
    2188:	80 e0       	ldi	r24, 0x00	; 0
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	a0 e8       	ldi	r26, 0x80	; 128
    218e:	bf e3       	ldi	r27, 0x3F	; 63
    2190:	8d ab       	std	Y+53, r24	; 0x35
    2192:	9e ab       	std	Y+54, r25	; 0x36
    2194:	af ab       	std	Y+55, r26	; 0x37
    2196:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2198:	6d a9       	ldd	r22, Y+53	; 0x35
    219a:	7e a9       	ldd	r23, Y+54	; 0x36
    219c:	8f a9       	ldd	r24, Y+55	; 0x37
    219e:	98 ad       	ldd	r25, Y+56	; 0x38
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	4a ef       	ldi	r20, 0xFA	; 250
    21a6:	54 e4       	ldi	r21, 0x44	; 68
    21a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	89 ab       	std	Y+49, r24	; 0x31
    21b2:	9a ab       	std	Y+50, r25	; 0x32
    21b4:	ab ab       	std	Y+51, r26	; 0x33
    21b6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21b8:	69 a9       	ldd	r22, Y+49	; 0x31
    21ba:	7a a9       	ldd	r23, Y+50	; 0x32
    21bc:	8b a9       	ldd	r24, Y+51	; 0x33
    21be:	9c a9       	ldd	r25, Y+52	; 0x34
    21c0:	20 e0       	ldi	r18, 0x00	; 0
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	40 e8       	ldi	r20, 0x80	; 128
    21c6:	5f e3       	ldi	r21, 0x3F	; 63
    21c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21cc:	88 23       	and	r24, r24
    21ce:	2c f4       	brge	.+10     	; 0x21da <LCD_displayCharacter+0x72>
		__ticks = 1;
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	98 ab       	std	Y+48, r25	; 0x30
    21d6:	8f a7       	std	Y+47, r24	; 0x2f
    21d8:	3f c0       	rjmp	.+126    	; 0x2258 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    21da:	69 a9       	ldd	r22, Y+49	; 0x31
    21dc:	7a a9       	ldd	r23, Y+50	; 0x32
    21de:	8b a9       	ldd	r24, Y+51	; 0x33
    21e0:	9c a9       	ldd	r25, Y+52	; 0x34
    21e2:	20 e0       	ldi	r18, 0x00	; 0
    21e4:	3f ef       	ldi	r19, 0xFF	; 255
    21e6:	4f e7       	ldi	r20, 0x7F	; 127
    21e8:	57 e4       	ldi	r21, 0x47	; 71
    21ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21ee:	18 16       	cp	r1, r24
    21f0:	4c f5       	brge	.+82     	; 0x2244 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f2:	6d a9       	ldd	r22, Y+53	; 0x35
    21f4:	7e a9       	ldd	r23, Y+54	; 0x36
    21f6:	8f a9       	ldd	r24, Y+55	; 0x37
    21f8:	98 ad       	ldd	r25, Y+56	; 0x38
    21fa:	20 e0       	ldi	r18, 0x00	; 0
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	40 e2       	ldi	r20, 0x20	; 32
    2200:	51 e4       	ldi	r21, 0x41	; 65
    2202:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	bc 01       	movw	r22, r24
    220c:	cd 01       	movw	r24, r26
    220e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	98 ab       	std	Y+48, r25	; 0x30
    2218:	8f a7       	std	Y+47, r24	; 0x2f
    221a:	0f c0       	rjmp	.+30     	; 0x223a <LCD_displayCharacter+0xd2>
    221c:	88 ec       	ldi	r24, 0xC8	; 200
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	9e a7       	std	Y+46, r25	; 0x2e
    2222:	8d a7       	std	Y+45, r24	; 0x2d
    2224:	8d a5       	ldd	r24, Y+45	; 0x2d
    2226:	9e a5       	ldd	r25, Y+46	; 0x2e
    2228:	01 97       	sbiw	r24, 0x01	; 1
    222a:	f1 f7       	brne	.-4      	; 0x2228 <LCD_displayCharacter+0xc0>
    222c:	9e a7       	std	Y+46, r25	; 0x2e
    222e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2230:	8f a5       	ldd	r24, Y+47	; 0x2f
    2232:	98 a9       	ldd	r25, Y+48	; 0x30
    2234:	01 97       	sbiw	r24, 0x01	; 1
    2236:	98 ab       	std	Y+48, r25	; 0x30
    2238:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    223a:	8f a5       	ldd	r24, Y+47	; 0x2f
    223c:	98 a9       	ldd	r25, Y+48	; 0x30
    223e:	00 97       	sbiw	r24, 0x00	; 0
    2240:	69 f7       	brne	.-38     	; 0x221c <LCD_displayCharacter+0xb4>
    2242:	14 c0       	rjmp	.+40     	; 0x226c <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2244:	69 a9       	ldd	r22, Y+49	; 0x31
    2246:	7a a9       	ldd	r23, Y+50	; 0x32
    2248:	8b a9       	ldd	r24, Y+51	; 0x33
    224a:	9c a9       	ldd	r25, Y+52	; 0x34
    224c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2250:	dc 01       	movw	r26, r24
    2252:	cb 01       	movw	r24, r22
    2254:	98 ab       	std	Y+48, r25	; 0x30
    2256:	8f a7       	std	Y+47, r24	; 0x2f
    2258:	8f a5       	ldd	r24, Y+47	; 0x2f
    225a:	98 a9       	ldd	r25, Y+48	; 0x30
    225c:	9c a7       	std	Y+44, r25	; 0x2c
    225e:	8b a7       	std	Y+43, r24	; 0x2b
    2260:	8b a5       	ldd	r24, Y+43	; 0x2b
    2262:	9c a5       	ldd	r25, Y+44	; 0x2c
    2264:	01 97       	sbiw	r24, 0x01	; 1
    2266:	f1 f7       	brne	.-4      	; 0x2264 <LCD_displayCharacter+0xfc>
    2268:	9c a7       	std	Y+44, r25	; 0x2c
    226a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	65 e0       	ldi	r22, 0x05	; 5
    2270:	41 e0       	ldi	r20, 0x01	; 1
    2272:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <GPIO_writePin>
    2276:	80 e0       	ldi	r24, 0x00	; 0
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	a0 e8       	ldi	r26, 0x80	; 128
    227c:	bf e3       	ldi	r27, 0x3F	; 63
    227e:	8f a3       	std	Y+39, r24	; 0x27
    2280:	98 a7       	std	Y+40, r25	; 0x28
    2282:	a9 a7       	std	Y+41, r26	; 0x29
    2284:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2286:	6f a1       	ldd	r22, Y+39	; 0x27
    2288:	78 a5       	ldd	r23, Y+40	; 0x28
    228a:	89 a5       	ldd	r24, Y+41	; 0x29
    228c:	9a a5       	ldd	r25, Y+42	; 0x2a
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	4a ef       	ldi	r20, 0xFA	; 250
    2294:	54 e4       	ldi	r21, 0x44	; 68
    2296:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	8b a3       	std	Y+35, r24	; 0x23
    22a0:	9c a3       	std	Y+36, r25	; 0x24
    22a2:	ad a3       	std	Y+37, r26	; 0x25
    22a4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22a6:	6b a1       	ldd	r22, Y+35	; 0x23
    22a8:	7c a1       	ldd	r23, Y+36	; 0x24
    22aa:	8d a1       	ldd	r24, Y+37	; 0x25
    22ac:	9e a1       	ldd	r25, Y+38	; 0x26
    22ae:	20 e0       	ldi	r18, 0x00	; 0
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	40 e8       	ldi	r20, 0x80	; 128
    22b4:	5f e3       	ldi	r21, 0x3F	; 63
    22b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22ba:	88 23       	and	r24, r24
    22bc:	2c f4       	brge	.+10     	; 0x22c8 <LCD_displayCharacter+0x160>
		__ticks = 1;
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	9a a3       	std	Y+34, r25	; 0x22
    22c4:	89 a3       	std	Y+33, r24	; 0x21
    22c6:	3f c0       	rjmp	.+126    	; 0x2346 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    22c8:	6b a1       	ldd	r22, Y+35	; 0x23
    22ca:	7c a1       	ldd	r23, Y+36	; 0x24
    22cc:	8d a1       	ldd	r24, Y+37	; 0x25
    22ce:	9e a1       	ldd	r25, Y+38	; 0x26
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	3f ef       	ldi	r19, 0xFF	; 255
    22d4:	4f e7       	ldi	r20, 0x7F	; 127
    22d6:	57 e4       	ldi	r21, 0x47	; 71
    22d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22dc:	18 16       	cp	r1, r24
    22de:	4c f5       	brge	.+82     	; 0x2332 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22e0:	6f a1       	ldd	r22, Y+39	; 0x27
    22e2:	78 a5       	ldd	r23, Y+40	; 0x28
    22e4:	89 a5       	ldd	r24, Y+41	; 0x29
    22e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	40 e2       	ldi	r20, 0x20	; 32
    22ee:	51 e4       	ldi	r21, 0x41	; 65
    22f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f4:	dc 01       	movw	r26, r24
    22f6:	cb 01       	movw	r24, r22
    22f8:	bc 01       	movw	r22, r24
    22fa:	cd 01       	movw	r24, r26
    22fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2300:	dc 01       	movw	r26, r24
    2302:	cb 01       	movw	r24, r22
    2304:	9a a3       	std	Y+34, r25	; 0x22
    2306:	89 a3       	std	Y+33, r24	; 0x21
    2308:	0f c0       	rjmp	.+30     	; 0x2328 <LCD_displayCharacter+0x1c0>
    230a:	88 ec       	ldi	r24, 0xC8	; 200
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	98 a3       	std	Y+32, r25	; 0x20
    2310:	8f 8f       	std	Y+31, r24	; 0x1f
    2312:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2314:	98 a1       	ldd	r25, Y+32	; 0x20
    2316:	01 97       	sbiw	r24, 0x01	; 1
    2318:	f1 f7       	brne	.-4      	; 0x2316 <LCD_displayCharacter+0x1ae>
    231a:	98 a3       	std	Y+32, r25	; 0x20
    231c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    231e:	89 a1       	ldd	r24, Y+33	; 0x21
    2320:	9a a1       	ldd	r25, Y+34	; 0x22
    2322:	01 97       	sbiw	r24, 0x01	; 1
    2324:	9a a3       	std	Y+34, r25	; 0x22
    2326:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2328:	89 a1       	ldd	r24, Y+33	; 0x21
    232a:	9a a1       	ldd	r25, Y+34	; 0x22
    232c:	00 97       	sbiw	r24, 0x00	; 0
    232e:	69 f7       	brne	.-38     	; 0x230a <LCD_displayCharacter+0x1a2>
    2330:	14 c0       	rjmp	.+40     	; 0x235a <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2332:	6b a1       	ldd	r22, Y+35	; 0x23
    2334:	7c a1       	ldd	r23, Y+36	; 0x24
    2336:	8d a1       	ldd	r24, Y+37	; 0x25
    2338:	9e a1       	ldd	r25, Y+38	; 0x26
    233a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    233e:	dc 01       	movw	r26, r24
    2340:	cb 01       	movw	r24, r22
    2342:	9a a3       	std	Y+34, r25	; 0x22
    2344:	89 a3       	std	Y+33, r24	; 0x21
    2346:	89 a1       	ldd	r24, Y+33	; 0x21
    2348:	9a a1       	ldd	r25, Y+34	; 0x22
    234a:	9e 8f       	std	Y+30, r25	; 0x1e
    234c:	8d 8f       	std	Y+29, r24	; 0x1d
    234e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2350:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2352:	01 97       	sbiw	r24, 0x01	; 1
    2354:	f1 f7       	brne	.-4      	; 0x2352 <LCD_displayCharacter+0x1ea>
    2356:	9e 8f       	std	Y+30, r25	; 0x1e
    2358:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    235a:	80 e0       	ldi	r24, 0x00	; 0
    235c:	69 ad       	ldd	r22, Y+57	; 0x39
    235e:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <GPIO_writePort>
    2362:	80 e0       	ldi	r24, 0x00	; 0
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	a0 e8       	ldi	r26, 0x80	; 128
    2368:	bf e3       	ldi	r27, 0x3F	; 63
    236a:	89 8f       	std	Y+25, r24	; 0x19
    236c:	9a 8f       	std	Y+26, r25	; 0x1a
    236e:	ab 8f       	std	Y+27, r26	; 0x1b
    2370:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2372:	69 8d       	ldd	r22, Y+25	; 0x19
    2374:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2376:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2378:	9c 8d       	ldd	r25, Y+28	; 0x1c
    237a:	20 e0       	ldi	r18, 0x00	; 0
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	4a ef       	ldi	r20, 0xFA	; 250
    2380:	54 e4       	ldi	r21, 0x44	; 68
    2382:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2386:	dc 01       	movw	r26, r24
    2388:	cb 01       	movw	r24, r22
    238a:	8d 8b       	std	Y+21, r24	; 0x15
    238c:	9e 8b       	std	Y+22, r25	; 0x16
    238e:	af 8b       	std	Y+23, r26	; 0x17
    2390:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2392:	6d 89       	ldd	r22, Y+21	; 0x15
    2394:	7e 89       	ldd	r23, Y+22	; 0x16
    2396:	8f 89       	ldd	r24, Y+23	; 0x17
    2398:	98 8d       	ldd	r25, Y+24	; 0x18
    239a:	20 e0       	ldi	r18, 0x00	; 0
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	40 e8       	ldi	r20, 0x80	; 128
    23a0:	5f e3       	ldi	r21, 0x3F	; 63
    23a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23a6:	88 23       	and	r24, r24
    23a8:	2c f4       	brge	.+10     	; 0x23b4 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	9c 8b       	std	Y+20, r25	; 0x14
    23b0:	8b 8b       	std	Y+19, r24	; 0x13
    23b2:	3f c0       	rjmp	.+126    	; 0x2432 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    23b4:	6d 89       	ldd	r22, Y+21	; 0x15
    23b6:	7e 89       	ldd	r23, Y+22	; 0x16
    23b8:	8f 89       	ldd	r24, Y+23	; 0x17
    23ba:	98 8d       	ldd	r25, Y+24	; 0x18
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	3f ef       	ldi	r19, 0xFF	; 255
    23c0:	4f e7       	ldi	r20, 0x7F	; 127
    23c2:	57 e4       	ldi	r21, 0x47	; 71
    23c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23c8:	18 16       	cp	r1, r24
    23ca:	4c f5       	brge	.+82     	; 0x241e <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23cc:	69 8d       	ldd	r22, Y+25	; 0x19
    23ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	40 e2       	ldi	r20, 0x20	; 32
    23da:	51 e4       	ldi	r21, 0x41	; 65
    23dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	bc 01       	movw	r22, r24
    23e6:	cd 01       	movw	r24, r26
    23e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	9c 8b       	std	Y+20, r25	; 0x14
    23f2:	8b 8b       	std	Y+19, r24	; 0x13
    23f4:	0f c0       	rjmp	.+30     	; 0x2414 <LCD_displayCharacter+0x2ac>
    23f6:	88 ec       	ldi	r24, 0xC8	; 200
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	9a 8b       	std	Y+18, r25	; 0x12
    23fc:	89 8b       	std	Y+17, r24	; 0x11
    23fe:	89 89       	ldd	r24, Y+17	; 0x11
    2400:	9a 89       	ldd	r25, Y+18	; 0x12
    2402:	01 97       	sbiw	r24, 0x01	; 1
    2404:	f1 f7       	brne	.-4      	; 0x2402 <LCD_displayCharacter+0x29a>
    2406:	9a 8b       	std	Y+18, r25	; 0x12
    2408:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    240a:	8b 89       	ldd	r24, Y+19	; 0x13
    240c:	9c 89       	ldd	r25, Y+20	; 0x14
    240e:	01 97       	sbiw	r24, 0x01	; 1
    2410:	9c 8b       	std	Y+20, r25	; 0x14
    2412:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2414:	8b 89       	ldd	r24, Y+19	; 0x13
    2416:	9c 89       	ldd	r25, Y+20	; 0x14
    2418:	00 97       	sbiw	r24, 0x00	; 0
    241a:	69 f7       	brne	.-38     	; 0x23f6 <LCD_displayCharacter+0x28e>
    241c:	14 c0       	rjmp	.+40     	; 0x2446 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    241e:	6d 89       	ldd	r22, Y+21	; 0x15
    2420:	7e 89       	ldd	r23, Y+22	; 0x16
    2422:	8f 89       	ldd	r24, Y+23	; 0x17
    2424:	98 8d       	ldd	r25, Y+24	; 0x18
    2426:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242a:	dc 01       	movw	r26, r24
    242c:	cb 01       	movw	r24, r22
    242e:	9c 8b       	std	Y+20, r25	; 0x14
    2430:	8b 8b       	std	Y+19, r24	; 0x13
    2432:	8b 89       	ldd	r24, Y+19	; 0x13
    2434:	9c 89       	ldd	r25, Y+20	; 0x14
    2436:	98 8b       	std	Y+16, r25	; 0x10
    2438:	8f 87       	std	Y+15, r24	; 0x0f
    243a:	8f 85       	ldd	r24, Y+15	; 0x0f
    243c:	98 89       	ldd	r25, Y+16	; 0x10
    243e:	01 97       	sbiw	r24, 0x01	; 1
    2440:	f1 f7       	brne	.-4      	; 0x243e <LCD_displayCharacter+0x2d6>
    2442:	98 8b       	std	Y+16, r25	; 0x10
    2444:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	65 e0       	ldi	r22, 0x05	; 5
    244a:	40 e0       	ldi	r20, 0x00	; 0
    244c:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <GPIO_writePin>
    2450:	80 e0       	ldi	r24, 0x00	; 0
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	a0 e8       	ldi	r26, 0x80	; 128
    2456:	bf e3       	ldi	r27, 0x3F	; 63
    2458:	8b 87       	std	Y+11, r24	; 0x0b
    245a:	9c 87       	std	Y+12, r25	; 0x0c
    245c:	ad 87       	std	Y+13, r26	; 0x0d
    245e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2460:	6b 85       	ldd	r22, Y+11	; 0x0b
    2462:	7c 85       	ldd	r23, Y+12	; 0x0c
    2464:	8d 85       	ldd	r24, Y+13	; 0x0d
    2466:	9e 85       	ldd	r25, Y+14	; 0x0e
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	4a ef       	ldi	r20, 0xFA	; 250
    246e:	54 e4       	ldi	r21, 0x44	; 68
    2470:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2474:	dc 01       	movw	r26, r24
    2476:	cb 01       	movw	r24, r22
    2478:	8f 83       	std	Y+7, r24	; 0x07
    247a:	98 87       	std	Y+8, r25	; 0x08
    247c:	a9 87       	std	Y+9, r26	; 0x09
    247e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2480:	6f 81       	ldd	r22, Y+7	; 0x07
    2482:	78 85       	ldd	r23, Y+8	; 0x08
    2484:	89 85       	ldd	r24, Y+9	; 0x09
    2486:	9a 85       	ldd	r25, Y+10	; 0x0a
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	40 e8       	ldi	r20, 0x80	; 128
    248e:	5f e3       	ldi	r21, 0x3F	; 63
    2490:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2494:	88 23       	and	r24, r24
    2496:	2c f4       	brge	.+10     	; 0x24a2 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2498:	81 e0       	ldi	r24, 0x01	; 1
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	9e 83       	std	Y+6, r25	; 0x06
    249e:	8d 83       	std	Y+5, r24	; 0x05
    24a0:	3f c0       	rjmp	.+126    	; 0x2520 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    24a2:	6f 81       	ldd	r22, Y+7	; 0x07
    24a4:	78 85       	ldd	r23, Y+8	; 0x08
    24a6:	89 85       	ldd	r24, Y+9	; 0x09
    24a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24aa:	20 e0       	ldi	r18, 0x00	; 0
    24ac:	3f ef       	ldi	r19, 0xFF	; 255
    24ae:	4f e7       	ldi	r20, 0x7F	; 127
    24b0:	57 e4       	ldi	r21, 0x47	; 71
    24b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24b6:	18 16       	cp	r1, r24
    24b8:	4c f5       	brge	.+82     	; 0x250c <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    24bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    24be:	8d 85       	ldd	r24, Y+13	; 0x0d
    24c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    24c2:	20 e0       	ldi	r18, 0x00	; 0
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	40 e2       	ldi	r20, 0x20	; 32
    24c8:	51 e4       	ldi	r21, 0x41	; 65
    24ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ce:	dc 01       	movw	r26, r24
    24d0:	cb 01       	movw	r24, r22
    24d2:	bc 01       	movw	r22, r24
    24d4:	cd 01       	movw	r24, r26
    24d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24da:	dc 01       	movw	r26, r24
    24dc:	cb 01       	movw	r24, r22
    24de:	9e 83       	std	Y+6, r25	; 0x06
    24e0:	8d 83       	std	Y+5, r24	; 0x05
    24e2:	0f c0       	rjmp	.+30     	; 0x2502 <LCD_displayCharacter+0x39a>
    24e4:	88 ec       	ldi	r24, 0xC8	; 200
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	9c 83       	std	Y+4, r25	; 0x04
    24ea:	8b 83       	std	Y+3, r24	; 0x03
    24ec:	8b 81       	ldd	r24, Y+3	; 0x03
    24ee:	9c 81       	ldd	r25, Y+4	; 0x04
    24f0:	01 97       	sbiw	r24, 0x01	; 1
    24f2:	f1 f7       	brne	.-4      	; 0x24f0 <LCD_displayCharacter+0x388>
    24f4:	9c 83       	std	Y+4, r25	; 0x04
    24f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24f8:	8d 81       	ldd	r24, Y+5	; 0x05
    24fa:	9e 81       	ldd	r25, Y+6	; 0x06
    24fc:	01 97       	sbiw	r24, 0x01	; 1
    24fe:	9e 83       	std	Y+6, r25	; 0x06
    2500:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2502:	8d 81       	ldd	r24, Y+5	; 0x05
    2504:	9e 81       	ldd	r25, Y+6	; 0x06
    2506:	00 97       	sbiw	r24, 0x00	; 0
    2508:	69 f7       	brne	.-38     	; 0x24e4 <LCD_displayCharacter+0x37c>
    250a:	14 c0       	rjmp	.+40     	; 0x2534 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    250c:	6f 81       	ldd	r22, Y+7	; 0x07
    250e:	78 85       	ldd	r23, Y+8	; 0x08
    2510:	89 85       	ldd	r24, Y+9	; 0x09
    2512:	9a 85       	ldd	r25, Y+10	; 0x0a
    2514:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2518:	dc 01       	movw	r26, r24
    251a:	cb 01       	movw	r24, r22
    251c:	9e 83       	std	Y+6, r25	; 0x06
    251e:	8d 83       	std	Y+5, r24	; 0x05
    2520:	8d 81       	ldd	r24, Y+5	; 0x05
    2522:	9e 81       	ldd	r25, Y+6	; 0x06
    2524:	9a 83       	std	Y+2, r25	; 0x02
    2526:	89 83       	std	Y+1, r24	; 0x01
    2528:	89 81       	ldd	r24, Y+1	; 0x01
    252a:	9a 81       	ldd	r25, Y+2	; 0x02
    252c:	01 97       	sbiw	r24, 0x01	; 1
    252e:	f1 f7       	brne	.-4      	; 0x252c <LCD_displayCharacter+0x3c4>
    2530:	9a 83       	std	Y+2, r25	; 0x02
    2532:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2534:	e9 96       	adiw	r28, 0x39	; 57
    2536:	0f b6       	in	r0, 0x3f	; 63
    2538:	f8 94       	cli
    253a:	de bf       	out	0x3e, r29	; 62
    253c:	0f be       	out	0x3f, r0	; 63
    253e:	cd bf       	out	0x3d, r28	; 61
    2540:	cf 91       	pop	r28
    2542:	df 91       	pop	r29
    2544:	08 95       	ret

00002546 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2546:	df 93       	push	r29
    2548:	cf 93       	push	r28
    254a:	00 d0       	rcall	.+0      	; 0x254c <LCD_displayString+0x6>
    254c:	0f 92       	push	r0
    254e:	cd b7       	in	r28, 0x3d	; 61
    2550:	de b7       	in	r29, 0x3e	; 62
    2552:	9b 83       	std	Y+3, r25	; 0x03
    2554:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2556:	19 82       	std	Y+1, r1	; 0x01
    2558:	0e c0       	rjmp	.+28     	; 0x2576 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    255a:	89 81       	ldd	r24, Y+1	; 0x01
    255c:	28 2f       	mov	r18, r24
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	8a 81       	ldd	r24, Y+2	; 0x02
    2562:	9b 81       	ldd	r25, Y+3	; 0x03
    2564:	fc 01       	movw	r30, r24
    2566:	e2 0f       	add	r30, r18
    2568:	f3 1f       	adc	r31, r19
    256a:	80 81       	ld	r24, Z
    256c:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_displayCharacter>
		i++;
    2570:	89 81       	ldd	r24, Y+1	; 0x01
    2572:	8f 5f       	subi	r24, 0xFF	; 255
    2574:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2576:	89 81       	ldd	r24, Y+1	; 0x01
    2578:	28 2f       	mov	r18, r24
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	8a 81       	ldd	r24, Y+2	; 0x02
    257e:	9b 81       	ldd	r25, Y+3	; 0x03
    2580:	fc 01       	movw	r30, r24
    2582:	e2 0f       	add	r30, r18
    2584:	f3 1f       	adc	r31, r19
    2586:	80 81       	ld	r24, Z
    2588:	88 23       	and	r24, r24
    258a:	39 f7       	brne	.-50     	; 0x255a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	 *********************************************************/
}
    258c:	0f 90       	pop	r0
    258e:	0f 90       	pop	r0
    2590:	0f 90       	pop	r0
    2592:	cf 91       	pop	r28
    2594:	df 91       	pop	r29
    2596:	08 95       	ret

00002598 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2598:	df 93       	push	r29
    259a:	cf 93       	push	r28
    259c:	00 d0       	rcall	.+0      	; 0x259e <LCD_moveCursor+0x6>
    259e:	00 d0       	rcall	.+0      	; 0x25a0 <LCD_moveCursor+0x8>
    25a0:	0f 92       	push	r0
    25a2:	cd b7       	in	r28, 0x3d	; 61
    25a4:	de b7       	in	r29, 0x3e	; 62
    25a6:	8a 83       	std	Y+2, r24	; 0x02
    25a8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    25aa:	8a 81       	ldd	r24, Y+2	; 0x02
    25ac:	28 2f       	mov	r18, r24
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	3d 83       	std	Y+5, r19	; 0x05
    25b2:	2c 83       	std	Y+4, r18	; 0x04
    25b4:	8c 81       	ldd	r24, Y+4	; 0x04
    25b6:	9d 81       	ldd	r25, Y+5	; 0x05
    25b8:	81 30       	cpi	r24, 0x01	; 1
    25ba:	91 05       	cpc	r25, r1
    25bc:	c1 f0       	breq	.+48     	; 0x25ee <LCD_moveCursor+0x56>
    25be:	2c 81       	ldd	r18, Y+4	; 0x04
    25c0:	3d 81       	ldd	r19, Y+5	; 0x05
    25c2:	22 30       	cpi	r18, 0x02	; 2
    25c4:	31 05       	cpc	r19, r1
    25c6:	2c f4       	brge	.+10     	; 0x25d2 <LCD_moveCursor+0x3a>
    25c8:	8c 81       	ldd	r24, Y+4	; 0x04
    25ca:	9d 81       	ldd	r25, Y+5	; 0x05
    25cc:	00 97       	sbiw	r24, 0x00	; 0
    25ce:	61 f0       	breq	.+24     	; 0x25e8 <LCD_moveCursor+0x50>
    25d0:	19 c0       	rjmp	.+50     	; 0x2604 <LCD_moveCursor+0x6c>
    25d2:	2c 81       	ldd	r18, Y+4	; 0x04
    25d4:	3d 81       	ldd	r19, Y+5	; 0x05
    25d6:	22 30       	cpi	r18, 0x02	; 2
    25d8:	31 05       	cpc	r19, r1
    25da:	69 f0       	breq	.+26     	; 0x25f6 <LCD_moveCursor+0x5e>
    25dc:	8c 81       	ldd	r24, Y+4	; 0x04
    25de:	9d 81       	ldd	r25, Y+5	; 0x05
    25e0:	83 30       	cpi	r24, 0x03	; 3
    25e2:	91 05       	cpc	r25, r1
    25e4:	61 f0       	breq	.+24     	; 0x25fe <LCD_moveCursor+0x66>
    25e6:	0e c0       	rjmp	.+28     	; 0x2604 <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address=col;
    25e8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ea:	89 83       	std	Y+1, r24	; 0x01
    25ec:	0b c0       	rjmp	.+22     	; 0x2604 <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address=col+0x40;
    25ee:	8b 81       	ldd	r24, Y+3	; 0x03
    25f0:	80 5c       	subi	r24, 0xC0	; 192
    25f2:	89 83       	std	Y+1, r24	; 0x01
    25f4:	07 c0       	rjmp	.+14     	; 0x2604 <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address=col+0x10;
    25f6:	8b 81       	ldd	r24, Y+3	; 0x03
    25f8:	80 5f       	subi	r24, 0xF0	; 240
    25fa:	89 83       	std	Y+1, r24	; 0x01
    25fc:	03 c0       	rjmp	.+6      	; 0x2604 <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address=col+0x50;
    25fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2600:	80 5b       	subi	r24, 0xB0	; 176
    2602:	89 83       	std	Y+1, r24	; 0x01
		break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2604:	89 81       	ldd	r24, Y+1	; 0x01
    2606:	80 68       	ori	r24, 0x80	; 128
    2608:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <LCD_sendCommand>
}
    260c:	0f 90       	pop	r0
    260e:	0f 90       	pop	r0
    2610:	0f 90       	pop	r0
    2612:	0f 90       	pop	r0
    2614:	0f 90       	pop	r0
    2616:	cf 91       	pop	r28
    2618:	df 91       	pop	r29
    261a:	08 95       	ret

0000261c <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    261c:	df 93       	push	r29
    261e:	cf 93       	push	r28
    2620:	00 d0       	rcall	.+0      	; 0x2622 <LCD_displayStringRowColumn+0x6>
    2622:	00 d0       	rcall	.+0      	; 0x2624 <LCD_displayStringRowColumn+0x8>
    2624:	cd b7       	in	r28, 0x3d	; 61
    2626:	de b7       	in	r29, 0x3e	; 62
    2628:	89 83       	std	Y+1, r24	; 0x01
    262a:	6a 83       	std	Y+2, r22	; 0x02
    262c:	5c 83       	std	Y+4, r21	; 0x04
    262e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2630:	89 81       	ldd	r24, Y+1	; 0x01
    2632:	6a 81       	ldd	r22, Y+2	; 0x02
    2634:	0e 94 cc 12 	call	0x2598	; 0x2598 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2638:	8b 81       	ldd	r24, Y+3	; 0x03
    263a:	9c 81       	ldd	r25, Y+4	; 0x04
    263c:	0e 94 a3 12 	call	0x2546	; 0x2546 <LCD_displayString>
}
    2640:	0f 90       	pop	r0
    2642:	0f 90       	pop	r0
    2644:	0f 90       	pop	r0
    2646:	0f 90       	pop	r0
    2648:	cf 91       	pop	r28
    264a:	df 91       	pop	r29
    264c:	08 95       	ret

0000264e <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    264e:	df 93       	push	r29
    2650:	cf 93       	push	r28
    2652:	cd b7       	in	r28, 0x3d	; 61
    2654:	de b7       	in	r29, 0x3e	; 62
    2656:	62 97       	sbiw	r28, 0x12	; 18
    2658:	0f b6       	in	r0, 0x3f	; 63
    265a:	f8 94       	cli
    265c:	de bf       	out	0x3e, r29	; 62
    265e:	0f be       	out	0x3f, r0	; 63
    2660:	cd bf       	out	0x3d, r28	; 61
    2662:	9a 8b       	std	Y+18, r25	; 0x12
    2664:	89 8b       	std	Y+17, r24	; 0x11
	uint8 buff[16]; /* String to hold the ascii result */
	itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2666:	89 89       	ldd	r24, Y+17	; 0x11
    2668:	9a 89       	ldd	r25, Y+18	; 0x12
    266a:	9e 01       	movw	r18, r28
    266c:	2f 5f       	subi	r18, 0xFF	; 255
    266e:	3f 4f       	sbci	r19, 0xFF	; 255
    2670:	b9 01       	movw	r22, r18
    2672:	4a e0       	ldi	r20, 0x0A	; 10
    2674:	50 e0       	ldi	r21, 0x00	; 0
    2676:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <itoa>
	LCD_displayString(buff); /* Display the string */
    267a:	ce 01       	movw	r24, r28
    267c:	01 96       	adiw	r24, 0x01	; 1
    267e:	0e 94 a3 12 	call	0x2546	; 0x2546 <LCD_displayString>
}
    2682:	62 96       	adiw	r28, 0x12	; 18
    2684:	0f b6       	in	r0, 0x3f	; 63
    2686:	f8 94       	cli
    2688:	de bf       	out	0x3e, r29	; 62
    268a:	0f be       	out	0x3f, r0	; 63
    268c:	cd bf       	out	0x3d, r28	; 61
    268e:	cf 91       	pop	r28
    2690:	df 91       	pop	r29
    2692:	08 95       	ret

00002694 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2694:	df 93       	push	r29
    2696:	cf 93       	push	r28
    2698:	cd b7       	in	r28, 0x3d	; 61
    269a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <LCD_sendCommand>
}
    26a2:	cf 91       	pop	r28
    26a4:	df 91       	pop	r29
    26a6:	08 95       	ret

000026a8 <PWM_Timer0_Start>:
 * F_PWM=(F_CPU)/(256*N) = (10^6)/(256*8) = 500Hz
 * Duty Cycle can be changed by updating the value
 * in The Compare Register
 */
void PWM_Timer0_Start(uint8 duty_cycle)
{
    26a8:	df 93       	push	r29
    26aa:	cf 93       	push	r28
    26ac:	0f 92       	push	r0
    26ae:	cd b7       	in	r28, 0x3d	; 61
    26b0:	de b7       	in	r29, 0x3e	; 62
    26b2:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0; // Set Timer Initial Value to 0
    26b4:	e2 e5       	ldi	r30, 0x52	; 82
    26b6:	f0 e0       	ldi	r31, 0x00	; 0
    26b8:	10 82       	st	Z, r1

	OCR0  = (duty_cycle*255)/100; //Set Compare value
    26ba:	ec e5       	ldi	r30, 0x5C	; 92
    26bc:	f0 e0       	ldi	r31, 0x00	; 0
    26be:	89 81       	ldd	r24, Y+1	; 0x01
    26c0:	48 2f       	mov	r20, r24
    26c2:	50 e0       	ldi	r21, 0x00	; 0
    26c4:	ca 01       	movw	r24, r20
    26c6:	9c 01       	movw	r18, r24
    26c8:	22 0f       	add	r18, r18
    26ca:	33 1f       	adc	r19, r19
    26cc:	c9 01       	movw	r24, r18
    26ce:	96 95       	lsr	r25
    26d0:	98 2f       	mov	r25, r24
    26d2:	88 27       	eor	r24, r24
    26d4:	97 95       	ror	r25
    26d6:	87 95       	ror	r24
    26d8:	82 1b       	sub	r24, r18
    26da:	93 0b       	sbc	r25, r19
    26dc:	84 0f       	add	r24, r20
    26de:	95 1f       	adc	r25, r21
    26e0:	24 e6       	ldi	r18, 0x64	; 100
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	b9 01       	movw	r22, r18
    26e6:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__divmodhi4>
    26ea:	cb 01       	movw	r24, r22
    26ec:	80 83       	st	Z, r24

	GPIO_setupPinDirection(PWM_PORT_ID, PWM_PIN_ID, PIN_OUTPUT); // Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC
    26ee:	81 e0       	ldi	r24, 0x01	; 1
    26f0:	63 e0       	ldi	r22, 0x03	; 3
    26f2:	41 e0       	ldi	r20, 0x01	; 1
    26f4:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    26f8:	e3 e5       	ldi	r30, 0x53	; 83
    26fa:	f0 e0       	ldi	r31, 0x00	; 0
    26fc:	8a e6       	ldi	r24, 0x6A	; 106
    26fe:	80 83       	st	Z, r24


}
    2700:	0f 90       	pop	r0
    2702:	cf 91       	pop	r28
    2704:	df 91       	pop	r29
    2706:	08 95       	ret

00002708 <__vector_9>:
static volatile void (*g_CallBackPtr)(void) = NULL_PTR;




ISR(TIMER1_OVF_vect){
    2708:	1f 92       	push	r1
    270a:	0f 92       	push	r0
    270c:	0f b6       	in	r0, 0x3f	; 63
    270e:	0f 92       	push	r0
    2710:	11 24       	eor	r1, r1
    2712:	2f 93       	push	r18
    2714:	3f 93       	push	r19
    2716:	4f 93       	push	r20
    2718:	5f 93       	push	r21
    271a:	6f 93       	push	r22
    271c:	7f 93       	push	r23
    271e:	8f 93       	push	r24
    2720:	9f 93       	push	r25
    2722:	af 93       	push	r26
    2724:	bf 93       	push	r27
    2726:	ef 93       	push	r30
    2728:	ff 93       	push	r31
    272a:	df 93       	push	r29
    272c:	cf 93       	push	r28
    272e:	cd b7       	in	r28, 0x3d	; 61
    2730:	de b7       	in	r29, 0x3e	; 62

	(*g_CallBackPtr)();
    2732:	e0 91 88 00 	lds	r30, 0x0088
    2736:	f0 91 89 00 	lds	r31, 0x0089
    273a:	09 95       	icall
}
    273c:	cf 91       	pop	r28
    273e:	df 91       	pop	r29
    2740:	ff 91       	pop	r31
    2742:	ef 91       	pop	r30
    2744:	bf 91       	pop	r27
    2746:	af 91       	pop	r26
    2748:	9f 91       	pop	r25
    274a:	8f 91       	pop	r24
    274c:	7f 91       	pop	r23
    274e:	6f 91       	pop	r22
    2750:	5f 91       	pop	r21
    2752:	4f 91       	pop	r20
    2754:	3f 91       	pop	r19
    2756:	2f 91       	pop	r18
    2758:	0f 90       	pop	r0
    275a:	0f be       	out	0x3f, r0	; 63
    275c:	0f 90       	pop	r0
    275e:	1f 90       	pop	r1
    2760:	18 95       	reti

00002762 <__vector_7>:

ISR(TIMER1_COMPA_vect){
    2762:	1f 92       	push	r1
    2764:	0f 92       	push	r0
    2766:	0f b6       	in	r0, 0x3f	; 63
    2768:	0f 92       	push	r0
    276a:	11 24       	eor	r1, r1
    276c:	2f 93       	push	r18
    276e:	3f 93       	push	r19
    2770:	4f 93       	push	r20
    2772:	5f 93       	push	r21
    2774:	6f 93       	push	r22
    2776:	7f 93       	push	r23
    2778:	8f 93       	push	r24
    277a:	9f 93       	push	r25
    277c:	af 93       	push	r26
    277e:	bf 93       	push	r27
    2780:	ef 93       	push	r30
    2782:	ff 93       	push	r31
    2784:	df 93       	push	r29
    2786:	cf 93       	push	r28
    2788:	cd b7       	in	r28, 0x3d	; 61
    278a:	de b7       	in	r29, 0x3e	; 62

	(*g_CallBackPtr)();
    278c:	e0 91 88 00 	lds	r30, 0x0088
    2790:	f0 91 89 00 	lds	r31, 0x0089
    2794:	09 95       	icall

}
    2796:	cf 91       	pop	r28
    2798:	df 91       	pop	r29
    279a:	ff 91       	pop	r31
    279c:	ef 91       	pop	r30
    279e:	bf 91       	pop	r27
    27a0:	af 91       	pop	r26
    27a2:	9f 91       	pop	r25
    27a4:	8f 91       	pop	r24
    27a6:	7f 91       	pop	r23
    27a8:	6f 91       	pop	r22
    27aa:	5f 91       	pop	r21
    27ac:	4f 91       	pop	r20
    27ae:	3f 91       	pop	r19
    27b0:	2f 91       	pop	r18
    27b2:	0f 90       	pop	r0
    27b4:	0f be       	out	0x3f, r0	; 63
    27b6:	0f 90       	pop	r0
    27b8:	1f 90       	pop	r1
    27ba:	18 95       	reti

000027bc <Timer1_init>:

void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    27bc:	df 93       	push	r29
    27be:	cf 93       	push	r28
    27c0:	00 d0       	rcall	.+0      	; 0x27c2 <Timer1_init+0x6>
    27c2:	cd b7       	in	r28, 0x3d	; 61
    27c4:	de b7       	in	r29, 0x3e	; 62
    27c6:	9a 83       	std	Y+2, r25	; 0x02
    27c8:	89 83       	std	Y+1, r24	; 0x01


	TCCR1A |= (1<<FOC1A);
    27ca:	af e4       	ldi	r26, 0x4F	; 79
    27cc:	b0 e0       	ldi	r27, 0x00	; 0
    27ce:	ef e4       	ldi	r30, 0x4F	; 79
    27d0:	f0 e0       	ldi	r31, 0x00	; 0
    27d2:	80 81       	ld	r24, Z
    27d4:	88 60       	ori	r24, 0x08	; 8
    27d6:	8c 93       	st	X, r24
	TCCR1A |= (1<<FOC1B);
    27d8:	af e4       	ldi	r26, 0x4F	; 79
    27da:	b0 e0       	ldi	r27, 0x00	; 0
    27dc:	ef e4       	ldi	r30, 0x4F	; 79
    27de:	f0 e0       	ldi	r31, 0x00	; 0
    27e0:	80 81       	ld	r24, Z
    27e2:	84 60       	ori	r24, 0x04	; 4
    27e4:	8c 93       	st	X, r24

	if(Config_Ptr->mode == NORMAL){
    27e6:	e9 81       	ldd	r30, Y+1	; 0x01
    27e8:	fa 81       	ldd	r31, Y+2	; 0x02
    27ea:	85 81       	ldd	r24, Z+5	; 0x05
    27ec:	88 23       	and	r24, r24
    27ee:	41 f4       	brne	.+16     	; 0x2800 <Timer1_init+0x44>

		TIMSK |= (1<<TOIE1);
    27f0:	a9 e5       	ldi	r26, 0x59	; 89
    27f2:	b0 e0       	ldi	r27, 0x00	; 0
    27f4:	e9 e5       	ldi	r30, 0x59	; 89
    27f6:	f0 e0       	ldi	r31, 0x00	; 0
    27f8:	80 81       	ld	r24, Z
    27fa:	84 60       	ori	r24, 0x04	; 4
    27fc:	8c 93       	st	X, r24
    27fe:	13 c0       	rjmp	.+38     	; 0x2826 <Timer1_init+0x6a>
	}
	else if(Config_Ptr->mode == CTC_OCR){
    2800:	e9 81       	ldd	r30, Y+1	; 0x01
    2802:	fa 81       	ldd	r31, Y+2	; 0x02
    2804:	85 81       	ldd	r24, Z+5	; 0x05
    2806:	84 30       	cpi	r24, 0x04	; 4
    2808:	71 f4       	brne	.+28     	; 0x2826 <Timer1_init+0x6a>

		TCCR1B|=(1<<WGM12);
    280a:	ae e4       	ldi	r26, 0x4E	; 78
    280c:	b0 e0       	ldi	r27, 0x00	; 0
    280e:	ee e4       	ldi	r30, 0x4E	; 78
    2810:	f0 e0       	ldi	r31, 0x00	; 0
    2812:	80 81       	ld	r24, Z
    2814:	88 60       	ori	r24, 0x08	; 8
    2816:	8c 93       	st	X, r24


		TIMSK |= (1<<OCIE1A);
    2818:	a9 e5       	ldi	r26, 0x59	; 89
    281a:	b0 e0       	ldi	r27, 0x00	; 0
    281c:	e9 e5       	ldi	r30, 0x59	; 89
    281e:	f0 e0       	ldi	r31, 0x00	; 0
    2820:	80 81       	ld	r24, Z
    2822:	80 61       	ori	r24, 0x10	; 16
    2824:	8c 93       	st	X, r24

	}

	TCCR1B |= ( ( (Config_Ptr->prescaler&0x1) >>0) <<CS10)
    2826:	ae e4       	ldi	r26, 0x4E	; 78
    2828:	b0 e0       	ldi	r27, 0x00	; 0
    282a:	ee e4       	ldi	r30, 0x4E	; 78
    282c:	f0 e0       	ldi	r31, 0x00	; 0
    282e:	80 81       	ld	r24, Z
    2830:	98 2f       	mov	r25, r24
    2832:	e9 81       	ldd	r30, Y+1	; 0x01
    2834:	fa 81       	ldd	r31, Y+2	; 0x02
    2836:	84 81       	ldd	r24, Z+4	; 0x04
    2838:	87 70       	andi	r24, 0x07	; 7
    283a:	89 2b       	or	r24, r25
    283c:	8c 93       	st	X, r24
		     |( ( (Config_Ptr->prescaler&0x2) >>1) <<CS11)
		     |( ( (Config_Ptr->prescaler&0x4) >>2) <<CS12);

	TCNT1 = Config_Ptr->initial_value;
    283e:	ac e4       	ldi	r26, 0x4C	; 76
    2840:	b0 e0       	ldi	r27, 0x00	; 0
    2842:	e9 81       	ldd	r30, Y+1	; 0x01
    2844:	fa 81       	ldd	r31, Y+2	; 0x02
    2846:	80 81       	ld	r24, Z
    2848:	91 81       	ldd	r25, Z+1	; 0x01
    284a:	11 96       	adiw	r26, 0x01	; 1
    284c:	9c 93       	st	X, r25
    284e:	8e 93       	st	-X, r24

	if(Config_Ptr->mode == CTC_OCR){
    2850:	e9 81       	ldd	r30, Y+1	; 0x01
    2852:	fa 81       	ldd	r31, Y+2	; 0x02
    2854:	85 81       	ldd	r24, Z+5	; 0x05
    2856:	84 30       	cpi	r24, 0x04	; 4
    2858:	51 f4       	brne	.+20     	; 0x286e <Timer1_init+0xb2>
		OCR1A = Config_Ptr->compare_value;
    285a:	ea e4       	ldi	r30, 0x4A	; 74
    285c:	f0 e0       	ldi	r31, 0x00	; 0
    285e:	a9 81       	ldd	r26, Y+1	; 0x01
    2860:	ba 81       	ldd	r27, Y+2	; 0x02
    2862:	12 96       	adiw	r26, 0x02	; 2
    2864:	8d 91       	ld	r24, X+
    2866:	9c 91       	ld	r25, X
    2868:	13 97       	sbiw	r26, 0x03	; 3
    286a:	91 83       	std	Z+1, r25	; 0x01
    286c:	80 83       	st	Z, r24
	//			SET_BIT(TIMSK,TOIE1);
	//		}
	//		else if(Config_Ptr->mode == CTC_OCR){
	//			SET_BIT(TIMSK,OCIE1A);
	//		}
	SREG |= (1<<7);
    286e:	af e5       	ldi	r26, 0x5F	; 95
    2870:	b0 e0       	ldi	r27, 0x00	; 0
    2872:	ef e5       	ldi	r30, 0x5F	; 95
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	80 81       	ld	r24, Z
    2878:	80 68       	ori	r24, 0x80	; 128
    287a:	8c 93       	st	X, r24
}
    287c:	0f 90       	pop	r0
    287e:	0f 90       	pop	r0
    2880:	cf 91       	pop	r28
    2882:	df 91       	pop	r29
    2884:	08 95       	ret

00002886 <Timer1_deInit>:


void Timer1_deInit(void){
    2886:	df 93       	push	r29
    2888:	cf 93       	push	r28
    288a:	0f 92       	push	r0
    288c:	cd b7       	in	r28, 0x3d	; 61
    288e:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    2890:	ef e4       	ldi	r30, 0x4F	; 79
    2892:	f0 e0       	ldi	r31, 0x00	; 0
    2894:	10 82       	st	Z, r1
	TCCR1B = 0;
    2896:	ee e4       	ldi	r30, 0x4E	; 78
    2898:	f0 e0       	ldi	r31, 0x00	; 0
    289a:	10 82       	st	Z, r1
	TCNT1 = 0;
    289c:	ec e4       	ldi	r30, 0x4C	; 76
    289e:	f0 e0       	ldi	r31, 0x00	; 0
    28a0:	11 82       	std	Z+1, r1	; 0x01
    28a2:	10 82       	st	Z, r1
	OCR1A = 0;
    28a4:	ea e4       	ldi	r30, 0x4A	; 74
    28a6:	f0 e0       	ldi	r31, 0x00	; 0
    28a8:	11 82       	std	Z+1, r1	; 0x01
    28aa:	10 82       	st	Z, r1
	TIMSK &= 0x3c;
    28ac:	a9 e5       	ldi	r26, 0x59	; 89
    28ae:	b0 e0       	ldi	r27, 0x00	; 0
    28b0:	e9 e5       	ldi	r30, 0x59	; 89
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	80 81       	ld	r24, Z
    28b6:	8c 73       	andi	r24, 0x3C	; 60
    28b8:	8c 93       	st	X, r24
	SREG &= (0<<7);
    28ba:	ef e5       	ldi	r30, 0x5F	; 95
    28bc:	f0 e0       	ldi	r31, 0x00	; 0
    28be:	80 81       	ld	r24, Z
    28c0:	ef e5       	ldi	r30, 0x5F	; 95
    28c2:	f0 e0       	ldi	r31, 0x00	; 0
    28c4:	10 82       	st	Z, r1
	g_CallBackPtr = NULL_PTR;
    28c6:	10 92 89 00 	sts	0x0089, r1
    28ca:	10 92 88 00 	sts	0x0088, r1
}
    28ce:	0f 90       	pop	r0
    28d0:	cf 91       	pop	r28
    28d2:	df 91       	pop	r29
    28d4:	08 95       	ret

000028d6 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void)){
    28d6:	df 93       	push	r29
    28d8:	cf 93       	push	r28
    28da:	00 d0       	rcall	.+0      	; 0x28dc <Timer1_setCallBack+0x6>
    28dc:	cd b7       	in	r28, 0x3d	; 61
    28de:	de b7       	in	r29, 0x3e	; 62
    28e0:	9a 83       	std	Y+2, r25	; 0x02
    28e2:	89 83       	std	Y+1, r24	; 0x01
	g_CallBackPtr = a_ptr;
    28e4:	89 81       	ldd	r24, Y+1	; 0x01
    28e6:	9a 81       	ldd	r25, Y+2	; 0x02
    28e8:	90 93 89 00 	sts	0x0089, r25
    28ec:	80 93 88 00 	sts	0x0088, r24
}
    28f0:	0f 90       	pop	r0
    28f2:	0f 90       	pop	r0
    28f4:	cf 91       	pop	r28
    28f6:	df 91       	pop	r29
    28f8:	08 95       	ret

000028fa <TWI_init>:
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
//void TWI_init(void)
{
    28fa:	df 93       	push	r29
    28fc:	cf 93       	push	r28
    28fe:	00 d0       	rcall	.+0      	; 0x2900 <TWI_init+0x6>
    2900:	cd b7       	in	r28, 0x3d	; 61
    2902:	de b7       	in	r29, 0x3e	; 62
    2904:	9a 83       	std	Y+2, r25	; 0x02
    2906:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    //TWBR = 0x02;
	TWBR = Config_Ptr->bit_rate;
    2908:	a0 e2       	ldi	r26, 0x20	; 32
    290a:	b0 e0       	ldi	r27, 0x00	; 0
    290c:	e9 81       	ldd	r30, Y+1	; 0x01
    290e:	fa 81       	ldd	r31, Y+2	; 0x02
    2910:	80 81       	ld	r24, Z
    2912:	8c 93       	st	X, r24
	
    TWSR = 0x00;
    2914:	e1 e2       	ldi	r30, 0x21	; 33
    2916:	f0 e0       	ldi	r31, 0x00	; 0
    2918:	10 82       	st	Z, r1

    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
   // TWAR = 0b00000010; // my address = 0x01 :)
    TWAR =Config_Ptr->address;
    291a:	a2 e2       	ldi	r26, 0x22	; 34
    291c:	b0 e0       	ldi	r27, 0x00	; 0
    291e:	e9 81       	ldd	r30, Y+1	; 0x01
    2920:	fa 81       	ldd	r31, Y+2	; 0x02
    2922:	81 81       	ldd	r24, Z+1	; 0x01
    2924:	92 81       	ldd	r25, Z+2	; 0x02
    2926:	8c 93       	st	X, r24

    TWCR = (1<<TWEN); /* enable TWI */
    2928:	e6 e5       	ldi	r30, 0x56	; 86
    292a:	f0 e0       	ldi	r31, 0x00	; 0
    292c:	84 e0       	ldi	r24, 0x04	; 4
    292e:	80 83       	st	Z, r24
}
    2930:	0f 90       	pop	r0
    2932:	0f 90       	pop	r0
    2934:	cf 91       	pop	r28
    2936:	df 91       	pop	r29
    2938:	08 95       	ret

0000293a <TWI_start>:

void TWI_start(void)
{
    293a:	df 93       	push	r29
    293c:	cf 93       	push	r28
    293e:	cd b7       	in	r28, 0x3d	; 61
    2940:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2942:	e6 e5       	ldi	r30, 0x56	; 86
    2944:	f0 e0       	ldi	r31, 0x00	; 0
    2946:	84 ea       	ldi	r24, 0xA4	; 164
    2948:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    294a:	e6 e5       	ldi	r30, 0x56	; 86
    294c:	f0 e0       	ldi	r31, 0x00	; 0
    294e:	80 81       	ld	r24, Z
    2950:	88 23       	and	r24, r24
    2952:	dc f7       	brge	.-10     	; 0x294a <TWI_start+0x10>
}
    2954:	cf 91       	pop	r28
    2956:	df 91       	pop	r29
    2958:	08 95       	ret

0000295a <TWI_stop>:

void TWI_stop(void)
{
    295a:	df 93       	push	r29
    295c:	cf 93       	push	r28
    295e:	cd b7       	in	r28, 0x3d	; 61
    2960:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2962:	e6 e5       	ldi	r30, 0x56	; 86
    2964:	f0 e0       	ldi	r31, 0x00	; 0
    2966:	84 e9       	ldi	r24, 0x94	; 148
    2968:	80 83       	st	Z, r24
}
    296a:	cf 91       	pop	r28
    296c:	df 91       	pop	r29
    296e:	08 95       	ret

00002970 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2970:	df 93       	push	r29
    2972:	cf 93       	push	r28
    2974:	0f 92       	push	r0
    2976:	cd b7       	in	r28, 0x3d	; 61
    2978:	de b7       	in	r29, 0x3e	; 62
    297a:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    297c:	e3 e2       	ldi	r30, 0x23	; 35
    297e:	f0 e0       	ldi	r31, 0x00	; 0
    2980:	89 81       	ldd	r24, Y+1	; 0x01
    2982:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    2984:	e6 e5       	ldi	r30, 0x56	; 86
    2986:	f0 e0       	ldi	r31, 0x00	; 0
    2988:	84 e8       	ldi	r24, 0x84	; 132
    298a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    298c:	e6 e5       	ldi	r30, 0x56	; 86
    298e:	f0 e0       	ldi	r31, 0x00	; 0
    2990:	80 81       	ld	r24, Z
    2992:	88 23       	and	r24, r24
    2994:	dc f7       	brge	.-10     	; 0x298c <TWI_writeByte+0x1c>
}
    2996:	0f 90       	pop	r0
    2998:	cf 91       	pop	r28
    299a:	df 91       	pop	r29
    299c:	08 95       	ret

0000299e <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    299e:	df 93       	push	r29
    29a0:	cf 93       	push	r28
    29a2:	cd b7       	in	r28, 0x3d	; 61
    29a4:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    29a6:	e6 e5       	ldi	r30, 0x56	; 86
    29a8:	f0 e0       	ldi	r31, 0x00	; 0
    29aa:	84 ec       	ldi	r24, 0xC4	; 196
    29ac:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    29ae:	e6 e5       	ldi	r30, 0x56	; 86
    29b0:	f0 e0       	ldi	r31, 0x00	; 0
    29b2:	80 81       	ld	r24, Z
    29b4:	88 23       	and	r24, r24
    29b6:	dc f7       	brge	.-10     	; 0x29ae <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    29b8:	e3 e2       	ldi	r30, 0x23	; 35
    29ba:	f0 e0       	ldi	r31, 0x00	; 0
    29bc:	80 81       	ld	r24, Z
}
    29be:	cf 91       	pop	r28
    29c0:	df 91       	pop	r29
    29c2:	08 95       	ret

000029c4 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    29c4:	df 93       	push	r29
    29c6:	cf 93       	push	r28
    29c8:	cd b7       	in	r28, 0x3d	; 61
    29ca:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    29cc:	e6 e5       	ldi	r30, 0x56	; 86
    29ce:	f0 e0       	ldi	r31, 0x00	; 0
    29d0:	84 e8       	ldi	r24, 0x84	; 132
    29d2:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    29d4:	e6 e5       	ldi	r30, 0x56	; 86
    29d6:	f0 e0       	ldi	r31, 0x00	; 0
    29d8:	80 81       	ld	r24, Z
    29da:	88 23       	and	r24, r24
    29dc:	dc f7       	brge	.-10     	; 0x29d4 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    29de:	e3 e2       	ldi	r30, 0x23	; 35
    29e0:	f0 e0       	ldi	r31, 0x00	; 0
    29e2:	80 81       	ld	r24, Z
}
    29e4:	cf 91       	pop	r28
    29e6:	df 91       	pop	r29
    29e8:	08 95       	ret

000029ea <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    29ea:	df 93       	push	r29
    29ec:	cf 93       	push	r28
    29ee:	0f 92       	push	r0
    29f0:	cd b7       	in	r28, 0x3d	; 61
    29f2:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    29f4:	e1 e2       	ldi	r30, 0x21	; 33
    29f6:	f0 e0       	ldi	r31, 0x00	; 0
    29f8:	80 81       	ld	r24, Z
    29fa:	88 7f       	andi	r24, 0xF8	; 248
    29fc:	89 83       	std	Y+1, r24	; 0x01
    return status;
    29fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a00:	0f 90       	pop	r0
    2a02:	cf 91       	pop	r28
    2a04:	df 91       	pop	r29
    2a06:	08 95       	ret

00002a08 <UART_init>:
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
//void UART_init(uint32 baud_rate)
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2a08:	df 93       	push	r29
    2a0a:	cf 93       	push	r28
    2a0c:	00 d0       	rcall	.+0      	; 0x2a0e <UART_init+0x6>
    2a0e:	00 d0       	rcall	.+0      	; 0x2a10 <UART_init+0x8>
    2a10:	cd b7       	in	r28, 0x3d	; 61
    2a12:	de b7       	in	r29, 0x3e	; 62
    2a14:	9c 83       	std	Y+4, r25	; 0x04
    2a16:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2a18:	1a 82       	std	Y+2, r1	; 0x02
    2a1a:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2a1c:	eb e2       	ldi	r30, 0x2B	; 43
    2a1e:	f0 e0       	ldi	r31, 0x00	; 0
    2a20:	82 e0       	ldi	r24, 0x02	; 2
    2a22:	80 83       	st	Z, r24
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	//UCSRB = (1<<RXEN) | (1<<TXEN);
	UCSRB = (1<<RXEN) | (1<<TXEN)  |( ( (Config_Ptr->bit_data&0x4) >>2) <<UCSZ2);
    2a24:	aa e2       	ldi	r26, 0x2A	; 42
    2a26:	b0 e0       	ldi	r27, 0x00	; 0
    2a28:	eb 81       	ldd	r30, Y+3	; 0x03
    2a2a:	fc 81       	ldd	r31, Y+4	; 0x04
    2a2c:	80 81       	ld	r24, Z
    2a2e:	84 70       	andi	r24, 0x04	; 4
    2a30:	88 61       	ori	r24, 0x18	; 24
    2a32:	8c 93       	st	X, r24
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	//UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
	UCSRC =( ( (Config_Ptr->bit_data&0x1) >>0) <<UCSZ0)
    2a34:	a0 e4       	ldi	r26, 0x40	; 64
    2a36:	b0 e0       	ldi	r27, 0x00	; 0
    2a38:	eb 81       	ldd	r30, Y+3	; 0x03
    2a3a:	fc 81       	ldd	r31, Y+4	; 0x04
    2a3c:	80 81       	ld	r24, Z
    2a3e:	88 2f       	mov	r24, r24
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	81 70       	andi	r24, 0x01	; 1
    2a44:	90 70       	andi	r25, 0x00	; 0
    2a46:	88 0f       	add	r24, r24
    2a48:	99 1f       	adc	r25, r25
    2a4a:	28 2f       	mov	r18, r24
    2a4c:	eb 81       	ldd	r30, Y+3	; 0x03
    2a4e:	fc 81       	ldd	r31, Y+4	; 0x04
    2a50:	80 81       	ld	r24, Z
    2a52:	88 2f       	mov	r24, r24
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	82 70       	andi	r24, 0x02	; 2
    2a58:	90 70       	andi	r25, 0x00	; 0
    2a5a:	95 95       	asr	r25
    2a5c:	87 95       	ror	r24
    2a5e:	88 0f       	add	r24, r24
    2a60:	99 1f       	adc	r25, r25
    2a62:	88 0f       	add	r24, r24
    2a64:	99 1f       	adc	r25, r25
    2a66:	28 2b       	or	r18, r24
    2a68:	eb 81       	ldd	r30, Y+3	; 0x03
    2a6a:	fc 81       	ldd	r31, Y+4	; 0x04
    2a6c:	81 81       	ldd	r24, Z+1	; 0x01
    2a6e:	88 2f       	mov	r24, r24
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	82 70       	andi	r24, 0x02	; 2
    2a74:	90 70       	andi	r25, 0x00	; 0
    2a76:	95 95       	asr	r25
    2a78:	87 95       	ror	r24
    2a7a:	88 0f       	add	r24, r24
    2a7c:	99 1f       	adc	r25, r25
    2a7e:	82 95       	swap	r24
    2a80:	92 95       	swap	r25
    2a82:	90 7f       	andi	r25, 0xF0	; 240
    2a84:	98 27       	eor	r25, r24
    2a86:	80 7f       	andi	r24, 0xF0	; 240
    2a88:	98 27       	eor	r25, r24
    2a8a:	28 2b       	or	r18, r24
    2a8c:	eb 81       	ldd	r30, Y+3	; 0x03
    2a8e:	fc 81       	ldd	r31, Y+4	; 0x04
    2a90:	81 81       	ldd	r24, Z+1	; 0x01
    2a92:	88 2f       	mov	r24, r24
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	81 70       	andi	r24, 0x01	; 1
    2a98:	90 70       	andi	r25, 0x00	; 0
    2a9a:	82 95       	swap	r24
    2a9c:	92 95       	swap	r25
    2a9e:	90 7f       	andi	r25, 0xF0	; 240
    2aa0:	98 27       	eor	r25, r24
    2aa2:	80 7f       	andi	r24, 0xF0	; 240
    2aa4:	98 27       	eor	r25, r24
    2aa6:	28 2b       	or	r18, r24
    2aa8:	eb 81       	ldd	r30, Y+3	; 0x03
    2aaa:	fc 81       	ldd	r31, Y+4	; 0x04
    2aac:	82 81       	ldd	r24, Z+2	; 0x02
    2aae:	88 2f       	mov	r24, r24
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	88 0f       	add	r24, r24
    2ab4:	99 1f       	adc	r25, r25
    2ab6:	88 0f       	add	r24, r24
    2ab8:	99 1f       	adc	r25, r25
    2aba:	88 0f       	add	r24, r24
    2abc:	99 1f       	adc	r25, r25
    2abe:	82 2b       	or	r24, r18
    2ac0:	80 68       	ori	r24, 0x80	; 128
    2ac2:	8c 93       	st	X, r24



	/* Calculate the UBRR register value */
	//ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    2ac4:	eb 81       	ldd	r30, Y+3	; 0x03
    2ac6:	fc 81       	ldd	r31, Y+4	; 0x04
    2ac8:	83 81       	ldd	r24, Z+3	; 0x03
    2aca:	94 81       	ldd	r25, Z+4	; 0x04
    2acc:	a5 81       	ldd	r26, Z+5	; 0x05
    2ace:	b6 81       	ldd	r27, Z+6	; 0x06
    2ad0:	88 0f       	add	r24, r24
    2ad2:	99 1f       	adc	r25, r25
    2ad4:	aa 1f       	adc	r26, r26
    2ad6:	bb 1f       	adc	r27, r27
    2ad8:	88 0f       	add	r24, r24
    2ada:	99 1f       	adc	r25, r25
    2adc:	aa 1f       	adc	r26, r26
    2ade:	bb 1f       	adc	r27, r27
    2ae0:	88 0f       	add	r24, r24
    2ae2:	99 1f       	adc	r25, r25
    2ae4:	aa 1f       	adc	r26, r26
    2ae6:	bb 1f       	adc	r27, r27
    2ae8:	9c 01       	movw	r18, r24
    2aea:	ad 01       	movw	r20, r26
    2aec:	80 e0       	ldi	r24, 0x00	; 0
    2aee:	92 e1       	ldi	r25, 0x12	; 18
    2af0:	aa e7       	ldi	r26, 0x7A	; 122
    2af2:	b0 e0       	ldi	r27, 0x00	; 0
    2af4:	bc 01       	movw	r22, r24
    2af6:	cd 01       	movw	r24, r26
    2af8:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <__udivmodsi4>
    2afc:	da 01       	movw	r26, r20
    2afe:	c9 01       	movw	r24, r18
    2b00:	01 97       	sbiw	r24, 0x01	; 1
    2b02:	9a 83       	std	Y+2, r25	; 0x02
    2b04:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2b06:	e0 e4       	ldi	r30, 0x40	; 64
    2b08:	f0 e0       	ldi	r31, 0x00	; 0
    2b0a:	89 81       	ldd	r24, Y+1	; 0x01
    2b0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b0e:	89 2f       	mov	r24, r25
    2b10:	99 27       	eor	r25, r25
    2b12:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2b14:	e9 e2       	ldi	r30, 0x29	; 41
    2b16:	f0 e0       	ldi	r31, 0x00	; 0
    2b18:	89 81       	ldd	r24, Y+1	; 0x01
    2b1a:	80 83       	st	Z, r24
}
    2b1c:	0f 90       	pop	r0
    2b1e:	0f 90       	pop	r0
    2b20:	0f 90       	pop	r0
    2b22:	0f 90       	pop	r0
    2b24:	cf 91       	pop	r28
    2b26:	df 91       	pop	r29
    2b28:	08 95       	ret

00002b2a <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2b2a:	df 93       	push	r29
    2b2c:	cf 93       	push	r28
    2b2e:	0f 92       	push	r0
    2b30:	cd b7       	in	r28, 0x3d	; 61
    2b32:	de b7       	in	r29, 0x3e	; 62
    2b34:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2b36:	eb e2       	ldi	r30, 0x2B	; 43
    2b38:	f0 e0       	ldi	r31, 0x00	; 0
    2b3a:	80 81       	ld	r24, Z
    2b3c:	88 2f       	mov	r24, r24
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	80 72       	andi	r24, 0x20	; 32
    2b42:	90 70       	andi	r25, 0x00	; 0
    2b44:	00 97       	sbiw	r24, 0x00	; 0
    2b46:	b9 f3       	breq	.-18     	; 0x2b36 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2b48:	ec e2       	ldi	r30, 0x2C	; 44
    2b4a:	f0 e0       	ldi	r31, 0x00	; 0
    2b4c:	89 81       	ldd	r24, Y+1	; 0x01
    2b4e:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2b50:	0f 90       	pop	r0
    2b52:	cf 91       	pop	r28
    2b54:	df 91       	pop	r29
    2b56:	08 95       	ret

00002b58 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2b58:	df 93       	push	r29
    2b5a:	cf 93       	push	r28
    2b5c:	cd b7       	in	r28, 0x3d	; 61
    2b5e:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2b60:	eb e2       	ldi	r30, 0x2B	; 43
    2b62:	f0 e0       	ldi	r31, 0x00	; 0
    2b64:	80 81       	ld	r24, Z
    2b66:	88 23       	and	r24, r24
    2b68:	dc f7       	brge	.-10     	; 0x2b60 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    2b6a:	ec e2       	ldi	r30, 0x2C	; 44
    2b6c:	f0 e0       	ldi	r31, 0x00	; 0
    2b6e:	80 81       	ld	r24, Z
}
    2b70:	cf 91       	pop	r28
    2b72:	df 91       	pop	r29
    2b74:	08 95       	ret

00002b76 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2b76:	df 93       	push	r29
    2b78:	cf 93       	push	r28
    2b7a:	00 d0       	rcall	.+0      	; 0x2b7c <UART_sendString+0x6>
    2b7c:	0f 92       	push	r0
    2b7e:	cd b7       	in	r28, 0x3d	; 61
    2b80:	de b7       	in	r29, 0x3e	; 62
    2b82:	9b 83       	std	Y+3, r25	; 0x03
    2b84:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2b86:	19 82       	std	Y+1, r1	; 0x01
    2b88:	0e c0       	rjmp	.+28     	; 0x2ba6 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2b8a:	89 81       	ldd	r24, Y+1	; 0x01
    2b8c:	28 2f       	mov	r18, r24
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	8a 81       	ldd	r24, Y+2	; 0x02
    2b92:	9b 81       	ldd	r25, Y+3	; 0x03
    2b94:	fc 01       	movw	r30, r24
    2b96:	e2 0f       	add	r30, r18
    2b98:	f3 1f       	adc	r31, r19
    2b9a:	80 81       	ld	r24, Z
    2b9c:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <UART_sendByte>
		i++;
    2ba0:	89 81       	ldd	r24, Y+1	; 0x01
    2ba2:	8f 5f       	subi	r24, 0xFF	; 255
    2ba4:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2ba6:	89 81       	ldd	r24, Y+1	; 0x01
    2ba8:	28 2f       	mov	r18, r24
    2baa:	30 e0       	ldi	r19, 0x00	; 0
    2bac:	8a 81       	ldd	r24, Y+2	; 0x02
    2bae:	9b 81       	ldd	r25, Y+3	; 0x03
    2bb0:	fc 01       	movw	r30, r24
    2bb2:	e2 0f       	add	r30, r18
    2bb4:	f3 1f       	adc	r31, r19
    2bb6:	80 81       	ld	r24, Z
    2bb8:	88 23       	and	r24, r24
    2bba:	39 f7       	brne	.-50     	; 0x2b8a <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2bbc:	0f 90       	pop	r0
    2bbe:	0f 90       	pop	r0
    2bc0:	0f 90       	pop	r0
    2bc2:	cf 91       	pop	r28
    2bc4:	df 91       	pop	r29
    2bc6:	08 95       	ret

00002bc8 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2bc8:	0f 93       	push	r16
    2bca:	1f 93       	push	r17
    2bcc:	df 93       	push	r29
    2bce:	cf 93       	push	r28
    2bd0:	00 d0       	rcall	.+0      	; 0x2bd2 <UART_receiveString+0xa>
    2bd2:	0f 92       	push	r0
    2bd4:	cd b7       	in	r28, 0x3d	; 61
    2bd6:	de b7       	in	r29, 0x3e	; 62
    2bd8:	9b 83       	std	Y+3, r25	; 0x03
    2bda:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2bdc:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2bde:	89 81       	ldd	r24, Y+1	; 0x01
    2be0:	28 2f       	mov	r18, r24
    2be2:	30 e0       	ldi	r19, 0x00	; 0
    2be4:	8a 81       	ldd	r24, Y+2	; 0x02
    2be6:	9b 81       	ldd	r25, Y+3	; 0x03
    2be8:	8c 01       	movw	r16, r24
    2bea:	02 0f       	add	r16, r18
    2bec:	13 1f       	adc	r17, r19
    2bee:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <UART_recieveByte>
    2bf2:	f8 01       	movw	r30, r16
    2bf4:	80 83       	st	Z, r24
    2bf6:	0f c0       	rjmp	.+30     	; 0x2c16 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2bf8:	89 81       	ldd	r24, Y+1	; 0x01
    2bfa:	8f 5f       	subi	r24, 0xFF	; 255
    2bfc:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2bfe:	89 81       	ldd	r24, Y+1	; 0x01
    2c00:	28 2f       	mov	r18, r24
    2c02:	30 e0       	ldi	r19, 0x00	; 0
    2c04:	8a 81       	ldd	r24, Y+2	; 0x02
    2c06:	9b 81       	ldd	r25, Y+3	; 0x03
    2c08:	8c 01       	movw	r16, r24
    2c0a:	02 0f       	add	r16, r18
    2c0c:	13 1f       	adc	r17, r19
    2c0e:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <UART_recieveByte>
    2c12:	f8 01       	movw	r30, r16
    2c14:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2c16:	89 81       	ldd	r24, Y+1	; 0x01
    2c18:	28 2f       	mov	r18, r24
    2c1a:	30 e0       	ldi	r19, 0x00	; 0
    2c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c20:	fc 01       	movw	r30, r24
    2c22:	e2 0f       	add	r30, r18
    2c24:	f3 1f       	adc	r31, r19
    2c26:	80 81       	ld	r24, Z
    2c28:	83 32       	cpi	r24, 0x23	; 35
    2c2a:	31 f7       	brne	.-52     	; 0x2bf8 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2c2c:	89 81       	ldd	r24, Y+1	; 0x01
    2c2e:	28 2f       	mov	r18, r24
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	8a 81       	ldd	r24, Y+2	; 0x02
    2c34:	9b 81       	ldd	r25, Y+3	; 0x03
    2c36:	fc 01       	movw	r30, r24
    2c38:	e2 0f       	add	r30, r18
    2c3a:	f3 1f       	adc	r31, r19
    2c3c:	10 82       	st	Z, r1
}
    2c3e:	0f 90       	pop	r0
    2c40:	0f 90       	pop	r0
    2c42:	0f 90       	pop	r0
    2c44:	cf 91       	pop	r28
    2c46:	df 91       	pop	r29
    2c48:	1f 91       	pop	r17
    2c4a:	0f 91       	pop	r16
    2c4c:	08 95       	ret

00002c4e <__mulsi3>:
    2c4e:	62 9f       	mul	r22, r18
    2c50:	d0 01       	movw	r26, r0
    2c52:	73 9f       	mul	r23, r19
    2c54:	f0 01       	movw	r30, r0
    2c56:	82 9f       	mul	r24, r18
    2c58:	e0 0d       	add	r30, r0
    2c5a:	f1 1d       	adc	r31, r1
    2c5c:	64 9f       	mul	r22, r20
    2c5e:	e0 0d       	add	r30, r0
    2c60:	f1 1d       	adc	r31, r1
    2c62:	92 9f       	mul	r25, r18
    2c64:	f0 0d       	add	r31, r0
    2c66:	83 9f       	mul	r24, r19
    2c68:	f0 0d       	add	r31, r0
    2c6a:	74 9f       	mul	r23, r20
    2c6c:	f0 0d       	add	r31, r0
    2c6e:	65 9f       	mul	r22, r21
    2c70:	f0 0d       	add	r31, r0
    2c72:	99 27       	eor	r25, r25
    2c74:	72 9f       	mul	r23, r18
    2c76:	b0 0d       	add	r27, r0
    2c78:	e1 1d       	adc	r30, r1
    2c7a:	f9 1f       	adc	r31, r25
    2c7c:	63 9f       	mul	r22, r19
    2c7e:	b0 0d       	add	r27, r0
    2c80:	e1 1d       	adc	r30, r1
    2c82:	f9 1f       	adc	r31, r25
    2c84:	bd 01       	movw	r22, r26
    2c86:	cf 01       	movw	r24, r30
    2c88:	11 24       	eor	r1, r1
    2c8a:	08 95       	ret

00002c8c <__divmodhi4>:
    2c8c:	97 fb       	bst	r25, 7
    2c8e:	09 2e       	mov	r0, r25
    2c90:	07 26       	eor	r0, r23
    2c92:	0a d0       	rcall	.+20     	; 0x2ca8 <__divmodhi4_neg1>
    2c94:	77 fd       	sbrc	r23, 7
    2c96:	04 d0       	rcall	.+8      	; 0x2ca0 <__divmodhi4_neg2>
    2c98:	2e d0       	rcall	.+92     	; 0x2cf6 <__udivmodhi4>
    2c9a:	06 d0       	rcall	.+12     	; 0x2ca8 <__divmodhi4_neg1>
    2c9c:	00 20       	and	r0, r0
    2c9e:	1a f4       	brpl	.+6      	; 0x2ca6 <__divmodhi4_exit>

00002ca0 <__divmodhi4_neg2>:
    2ca0:	70 95       	com	r23
    2ca2:	61 95       	neg	r22
    2ca4:	7f 4f       	sbci	r23, 0xFF	; 255

00002ca6 <__divmodhi4_exit>:
    2ca6:	08 95       	ret

00002ca8 <__divmodhi4_neg1>:
    2ca8:	f6 f7       	brtc	.-4      	; 0x2ca6 <__divmodhi4_exit>
    2caa:	90 95       	com	r25
    2cac:	81 95       	neg	r24
    2cae:	9f 4f       	sbci	r25, 0xFF	; 255
    2cb0:	08 95       	ret

00002cb2 <__udivmodsi4>:
    2cb2:	a1 e2       	ldi	r26, 0x21	; 33
    2cb4:	1a 2e       	mov	r1, r26
    2cb6:	aa 1b       	sub	r26, r26
    2cb8:	bb 1b       	sub	r27, r27
    2cba:	fd 01       	movw	r30, r26
    2cbc:	0d c0       	rjmp	.+26     	; 0x2cd8 <__udivmodsi4_ep>

00002cbe <__udivmodsi4_loop>:
    2cbe:	aa 1f       	adc	r26, r26
    2cc0:	bb 1f       	adc	r27, r27
    2cc2:	ee 1f       	adc	r30, r30
    2cc4:	ff 1f       	adc	r31, r31
    2cc6:	a2 17       	cp	r26, r18
    2cc8:	b3 07       	cpc	r27, r19
    2cca:	e4 07       	cpc	r30, r20
    2ccc:	f5 07       	cpc	r31, r21
    2cce:	20 f0       	brcs	.+8      	; 0x2cd8 <__udivmodsi4_ep>
    2cd0:	a2 1b       	sub	r26, r18
    2cd2:	b3 0b       	sbc	r27, r19
    2cd4:	e4 0b       	sbc	r30, r20
    2cd6:	f5 0b       	sbc	r31, r21

00002cd8 <__udivmodsi4_ep>:
    2cd8:	66 1f       	adc	r22, r22
    2cda:	77 1f       	adc	r23, r23
    2cdc:	88 1f       	adc	r24, r24
    2cde:	99 1f       	adc	r25, r25
    2ce0:	1a 94       	dec	r1
    2ce2:	69 f7       	brne	.-38     	; 0x2cbe <__udivmodsi4_loop>
    2ce4:	60 95       	com	r22
    2ce6:	70 95       	com	r23
    2ce8:	80 95       	com	r24
    2cea:	90 95       	com	r25
    2cec:	9b 01       	movw	r18, r22
    2cee:	ac 01       	movw	r20, r24
    2cf0:	bd 01       	movw	r22, r26
    2cf2:	cf 01       	movw	r24, r30
    2cf4:	08 95       	ret

00002cf6 <__udivmodhi4>:
    2cf6:	aa 1b       	sub	r26, r26
    2cf8:	bb 1b       	sub	r27, r27
    2cfa:	51 e1       	ldi	r21, 0x11	; 17
    2cfc:	07 c0       	rjmp	.+14     	; 0x2d0c <__udivmodhi4_ep>

00002cfe <__udivmodhi4_loop>:
    2cfe:	aa 1f       	adc	r26, r26
    2d00:	bb 1f       	adc	r27, r27
    2d02:	a6 17       	cp	r26, r22
    2d04:	b7 07       	cpc	r27, r23
    2d06:	10 f0       	brcs	.+4      	; 0x2d0c <__udivmodhi4_ep>
    2d08:	a6 1b       	sub	r26, r22
    2d0a:	b7 0b       	sbc	r27, r23

00002d0c <__udivmodhi4_ep>:
    2d0c:	88 1f       	adc	r24, r24
    2d0e:	99 1f       	adc	r25, r25
    2d10:	5a 95       	dec	r21
    2d12:	a9 f7       	brne	.-22     	; 0x2cfe <__udivmodhi4_loop>
    2d14:	80 95       	com	r24
    2d16:	90 95       	com	r25
    2d18:	bc 01       	movw	r22, r24
    2d1a:	cd 01       	movw	r24, r26
    2d1c:	08 95       	ret

00002d1e <__prologue_saves__>:
    2d1e:	2f 92       	push	r2
    2d20:	3f 92       	push	r3
    2d22:	4f 92       	push	r4
    2d24:	5f 92       	push	r5
    2d26:	6f 92       	push	r6
    2d28:	7f 92       	push	r7
    2d2a:	8f 92       	push	r8
    2d2c:	9f 92       	push	r9
    2d2e:	af 92       	push	r10
    2d30:	bf 92       	push	r11
    2d32:	cf 92       	push	r12
    2d34:	df 92       	push	r13
    2d36:	ef 92       	push	r14
    2d38:	ff 92       	push	r15
    2d3a:	0f 93       	push	r16
    2d3c:	1f 93       	push	r17
    2d3e:	cf 93       	push	r28
    2d40:	df 93       	push	r29
    2d42:	cd b7       	in	r28, 0x3d	; 61
    2d44:	de b7       	in	r29, 0x3e	; 62
    2d46:	ca 1b       	sub	r28, r26
    2d48:	db 0b       	sbc	r29, r27
    2d4a:	0f b6       	in	r0, 0x3f	; 63
    2d4c:	f8 94       	cli
    2d4e:	de bf       	out	0x3e, r29	; 62
    2d50:	0f be       	out	0x3f, r0	; 63
    2d52:	cd bf       	out	0x3d, r28	; 61
    2d54:	09 94       	ijmp

00002d56 <__epilogue_restores__>:
    2d56:	2a 88       	ldd	r2, Y+18	; 0x12
    2d58:	39 88       	ldd	r3, Y+17	; 0x11
    2d5a:	48 88       	ldd	r4, Y+16	; 0x10
    2d5c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d5e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d60:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d62:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d64:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d66:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d68:	b9 84       	ldd	r11, Y+9	; 0x09
    2d6a:	c8 84       	ldd	r12, Y+8	; 0x08
    2d6c:	df 80       	ldd	r13, Y+7	; 0x07
    2d6e:	ee 80       	ldd	r14, Y+6	; 0x06
    2d70:	fd 80       	ldd	r15, Y+5	; 0x05
    2d72:	0c 81       	ldd	r16, Y+4	; 0x04
    2d74:	1b 81       	ldd	r17, Y+3	; 0x03
    2d76:	aa 81       	ldd	r26, Y+2	; 0x02
    2d78:	b9 81       	ldd	r27, Y+1	; 0x01
    2d7a:	ce 0f       	add	r28, r30
    2d7c:	d1 1d       	adc	r29, r1
    2d7e:	0f b6       	in	r0, 0x3f	; 63
    2d80:	f8 94       	cli
    2d82:	de bf       	out	0x3e, r29	; 62
    2d84:	0f be       	out	0x3f, r0	; 63
    2d86:	cd bf       	out	0x3d, r28	; 61
    2d88:	ed 01       	movw	r28, r26
    2d8a:	08 95       	ret

00002d8c <itoa>:
    2d8c:	fb 01       	movw	r30, r22
    2d8e:	9f 01       	movw	r18, r30
    2d90:	e8 94       	clt
    2d92:	42 30       	cpi	r20, 0x02	; 2
    2d94:	c4 f0       	brlt	.+48     	; 0x2dc6 <itoa+0x3a>
    2d96:	45 32       	cpi	r20, 0x25	; 37
    2d98:	b4 f4       	brge	.+44     	; 0x2dc6 <itoa+0x3a>
    2d9a:	4a 30       	cpi	r20, 0x0A	; 10
    2d9c:	29 f4       	brne	.+10     	; 0x2da8 <itoa+0x1c>
    2d9e:	97 fb       	bst	r25, 7
    2da0:	1e f4       	brtc	.+6      	; 0x2da8 <itoa+0x1c>
    2da2:	90 95       	com	r25
    2da4:	81 95       	neg	r24
    2da6:	9f 4f       	sbci	r25, 0xFF	; 255
    2da8:	64 2f       	mov	r22, r20
    2daa:	77 27       	eor	r23, r23
    2dac:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <__udivmodhi4>
    2db0:	80 5d       	subi	r24, 0xD0	; 208
    2db2:	8a 33       	cpi	r24, 0x3A	; 58
    2db4:	0c f0       	brlt	.+2      	; 0x2db8 <itoa+0x2c>
    2db6:	89 5d       	subi	r24, 0xD9	; 217
    2db8:	81 93       	st	Z+, r24
    2dba:	cb 01       	movw	r24, r22
    2dbc:	00 97       	sbiw	r24, 0x00	; 0
    2dbe:	a1 f7       	brne	.-24     	; 0x2da8 <itoa+0x1c>
    2dc0:	16 f4       	brtc	.+4      	; 0x2dc6 <itoa+0x3a>
    2dc2:	5d e2       	ldi	r21, 0x2D	; 45
    2dc4:	51 93       	st	Z+, r21
    2dc6:	10 82       	st	Z, r1
    2dc8:	c9 01       	movw	r24, r18
    2dca:	0c 94 e7 16 	jmp	0x2dce	; 0x2dce <strrev>

00002dce <strrev>:
    2dce:	dc 01       	movw	r26, r24
    2dd0:	fc 01       	movw	r30, r24
    2dd2:	67 2f       	mov	r22, r23
    2dd4:	71 91       	ld	r23, Z+
    2dd6:	77 23       	and	r23, r23
    2dd8:	e1 f7       	brne	.-8      	; 0x2dd2 <strrev+0x4>
    2dda:	32 97       	sbiw	r30, 0x02	; 2
    2ddc:	04 c0       	rjmp	.+8      	; 0x2de6 <strrev+0x18>
    2dde:	7c 91       	ld	r23, X
    2de0:	6d 93       	st	X+, r22
    2de2:	70 83       	st	Z, r23
    2de4:	62 91       	ld	r22, -Z
    2de6:	ae 17       	cp	r26, r30
    2de8:	bf 07       	cpc	r27, r31
    2dea:	c8 f3       	brcs	.-14     	; 0x2dde <strrev+0x10>
    2dec:	08 95       	ret

00002dee <_exit>:
    2dee:	f8 94       	cli

00002df0 <__stop_program>:
    2df0:	ff cf       	rjmp	.-2      	; 0x2df0 <__stop_program>

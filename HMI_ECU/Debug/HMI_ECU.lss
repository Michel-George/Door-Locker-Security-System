
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000094  00800060  000029ec  00002a80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  008000f4  008000f4  00002b14  2**0
                  ALLOC
  3 .stab         00002904  00000000  00000000  00002b14  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011c7  00000000  00000000  00005418  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000065df  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000671f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000688f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000084d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000093c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a170  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a2d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a55d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ad2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 3a 12 	jmp	0x2474	; 0x2474 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ee       	ldi	r30, 0xEC	; 236
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3f       	cpi	r26, 0xF4	; 244
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 ef       	ldi	r26, 0xF4	; 244
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3f       	cpi	r26, 0xF7	; 247
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 f4 14 	jmp	0x29e8	; 0x29e8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 78 14 	jmp	0x28f0	; 0x28f0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 ed       	ldi	r26, 0xD9	; 217
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 94 14 	jmp	0x2928	; 0x2928 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 84 14 	jmp	0x2908	; 0x2908 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a0 14 	jmp	0x2940	; 0x2940 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 84 14 	jmp	0x2908	; 0x2908 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a0 14 	jmp	0x2940	; 0x2940 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 78 14 	jmp	0x28f0	; 0x28f0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 ed       	ldi	r24, 0xD9	; 217
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 94 14 	jmp	0x2928	; 0x2928 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 84 14 	jmp	0x2908	; 0x2908 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a0 14 	jmp	0x2940	; 0x2940 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 84 14 	jmp	0x2908	; 0x2908 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a0 14 	jmp	0x2940	; 0x2940 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 84 14 	jmp	0x2908	; 0x2908 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a0 14 	jmp	0x2940	; 0x2940 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 88 14 	jmp	0x2910	; 0x2910 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 a4 14 	jmp	0x2948	; 0x2948 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


int main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2d 97       	sbiw	r28, 0x0d	; 13
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	uint8 key;

	UART_ConfigType UART_configuration = {bit8,Parity_Disabled,one_stopbit,9600};
     b5a:	ce 01       	movw	r24, r28
     b5c:	02 96       	adiw	r24, 0x02	; 2
     b5e:	9a 87       	std	Y+10, r25	; 0x0a
     b60:	89 87       	std	Y+9, r24	; 0x09
     b62:	ec ee       	ldi	r30, 0xEC	; 236
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	fc 87       	std	Y+12, r31	; 0x0c
     b68:	eb 87       	std	Y+11, r30	; 0x0b
     b6a:	f7 e0       	ldi	r31, 0x07	; 7
     b6c:	fd 87       	std	Y+13, r31	; 0x0d
     b6e:	eb 85       	ldd	r30, Y+11	; 0x0b
     b70:	fc 85       	ldd	r31, Y+12	; 0x0c
     b72:	00 80       	ld	r0, Z
     b74:	8b 85       	ldd	r24, Y+11	; 0x0b
     b76:	9c 85       	ldd	r25, Y+12	; 0x0c
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	9c 87       	std	Y+12, r25	; 0x0c
     b7c:	8b 87       	std	Y+11, r24	; 0x0b
     b7e:	e9 85       	ldd	r30, Y+9	; 0x09
     b80:	fa 85       	ldd	r31, Y+10	; 0x0a
     b82:	00 82       	st	Z, r0
     b84:	89 85       	ldd	r24, Y+9	; 0x09
     b86:	9a 85       	ldd	r25, Y+10	; 0x0a
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	9a 87       	std	Y+10, r25	; 0x0a
     b8c:	89 87       	std	Y+9, r24	; 0x09
     b8e:	9d 85       	ldd	r25, Y+13	; 0x0d
     b90:	91 50       	subi	r25, 0x01	; 1
     b92:	9d 87       	std	Y+13, r25	; 0x0d
     b94:	ed 85       	ldd	r30, Y+13	; 0x0d
     b96:	ee 23       	and	r30, r30
     b98:	51 f7       	brne	.-44     	; 0xb6e <main+0x28>
	UART_init(&UART_configuration);
     b9a:	ce 01       	movw	r24, r28
     b9c:	02 96       	adiw	r24, 0x02	; 2
     b9e:	0e 94 33 13 	call	0x2666	; 0x2666 <UART_init>

	LCD_init();
     ba2:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <LCD_init>

	UART_sendByte(MC_READY);
     ba6:	80 e1       	ldi	r24, 0x10	; 16
     ba8:	0e 94 c4 13 	call	0x2788	; 0x2788 <UART_sendByte>
	while(UART_recieveByte() != MC_READY);
     bac:	0e 94 db 13 	call	0x27b6	; 0x27b6 <UART_recieveByte>
     bb0:	80 31       	cpi	r24, 0x10	; 16
     bb2:	e1 f7       	brne	.-8      	; 0xbac <main+0x66>


	while(1)
	{

		LCD_moveCursor(0,0);
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	60 e0       	ldi	r22, 0x00	; 0
     bb8:	0e 94 b2 11 	call	0x2364	; 0x2364 <LCD_moveCursor>
		LCD_displayString("+: Open Door");
     bbc:	80 e6       	ldi	r24, 0x60	; 96
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	0e 94 89 11 	call	0x2312	; 0x2312 <LCD_displayString>
		LCD_moveCursor(1,0);
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	60 e0       	ldi	r22, 0x00	; 0
     bc8:	0e 94 b2 11 	call	0x2364	; 0x2364 <LCD_moveCursor>
		LCD_displayString("-: Change Pass");
     bcc:	8d e6       	ldi	r24, 0x6D	; 109
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	0e 94 89 11 	call	0x2312	; 0x2312 <LCD_displayString>

		key=KEYPAD_getPressedKey();
     bd4:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <KEYPAD_getPressedKey>
     bd8:	89 83       	std	Y+1, r24	; 0x01

		if(key=='+')
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	8b 32       	cpi	r24, 0x2B	; 43
     bde:	29 f4       	brne	.+10     	; 0xbea <main+0xa4>
		{
			LCD_clearScreen();
     be0:	0e 94 30 12 	call	0x2460	; 0x2460 <LCD_clearScreen>
			open_door();
     be4:	0e 94 2b 07 	call	0xe56	; 0xe56 <open_door>
     be8:	e5 cf       	rjmp	.-54     	; 0xbb4 <main+0x6e>
		}
		else if (key=='-')
     bea:	89 81       	ldd	r24, Y+1	; 0x01
     bec:	8d 32       	cpi	r24, 0x2D	; 45
     bee:	11 f7       	brne	.-60     	; 0xbb4 <main+0x6e>
		{
			LCD_clearScreen();
     bf0:	0e 94 30 12 	call	0x2460	; 0x2460 <LCD_clearScreen>
			change_pass();
     bf4:	0e 94 88 07 	call	0xf10	; 0xf10 <change_pass>
     bf8:	dd cf       	rjmp	.-70     	; 0xbb4 <main+0x6e>

00000bfa <get_pass>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



void get_pass(uint8 *password,uint8 size,uint8 LCD_pos)
{
     bfa:	df 93       	push	r29
     bfc:	cf 93       	push	r28
     bfe:	cd b7       	in	r28, 0x3d	; 61
     c00:	de b7       	in	r29, 0x3e	; 62
     c02:	64 97       	sbiw	r28, 0x14	; 20
     c04:	0f b6       	in	r0, 0x3f	; 63
     c06:	f8 94       	cli
     c08:	de bf       	out	0x3e, r29	; 62
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	cd bf       	out	0x3d, r28	; 61
     c0e:	9a 8b       	std	Y+18, r25	; 0x12
     c10:	89 8b       	std	Y+17, r24	; 0x11
     c12:	6b 8b       	std	Y+19, r22	; 0x13
     c14:	4c 8b       	std	Y+20, r20	; 0x14
	uint8 key;
	uint8 i=LCD_pos;
     c16:	8c 89       	ldd	r24, Y+20	; 0x14
     c18:	8f 87       	std	Y+15, r24	; 0x0f

	do
	{
		key=KEYPAD_getPressedKey();
     c1a:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <KEYPAD_getPressedKey>
     c1e:	88 8b       	std	Y+16, r24	; 0x10
     c20:	80 e0       	ldi	r24, 0x00	; 0
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	aa ef       	ldi	r26, 0xFA	; 250
     c26:	b3 e4       	ldi	r27, 0x43	; 67
     c28:	8b 87       	std	Y+11, r24	; 0x0b
     c2a:	9c 87       	std	Y+12, r25	; 0x0c
     c2c:	ad 87       	std	Y+13, r26	; 0x0d
     c2e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c30:	6b 85       	ldd	r22, Y+11	; 0x0b
     c32:	7c 85       	ldd	r23, Y+12	; 0x0c
     c34:	8d 85       	ldd	r24, Y+13	; 0x0d
     c36:	9e 85       	ldd	r25, Y+14	; 0x0e
     c38:	20 e0       	ldi	r18, 0x00	; 0
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	4a ef       	ldi	r20, 0xFA	; 250
     c3e:	54 e4       	ldi	r21, 0x44	; 68
     c40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c44:	dc 01       	movw	r26, r24
     c46:	cb 01       	movw	r24, r22
     c48:	8f 83       	std	Y+7, r24	; 0x07
     c4a:	98 87       	std	Y+8, r25	; 0x08
     c4c:	a9 87       	std	Y+9, r26	; 0x09
     c4e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c50:	6f 81       	ldd	r22, Y+7	; 0x07
     c52:	78 85       	ldd	r23, Y+8	; 0x08
     c54:	89 85       	ldd	r24, Y+9	; 0x09
     c56:	9a 85       	ldd	r25, Y+10	; 0x0a
     c58:	20 e0       	ldi	r18, 0x00	; 0
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	40 e8       	ldi	r20, 0x80	; 128
     c5e:	5f e3       	ldi	r21, 0x3F	; 63
     c60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c64:	88 23       	and	r24, r24
     c66:	2c f4       	brge	.+10     	; 0xc72 <get_pass+0x78>
		__ticks = 1;
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	9e 83       	std	Y+6, r25	; 0x06
     c6e:	8d 83       	std	Y+5, r24	; 0x05
     c70:	3f c0       	rjmp	.+126    	; 0xcf0 <get_pass+0xf6>
	else if (__tmp > 65535)
     c72:	6f 81       	ldd	r22, Y+7	; 0x07
     c74:	78 85       	ldd	r23, Y+8	; 0x08
     c76:	89 85       	ldd	r24, Y+9	; 0x09
     c78:	9a 85       	ldd	r25, Y+10	; 0x0a
     c7a:	20 e0       	ldi	r18, 0x00	; 0
     c7c:	3f ef       	ldi	r19, 0xFF	; 255
     c7e:	4f e7       	ldi	r20, 0x7F	; 127
     c80:	57 e4       	ldi	r21, 0x47	; 71
     c82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c86:	18 16       	cp	r1, r24
     c88:	4c f5       	brge	.+82     	; 0xcdc <get_pass+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c8a:	6b 85       	ldd	r22, Y+11	; 0x0b
     c8c:	7c 85       	ldd	r23, Y+12	; 0x0c
     c8e:	8d 85       	ldd	r24, Y+13	; 0x0d
     c90:	9e 85       	ldd	r25, Y+14	; 0x0e
     c92:	20 e0       	ldi	r18, 0x00	; 0
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	40 e2       	ldi	r20, 0x20	; 32
     c98:	51 e4       	ldi	r21, 0x41	; 65
     c9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c9e:	dc 01       	movw	r26, r24
     ca0:	cb 01       	movw	r24, r22
     ca2:	bc 01       	movw	r22, r24
     ca4:	cd 01       	movw	r24, r26
     ca6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     caa:	dc 01       	movw	r26, r24
     cac:	cb 01       	movw	r24, r22
     cae:	9e 83       	std	Y+6, r25	; 0x06
     cb0:	8d 83       	std	Y+5, r24	; 0x05
     cb2:	0f c0       	rjmp	.+30     	; 0xcd2 <get_pass+0xd8>
     cb4:	88 ec       	ldi	r24, 0xC8	; 200
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	9c 83       	std	Y+4, r25	; 0x04
     cba:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cbc:	8b 81       	ldd	r24, Y+3	; 0x03
     cbe:	9c 81       	ldd	r25, Y+4	; 0x04
     cc0:	01 97       	sbiw	r24, 0x01	; 1
     cc2:	f1 f7       	brne	.-4      	; 0xcc0 <get_pass+0xc6>
     cc4:	9c 83       	std	Y+4, r25	; 0x04
     cc6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cc8:	8d 81       	ldd	r24, Y+5	; 0x05
     cca:	9e 81       	ldd	r25, Y+6	; 0x06
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	9e 83       	std	Y+6, r25	; 0x06
     cd0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cd2:	8d 81       	ldd	r24, Y+5	; 0x05
     cd4:	9e 81       	ldd	r25, Y+6	; 0x06
     cd6:	00 97       	sbiw	r24, 0x00	; 0
     cd8:	69 f7       	brne	.-38     	; 0xcb4 <get_pass+0xba>
     cda:	14 c0       	rjmp	.+40     	; 0xd04 <get_pass+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cdc:	6f 81       	ldd	r22, Y+7	; 0x07
     cde:	78 85       	ldd	r23, Y+8	; 0x08
     ce0:	89 85       	ldd	r24, Y+9	; 0x09
     ce2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ce4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ce8:	dc 01       	movw	r26, r24
     cea:	cb 01       	movw	r24, r22
     cec:	9e 83       	std	Y+6, r25	; 0x06
     cee:	8d 83       	std	Y+5, r24	; 0x05
     cf0:	8d 81       	ldd	r24, Y+5	; 0x05
     cf2:	9e 81       	ldd	r25, Y+6	; 0x06
     cf4:	9a 83       	std	Y+2, r25	; 0x02
     cf6:	89 83       	std	Y+1, r24	; 0x01
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
     cfa:	9a 81       	ldd	r25, Y+2	; 0x02
     cfc:	01 97       	sbiw	r24, 0x01	; 1
     cfe:	f1 f7       	brne	.-4      	; 0xcfc <get_pass+0x102>
     d00:	9a 83       	std	Y+2, r25	; 0x02
     d02:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		if(key>=0 && key<=9)
     d04:	88 89       	ldd	r24, Y+16	; 0x10
     d06:	8a 30       	cpi	r24, 0x0A	; 10
     d08:	08 f0       	brcs	.+2      	; 0xd0c <get_pass+0x112>
     d0a:	3e c0       	rjmp	.+124    	; 0xd88 <get_pass+0x18e>
		{
			if(i!=(size+LCD_pos))
     d0c:	8f 85       	ldd	r24, Y+15	; 0x0f
     d0e:	48 2f       	mov	r20, r24
     d10:	50 e0       	ldi	r21, 0x00	; 0
     d12:	8b 89       	ldd	r24, Y+19	; 0x13
     d14:	28 2f       	mov	r18, r24
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	8c 89       	ldd	r24, Y+20	; 0x14
     d1a:	88 2f       	mov	r24, r24
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	82 0f       	add	r24, r18
     d20:	93 1f       	adc	r25, r19
     d22:	48 17       	cp	r20, r24
     d24:	59 07       	cpc	r21, r25
     d26:	09 f4       	brne	.+2      	; 0xd2a <get_pass+0x130>
     d28:	43 c0       	rjmp	.+134    	; 0xdb0 <get_pass+0x1b6>
			{
				password[i-LCD_pos]=key;
     d2a:	8f 85       	ldd	r24, Y+15	; 0x0f
     d2c:	28 2f       	mov	r18, r24
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	8c 89       	ldd	r24, Y+20	; 0x14
     d32:	88 2f       	mov	r24, r24
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	a9 01       	movw	r20, r18
     d38:	48 1b       	sub	r20, r24
     d3a:	59 0b       	sbc	r21, r25
     d3c:	ca 01       	movw	r24, r20
     d3e:	9c 01       	movw	r18, r24
     d40:	89 89       	ldd	r24, Y+17	; 0x11
     d42:	9a 89       	ldd	r25, Y+18	; 0x12
     d44:	fc 01       	movw	r30, r24
     d46:	e2 0f       	add	r30, r18
     d48:	f3 1f       	adc	r31, r19
     d4a:	88 89       	ldd	r24, Y+16	; 0x10
     d4c:	80 83       	st	Z, r24
				LCD_moveCursor(1,i);
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	6f 85       	ldd	r22, Y+15	; 0x0f
     d52:	0e 94 b2 11 	call	0x2364	; 0x2364 <LCD_moveCursor>
				//LCD_displayCharacter('*');
				LCD_intgerToString(password[i-LCD_pos]);
     d56:	8f 85       	ldd	r24, Y+15	; 0x0f
     d58:	28 2f       	mov	r18, r24
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	8c 89       	ldd	r24, Y+20	; 0x14
     d5e:	88 2f       	mov	r24, r24
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	a9 01       	movw	r20, r18
     d64:	48 1b       	sub	r20, r24
     d66:	59 0b       	sbc	r21, r25
     d68:	ca 01       	movw	r24, r20
     d6a:	9c 01       	movw	r18, r24
     d6c:	89 89       	ldd	r24, Y+17	; 0x11
     d6e:	9a 89       	ldd	r25, Y+18	; 0x12
     d70:	fc 01       	movw	r30, r24
     d72:	e2 0f       	add	r30, r18
     d74:	f3 1f       	adc	r31, r19
     d76:	80 81       	ld	r24, Z
     d78:	88 2f       	mov	r24, r24
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	0e 94 0d 12 	call	0x241a	; 0x241a <LCD_intgerToString>
				i++;
     d80:	8f 85       	ldd	r24, Y+15	; 0x0f
     d82:	8f 5f       	subi	r24, 0xFF	; 255
     d84:	8f 87       	std	Y+15, r24	; 0x0f
     d86:	14 c0       	rjmp	.+40     	; 0xdb0 <get_pass+0x1b6>
			}
		}
		else if(key== '-')
     d88:	88 89       	ldd	r24, Y+16	; 0x10
     d8a:	8d 32       	cpi	r24, 0x2D	; 45
     d8c:	89 f4       	brne	.+34     	; 0xdb0 <get_pass+0x1b6>
		{

			LCD_moveCursor(1,i);
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	6f 85       	ldd	r22, Y+15	; 0x0f
     d92:	0e 94 b2 11 	call	0x2364	; 0x2364 <LCD_moveCursor>
			LCD_displayCharacter(' ');
     d96:	80 e2       	ldi	r24, 0x20	; 32
     d98:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <LCD_displayCharacter>
			i--;
     d9c:	8f 85       	ldd	r24, Y+15	; 0x0f
     d9e:	81 50       	subi	r24, 0x01	; 1
     da0:	8f 87       	std	Y+15, r24	; 0x0f
			LCD_moveCursor(1,i);
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	6f 85       	ldd	r22, Y+15	; 0x0f
     da6:	0e 94 b2 11 	call	0x2364	; 0x2364 <LCD_moveCursor>
			LCD_displayCharacter(' ');
     daa:	80 e2       	ldi	r24, 0x20	; 32
     dac:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <LCD_displayCharacter>
		}

	}
	while(key != '=' );
     db0:	88 89       	ldd	r24, Y+16	; 0x10
     db2:	8d 33       	cpi	r24, 0x3D	; 61
     db4:	09 f0       	breq	.+2      	; 0xdb8 <get_pass+0x1be>
     db6:	31 cf       	rjmp	.-414    	; 0xc1a <get_pass+0x20>
}
     db8:	64 96       	adiw	r28, 0x14	; 20
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	f8 94       	cli
     dbe:	de bf       	out	0x3e, r29	; 62
     dc0:	0f be       	out	0x3f, r0	; 63
     dc2:	cd bf       	out	0x3d, r28	; 61
     dc4:	cf 91       	pop	r28
     dc6:	df 91       	pop	r29
     dc8:	08 95       	ret

00000dca <set_pass>:

void set_pass(void)
{
     dca:	df 93       	push	r29
     dcc:	cf 93       	push	r28
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
	do{
		UART_sendByte(set);
     dd2:	83 e7       	ldi	r24, 0x73	; 115
     dd4:	0e 94 c4 13 	call	0x2788	; 0x2788 <UART_sendByte>
		LCD_clearScreen();
     dd8:	0e 94 30 12 	call	0x2460	; 0x2460 <LCD_clearScreen>
		LCD_moveCursor(0,0);
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	60 e0       	ldi	r22, 0x00	; 0
     de0:	0e 94 b2 11 	call	0x2364	; 0x2364 <LCD_moveCursor>
		LCD_displayString("Pls enter Pass:");
     de4:	8c e7       	ldi	r24, 0x7C	; 124
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	0e 94 89 11 	call	0x2312	; 0x2312 <LCD_displayString>
		LCD_moveCursor(1,0);
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	0e 94 b2 11 	call	0x2364	; 0x2364 <LCD_moveCursor>

		get_pass(password,pass_size,0);
     df4:	81 ee       	ldi	r24, 0xE1	; 225
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	65 e0       	ldi	r22, 0x05	; 5
     dfa:	40 e0       	ldi	r20, 0x00	; 0
     dfc:	0e 94 fd 05 	call	0xbfa	; 0xbfa <get_pass>
		UART_sendArray(password,pass_size);
     e00:	81 ee       	ldi	r24, 0xE1	; 225
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	65 e0       	ldi	r22, 0x05	; 5
     e06:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <UART_sendArray>

		LCD_clearScreen();
     e0a:	0e 94 30 12 	call	0x2460	; 0x2460 <LCD_clearScreen>
		LCD_moveCursor(0,0);
     e0e:	80 e0       	ldi	r24, 0x00	; 0
     e10:	60 e0       	ldi	r22, 0x00	; 0
     e12:	0e 94 b2 11 	call	0x2364	; 0x2364 <LCD_moveCursor>
		LCD_displayString("Pls re-enter the");
     e16:	8c e8       	ldi	r24, 0x8C	; 140
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	0e 94 89 11 	call	0x2312	; 0x2312 <LCD_displayString>
		LCD_moveCursor(1,0);
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	60 e0       	ldi	r22, 0x00	; 0
     e22:	0e 94 b2 11 	call	0x2364	; 0x2364 <LCD_moveCursor>
		LCD_displayString("same Pass:");
     e26:	8d e9       	ldi	r24, 0x9D	; 157
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	0e 94 89 11 	call	0x2312	; 0x2312 <LCD_displayString>

		get_pass(password,pass_size,10);
     e2e:	81 ee       	ldi	r24, 0xE1	; 225
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	65 e0       	ldi	r22, 0x05	; 5
     e34:	4a e0       	ldi	r20, 0x0A	; 10
     e36:	0e 94 fd 05 	call	0xbfa	; 0xbfa <get_pass>
		UART_sendArray(password,pass_size);
     e3a:	81 ee       	ldi	r24, 0xE1	; 225
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	65 e0       	ldi	r22, 0x05	; 5
     e40:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <UART_sendArray>
		LCD_clearScreen();
     e44:	0e 94 30 12 	call	0x2460	; 0x2460 <LCD_clearScreen>

	}while(UART_recieveByte()==0);
     e48:	0e 94 db 13 	call	0x27b6	; 0x27b6 <UART_recieveByte>
     e4c:	88 23       	and	r24, r24
     e4e:	09 f2       	breq	.-126    	; 0xdd2 <set_pass+0x8>
}
     e50:	cf 91       	pop	r28
     e52:	df 91       	pop	r29
     e54:	08 95       	ret

00000e56 <open_door>:
void open_door(void)
{
     e56:	df 93       	push	r29
     e58:	cf 93       	push	r28
     e5a:	0f 92       	push	r0
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
	uint8 counter=0;
     e60:	19 82       	std	Y+1, r1	; 0x01

	do{
		if (counter==2){
     e62:	89 81       	ldd	r24, Y+1	; 0x01
     e64:	82 30       	cpi	r24, 0x02	; 2
     e66:	71 f4       	brne	.+28     	; 0xe84 <open_door+0x2e>

			UART_sendByte(error);
     e68:	85 e6       	ldi	r24, 0x65	; 101
     e6a:	0e 94 c4 13 	call	0x2788	; 0x2788 <UART_sendByte>
			LCD_clearScreen();
     e6e:	0e 94 30 12 	call	0x2460	; 0x2460 <LCD_clearScreen>
			LCD_displayString("Wrong Pass");
     e72:	88 ea       	ldi	r24, 0xA8	; 168
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	0e 94 89 11 	call	0x2312	; 0x2312 <LCD_displayString>
			while(UART_recieveByte()!=1);
     e7a:	0e 94 db 13 	call	0x27b6	; 0x27b6 <UART_recieveByte>
     e7e:	81 30       	cpi	r24, 0x01	; 1
     e80:	e1 f7       	brne	.-8      	; 0xe7a <open_door+0x24>
     e82:	42 c0       	rjmp	.+132    	; 0xf08 <open_door+0xb2>

			break;
		}
		else
		{
			UART_sendByte(open);
     e84:	8f e6       	ldi	r24, 0x6F	; 111
     e86:	0e 94 c4 13 	call	0x2788	; 0x2788 <UART_sendByte>
			LCD_clearScreen();
     e8a:	0e 94 30 12 	call	0x2460	; 0x2460 <LCD_clearScreen>
			LCD_moveCursor(0,0);
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	60 e0       	ldi	r22, 0x00	; 0
     e92:	0e 94 b2 11 	call	0x2364	; 0x2364 <LCD_moveCursor>
			LCD_displayString("Pls enter Pass:");
     e96:	8c e7       	ldi	r24, 0x7C	; 124
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	0e 94 89 11 	call	0x2312	; 0x2312 <LCD_displayString>
			LCD_moveCursor(1,0);
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	60 e0       	ldi	r22, 0x00	; 0
     ea2:	0e 94 b2 11 	call	0x2364	; 0x2364 <LCD_moveCursor>

			get_pass(password,pass_size,0);
     ea6:	81 ee       	ldi	r24, 0xE1	; 225
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	65 e0       	ldi	r22, 0x05	; 5
     eac:	40 e0       	ldi	r20, 0x00	; 0
     eae:	0e 94 fd 05 	call	0xbfa	; 0xbfa <get_pass>
			//while(KEYPAD_getPressedKey()!='=');
			UART_sendArray(password,pass_size);
     eb2:	81 ee       	ldi	r24, 0xE1	; 225
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	65 e0       	ldi	r22, 0x05	; 5
     eb8:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <UART_sendArray>
			if(UART_recieveByte()==0)
     ebc:	0e 94 db 13 	call	0x27b6	; 0x27b6 <UART_recieveByte>
     ec0:	88 23       	and	r24, r24
     ec2:	21 f4       	brne	.+8      	; 0xecc <open_door+0x76>
			{
				counter++;
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	8f 5f       	subi	r24, 0xFF	; 255
     ec8:	89 83       	std	Y+1, r24	; 0x01
     eca:	cb cf       	rjmp	.-106    	; 0xe62 <open_door+0xc>
			}else
			{
				LCD_clearScreen();
     ecc:	0e 94 30 12 	call	0x2460	; 0x2460 <LCD_clearScreen>
				LCD_displayString("Door Unlocking");
     ed0:	83 eb       	ldi	r24, 0xB3	; 179
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	0e 94 89 11 	call	0x2312	; 0x2312 <LCD_displayString>

				while(UART_recieveByte()!=1);
     ed8:	0e 94 db 13 	call	0x27b6	; 0x27b6 <UART_recieveByte>
     edc:	81 30       	cpi	r24, 0x01	; 1
     ede:	e1 f7       	brne	.-8      	; 0xed8 <open_door+0x82>

				LCD_clearScreen();
     ee0:	0e 94 30 12 	call	0x2460	; 0x2460 <LCD_clearScreen>
				LCD_displayString("Door Hold");
     ee4:	82 ec       	ldi	r24, 0xC2	; 194
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	0e 94 89 11 	call	0x2312	; 0x2312 <LCD_displayString>

				while(UART_recieveByte()!=1);
     eec:	0e 94 db 13 	call	0x27b6	; 0x27b6 <UART_recieveByte>
     ef0:	81 30       	cpi	r24, 0x01	; 1
     ef2:	e1 f7       	brne	.-8      	; 0xeec <open_door+0x96>

				LCD_clearScreen();
     ef4:	0e 94 30 12 	call	0x2460	; 0x2460 <LCD_clearScreen>
				LCD_displayString("Door Locking");
     ef8:	8c ec       	ldi	r24, 0xCC	; 204
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	0e 94 89 11 	call	0x2312	; 0x2312 <LCD_displayString>

				while(UART_recieveByte()!=1);
     f00:	0e 94 db 13 	call	0x27b6	; 0x27b6 <UART_recieveByte>
     f04:	81 30       	cpi	r24, 0x01	; 1
     f06:	e1 f7       	brne	.-8      	; 0xf00 <open_door+0xaa>
				break;
			}
		}
	}while(1);

}
     f08:	0f 90       	pop	r0
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	08 95       	ret

00000f10 <change_pass>:

void change_pass(void)
{
     f10:	df 93       	push	r29
     f12:	cf 93       	push	r28
     f14:	0f 92       	push	r0
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
	uint8 counter=0;
     f1a:	19 82       	std	Y+1, r1	; 0x01
	do{
		if (counter==2){
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	82 30       	cpi	r24, 0x02	; 2
     f20:	71 f4       	brne	.+28     	; 0xf3e <change_pass+0x2e>
			UART_sendByte(error);
     f22:	85 e6       	ldi	r24, 0x65	; 101
     f24:	0e 94 c4 13 	call	0x2788	; 0x2788 <UART_sendByte>
			LCD_clearScreen();
     f28:	0e 94 30 12 	call	0x2460	; 0x2460 <LCD_clearScreen>
			LCD_displayString("Wrong Pass");
     f2c:	88 ea       	ldi	r24, 0xA8	; 168
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	0e 94 89 11 	call	0x2312	; 0x2312 <LCD_displayString>
			while(UART_recieveByte()!=1);
     f34:	0e 94 db 13 	call	0x27b6	; 0x27b6 <UART_recieveByte>
     f38:	81 30       	cpi	r24, 0x01	; 1
     f3a:	e1 f7       	brne	.-8      	; 0xf34 <change_pass+0x24>
     f3c:	24 c0       	rjmp	.+72     	; 0xf86 <change_pass+0x76>
			break;

		}
		else
		{
			UART_sendByte(change);
     f3e:	83 e6       	ldi	r24, 0x63	; 99
     f40:	0e 94 c4 13 	call	0x2788	; 0x2788 <UART_sendByte>
			LCD_clearScreen();
     f44:	0e 94 30 12 	call	0x2460	; 0x2460 <LCD_clearScreen>
			LCD_moveCursor(0,0);
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	60 e0       	ldi	r22, 0x00	; 0
     f4c:	0e 94 b2 11 	call	0x2364	; 0x2364 <LCD_moveCursor>
			LCD_displayString("Pls enter Pass:");
     f50:	8c e7       	ldi	r24, 0x7C	; 124
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	0e 94 89 11 	call	0x2312	; 0x2312 <LCD_displayString>
			LCD_moveCursor(1,0);
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	60 e0       	ldi	r22, 0x00	; 0
     f5c:	0e 94 b2 11 	call	0x2364	; 0x2364 <LCD_moveCursor>

			get_pass(password,pass_size,0);
     f60:	81 ee       	ldi	r24, 0xE1	; 225
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	65 e0       	ldi	r22, 0x05	; 5
     f66:	40 e0       	ldi	r20, 0x00	; 0
     f68:	0e 94 fd 05 	call	0xbfa	; 0xbfa <get_pass>
			UART_sendArray(password,pass_size);
     f6c:	81 ee       	ldi	r24, 0xE1	; 225
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	65 e0       	ldi	r22, 0x05	; 5
     f72:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <UART_sendArray>
			if(UART_recieveByte()==0)
     f76:	0e 94 db 13 	call	0x27b6	; 0x27b6 <UART_recieveByte>
     f7a:	88 23       	and	r24, r24
     f7c:	21 f4       	brne	.+8      	; 0xf86 <change_pass+0x76>
			{
				counter++;
     f7e:	89 81       	ldd	r24, Y+1	; 0x01
     f80:	8f 5f       	subi	r24, 0xFF	; 255
     f82:	89 83       	std	Y+1, r24	; 0x01
     f84:	cb cf       	rjmp	.-106    	; 0xf1c <change_pass+0xc>
			}else{break;}
		}
	}while(1);

	if(counter!=2)
     f86:	89 81       	ldd	r24, Y+1	; 0x01
     f88:	82 30       	cpi	r24, 0x02	; 2
     f8a:	11 f0       	breq	.+4      	; 0xf90 <change_pass+0x80>
	{
		set_pass();
     f8c:	0e 94 e5 06 	call	0xdca	; 0xdca <set_pass>
	}


}
     f90:	0f 90       	pop	r0
     f92:	cf 91       	pop	r28
     f94:	df 91       	pop	r29
     f96:	08 95       	ret

00000f98 <LCD_arrayDisplay>:
void LCD_arrayDisplay(uint8 *array,uint8 size)
{
     f98:	df 93       	push	r29
     f9a:	cf 93       	push	r28
     f9c:	00 d0       	rcall	.+0      	; 0xf9e <LCD_arrayDisplay+0x6>
     f9e:	00 d0       	rcall	.+0      	; 0xfa0 <LCD_arrayDisplay+0x8>
     fa0:	cd b7       	in	r28, 0x3d	; 61
     fa2:	de b7       	in	r29, 0x3e	; 62
     fa4:	9b 83       	std	Y+3, r25	; 0x03
     fa6:	8a 83       	std	Y+2, r24	; 0x02
     fa8:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i ;
	for(i=0;i<size;i++)
     faa:	19 82       	std	Y+1, r1	; 0x01
     fac:	10 c0       	rjmp	.+32     	; 0xfce <LCD_arrayDisplay+0x36>
	{
		LCD_intgerToString(array[i]);
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	9b 81       	ldd	r25, Y+3	; 0x03
     fb8:	fc 01       	movw	r30, r24
     fba:	e2 0f       	add	r30, r18
     fbc:	f3 1f       	adc	r31, r19
     fbe:	80 81       	ld	r24, Z
     fc0:	88 2f       	mov	r24, r24
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	0e 94 0d 12 	call	0x241a	; 0x241a <LCD_intgerToString>

}
void LCD_arrayDisplay(uint8 *array,uint8 size)
{
	uint8 i ;
	for(i=0;i<size;i++)
     fc8:	89 81       	ldd	r24, Y+1	; 0x01
     fca:	8f 5f       	subi	r24, 0xFF	; 255
     fcc:	89 83       	std	Y+1, r24	; 0x01
     fce:	99 81       	ldd	r25, Y+1	; 0x01
     fd0:	8c 81       	ldd	r24, Y+4	; 0x04
     fd2:	98 17       	cp	r25, r24
     fd4:	60 f3       	brcs	.-40     	; 0xfae <LCD_arrayDisplay+0x16>
	{
		LCD_intgerToString(array[i]);
	}
}
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	cf 91       	pop	r28
     fe0:	df 91       	pop	r29
     fe2:	08 95       	ret

00000fe4 <UART_sendArray>:

void UART_sendArray(uint8 *array,uint8 size)
{
     fe4:	df 93       	push	r29
     fe6:	cf 93       	push	r28
     fe8:	00 d0       	rcall	.+0      	; 0xfea <UART_sendArray+0x6>
     fea:	00 d0       	rcall	.+0      	; 0xfec <UART_sendArray+0x8>
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
     ff0:	9b 83       	std	Y+3, r25	; 0x03
     ff2:	8a 83       	std	Y+2, r24	; 0x02
     ff4:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i ;
	for(i=0;i<size;i++)
     ff6:	19 82       	std	Y+1, r1	; 0x01
     ff8:	0e c0       	rjmp	.+28     	; 0x1016 <UART_sendArray+0x32>
	{
		UART_sendByte(array[i]);
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	8a 81       	ldd	r24, Y+2	; 0x02
    1002:	9b 81       	ldd	r25, Y+3	; 0x03
    1004:	fc 01       	movw	r30, r24
    1006:	e2 0f       	add	r30, r18
    1008:	f3 1f       	adc	r31, r19
    100a:	80 81       	ld	r24, Z
    100c:	0e 94 c4 13 	call	0x2788	; 0x2788 <UART_sendByte>
}

void UART_sendArray(uint8 *array,uint8 size)
{
	uint8 i ;
	for(i=0;i<size;i++)
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	8f 5f       	subi	r24, 0xFF	; 255
    1014:	89 83       	std	Y+1, r24	; 0x01
    1016:	99 81       	ldd	r25, Y+1	; 0x01
    1018:	8c 81       	ldd	r24, Y+4	; 0x04
    101a:	98 17       	cp	r25, r24
    101c:	70 f3       	brcs	.-36     	; 0xffa <UART_sendArray+0x16>
	{
		UART_sendByte(array[i]);
	}
}
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	08 95       	ret

0000102c <Timer1_ISR>:
void Timer1_ISR(void){
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
	sec++;
    1034:	80 91 f4 00 	lds	r24, 0x00F4
    1038:	8f 5f       	subi	r24, 0xFF	; 255
    103a:	80 93 f4 00 	sts	0x00F4, r24
}
    103e:	cf 91       	pop	r28
    1040:	df 91       	pop	r29
    1042:	08 95       	ret

00001044 <Timer1_delay>:

void Timer1_delay(uint8 delay){
    1044:	df 93       	push	r29
    1046:	cf 93       	push	r28
    1048:	0f 92       	push	r0
    104a:	cd b7       	in	r28, 0x3d	; 61
    104c:	de b7       	in	r29, 0x3e	; 62
    104e:	89 83       	std	Y+1, r24	; 0x01
	Timer1_init(&Timer1_ConfigStruct);
    1050:	86 ee       	ldi	r24, 0xE6	; 230
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	0e 94 94 12 	call	0x2528	; 0x2528 <Timer1_init>
	Timer1_setCallBack(Timer1_ISR);
    1058:	86 e1       	ldi	r24, 0x16	; 22
    105a:	98 e0       	ldi	r25, 0x08	; 8
    105c:	0e 94 21 13 	call	0x2642	; 0x2642 <Timer1_setCallBack>
	while(sec != delay);
    1060:	90 91 f4 00 	lds	r25, 0x00F4
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	98 17       	cp	r25, r24
    1068:	d9 f7       	brne	.-10     	; 0x1060 <Timer1_delay+0x1c>
	Timer1_deInit();
    106a:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <Timer1_deInit>
	sec=0;
    106e:	10 92 f4 00 	sts	0x00F4, r1
}
    1072:	0f 90       	pop	r0
    1074:	cf 91       	pop	r28
    1076:	df 91       	pop	r29
    1078:	08 95       	ret

0000107a <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    107a:	df 93       	push	r29
    107c:	cf 93       	push	r28
    107e:	00 d0       	rcall	.+0      	; 0x1080 <GPIO_setupPinDirection+0x6>
    1080:	00 d0       	rcall	.+0      	; 0x1082 <GPIO_setupPinDirection+0x8>
    1082:	0f 92       	push	r0
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
    1088:	89 83       	std	Y+1, r24	; 0x01
    108a:	6a 83       	std	Y+2, r22	; 0x02
    108c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	88 30       	cpi	r24, 0x08	; 8
    1092:	08 f0       	brcs	.+2      	; 0x1096 <GPIO_setupPinDirection+0x1c>
    1094:	d5 c0       	rjmp	.+426    	; 0x1240 <GPIO_setupPinDirection+0x1c6>
    1096:	89 81       	ldd	r24, Y+1	; 0x01
    1098:	84 30       	cpi	r24, 0x04	; 4
    109a:	08 f0       	brcs	.+2      	; 0x109e <GPIO_setupPinDirection+0x24>
    109c:	d1 c0       	rjmp	.+418    	; 0x1240 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    109e:	89 81       	ldd	r24, Y+1	; 0x01
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	3d 83       	std	Y+5, r19	; 0x05
    10a6:	2c 83       	std	Y+4, r18	; 0x04
    10a8:	8c 81       	ldd	r24, Y+4	; 0x04
    10aa:	9d 81       	ldd	r25, Y+5	; 0x05
    10ac:	81 30       	cpi	r24, 0x01	; 1
    10ae:	91 05       	cpc	r25, r1
    10b0:	09 f4       	brne	.+2      	; 0x10b4 <GPIO_setupPinDirection+0x3a>
    10b2:	43 c0       	rjmp	.+134    	; 0x113a <GPIO_setupPinDirection+0xc0>
    10b4:	2c 81       	ldd	r18, Y+4	; 0x04
    10b6:	3d 81       	ldd	r19, Y+5	; 0x05
    10b8:	22 30       	cpi	r18, 0x02	; 2
    10ba:	31 05       	cpc	r19, r1
    10bc:	2c f4       	brge	.+10     	; 0x10c8 <GPIO_setupPinDirection+0x4e>
    10be:	8c 81       	ldd	r24, Y+4	; 0x04
    10c0:	9d 81       	ldd	r25, Y+5	; 0x05
    10c2:	00 97       	sbiw	r24, 0x00	; 0
    10c4:	71 f0       	breq	.+28     	; 0x10e2 <GPIO_setupPinDirection+0x68>
    10c6:	bc c0       	rjmp	.+376    	; 0x1240 <GPIO_setupPinDirection+0x1c6>
    10c8:	2c 81       	ldd	r18, Y+4	; 0x04
    10ca:	3d 81       	ldd	r19, Y+5	; 0x05
    10cc:	22 30       	cpi	r18, 0x02	; 2
    10ce:	31 05       	cpc	r19, r1
    10d0:	09 f4       	brne	.+2      	; 0x10d4 <GPIO_setupPinDirection+0x5a>
    10d2:	5f c0       	rjmp	.+190    	; 0x1192 <GPIO_setupPinDirection+0x118>
    10d4:	8c 81       	ldd	r24, Y+4	; 0x04
    10d6:	9d 81       	ldd	r25, Y+5	; 0x05
    10d8:	83 30       	cpi	r24, 0x03	; 3
    10da:	91 05       	cpc	r25, r1
    10dc:	09 f4       	brne	.+2      	; 0x10e0 <GPIO_setupPinDirection+0x66>
    10de:	85 c0       	rjmp	.+266    	; 0x11ea <GPIO_setupPinDirection+0x170>
    10e0:	af c0       	rjmp	.+350    	; 0x1240 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    10e2:	8b 81       	ldd	r24, Y+3	; 0x03
    10e4:	81 30       	cpi	r24, 0x01	; 1
    10e6:	a1 f4       	brne	.+40     	; 0x1110 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    10e8:	aa e3       	ldi	r26, 0x3A	; 58
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	ea e3       	ldi	r30, 0x3A	; 58
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	48 2f       	mov	r20, r24
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	02 2e       	mov	r0, r18
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <GPIO_setupPinDirection+0x8c>
    1102:	88 0f       	add	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	0a 94       	dec	r0
    1108:	e2 f7       	brpl	.-8      	; 0x1102 <GPIO_setupPinDirection+0x88>
    110a:	84 2b       	or	r24, r20
    110c:	8c 93       	st	X, r24
    110e:	98 c0       	rjmp	.+304    	; 0x1240 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1110:	aa e3       	ldi	r26, 0x3A	; 58
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	ea e3       	ldi	r30, 0x3A	; 58
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	48 2f       	mov	r20, r24
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	02 2e       	mov	r0, r18
    1128:	02 c0       	rjmp	.+4      	; 0x112e <GPIO_setupPinDirection+0xb4>
    112a:	88 0f       	add	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	0a 94       	dec	r0
    1130:	e2 f7       	brpl	.-8      	; 0x112a <GPIO_setupPinDirection+0xb0>
    1132:	80 95       	com	r24
    1134:	84 23       	and	r24, r20
    1136:	8c 93       	st	X, r24
    1138:	83 c0       	rjmp	.+262    	; 0x1240 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	81 30       	cpi	r24, 0x01	; 1
    113e:	a1 f4       	brne	.+40     	; 0x1168 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1140:	a7 e3       	ldi	r26, 0x37	; 55
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	e7 e3       	ldi	r30, 0x37	; 55
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	48 2f       	mov	r20, r24
    114c:	8a 81       	ldd	r24, Y+2	; 0x02
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	02 2e       	mov	r0, r18
    1158:	02 c0       	rjmp	.+4      	; 0x115e <GPIO_setupPinDirection+0xe4>
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	0a 94       	dec	r0
    1160:	e2 f7       	brpl	.-8      	; 0x115a <GPIO_setupPinDirection+0xe0>
    1162:	84 2b       	or	r24, r20
    1164:	8c 93       	st	X, r24
    1166:	6c c0       	rjmp	.+216    	; 0x1240 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1168:	a7 e3       	ldi	r26, 0x37	; 55
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	e7 e3       	ldi	r30, 0x37	; 55
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	48 2f       	mov	r20, r24
    1174:	8a 81       	ldd	r24, Y+2	; 0x02
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	02 2e       	mov	r0, r18
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <GPIO_setupPinDirection+0x10c>
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	0a 94       	dec	r0
    1188:	e2 f7       	brpl	.-8      	; 0x1182 <GPIO_setupPinDirection+0x108>
    118a:	80 95       	com	r24
    118c:	84 23       	and	r24, r20
    118e:	8c 93       	st	X, r24
    1190:	57 c0       	rjmp	.+174    	; 0x1240 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	81 30       	cpi	r24, 0x01	; 1
    1196:	a1 f4       	brne	.+40     	; 0x11c0 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1198:	a4 e3       	ldi	r26, 0x34	; 52
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e4 e3       	ldi	r30, 0x34	; 52
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	48 2f       	mov	r20, r24
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	02 2e       	mov	r0, r18
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <GPIO_setupPinDirection+0x13c>
    11b2:	88 0f       	add	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	0a 94       	dec	r0
    11b8:	e2 f7       	brpl	.-8      	; 0x11b2 <GPIO_setupPinDirection+0x138>
    11ba:	84 2b       	or	r24, r20
    11bc:	8c 93       	st	X, r24
    11be:	40 c0       	rjmp	.+128    	; 0x1240 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    11c0:	a4 e3       	ldi	r26, 0x34	; 52
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	e4 e3       	ldi	r30, 0x34	; 52
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	48 2f       	mov	r20, r24
    11cc:	8a 81       	ldd	r24, Y+2	; 0x02
    11ce:	28 2f       	mov	r18, r24
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	02 2e       	mov	r0, r18
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <GPIO_setupPinDirection+0x164>
    11da:	88 0f       	add	r24, r24
    11dc:	99 1f       	adc	r25, r25
    11de:	0a 94       	dec	r0
    11e0:	e2 f7       	brpl	.-8      	; 0x11da <GPIO_setupPinDirection+0x160>
    11e2:	80 95       	com	r24
    11e4:	84 23       	and	r24, r20
    11e6:	8c 93       	st	X, r24
    11e8:	2b c0       	rjmp	.+86     	; 0x1240 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	81 30       	cpi	r24, 0x01	; 1
    11ee:	a1 f4       	brne	.+40     	; 0x1218 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    11f0:	a1 e3       	ldi	r26, 0x31	; 49
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	e1 e3       	ldi	r30, 0x31	; 49
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	48 2f       	mov	r20, r24
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	02 2e       	mov	r0, r18
    1208:	02 c0       	rjmp	.+4      	; 0x120e <GPIO_setupPinDirection+0x194>
    120a:	88 0f       	add	r24, r24
    120c:	99 1f       	adc	r25, r25
    120e:	0a 94       	dec	r0
    1210:	e2 f7       	brpl	.-8      	; 0x120a <GPIO_setupPinDirection+0x190>
    1212:	84 2b       	or	r24, r20
    1214:	8c 93       	st	X, r24
    1216:	14 c0       	rjmp	.+40     	; 0x1240 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1218:	a1 e3       	ldi	r26, 0x31	; 49
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	e1 e3       	ldi	r30, 0x31	; 49
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	48 2f       	mov	r20, r24
    1224:	8a 81       	ldd	r24, Y+2	; 0x02
    1226:	28 2f       	mov	r18, r24
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	02 2e       	mov	r0, r18
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <GPIO_setupPinDirection+0x1bc>
    1232:	88 0f       	add	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	0a 94       	dec	r0
    1238:	e2 f7       	brpl	.-8      	; 0x1232 <GPIO_setupPinDirection+0x1b8>
    123a:	80 95       	com	r24
    123c:	84 23       	and	r24, r20
    123e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	cf 91       	pop	r28
    124c:	df 91       	pop	r29
    124e:	08 95       	ret

00001250 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1250:	df 93       	push	r29
    1252:	cf 93       	push	r28
    1254:	00 d0       	rcall	.+0      	; 0x1256 <GPIO_writePin+0x6>
    1256:	00 d0       	rcall	.+0      	; 0x1258 <GPIO_writePin+0x8>
    1258:	0f 92       	push	r0
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
    125e:	89 83       	std	Y+1, r24	; 0x01
    1260:	6a 83       	std	Y+2, r22	; 0x02
    1262:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	88 30       	cpi	r24, 0x08	; 8
    1268:	08 f0       	brcs	.+2      	; 0x126c <GPIO_writePin+0x1c>
    126a:	d5 c0       	rjmp	.+426    	; 0x1416 <GPIO_writePin+0x1c6>
    126c:	89 81       	ldd	r24, Y+1	; 0x01
    126e:	84 30       	cpi	r24, 0x04	; 4
    1270:	08 f0       	brcs	.+2      	; 0x1274 <GPIO_writePin+0x24>
    1272:	d1 c0       	rjmp	.+418    	; 0x1416 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1274:	89 81       	ldd	r24, Y+1	; 0x01
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	3d 83       	std	Y+5, r19	; 0x05
    127c:	2c 83       	std	Y+4, r18	; 0x04
    127e:	8c 81       	ldd	r24, Y+4	; 0x04
    1280:	9d 81       	ldd	r25, Y+5	; 0x05
    1282:	81 30       	cpi	r24, 0x01	; 1
    1284:	91 05       	cpc	r25, r1
    1286:	09 f4       	brne	.+2      	; 0x128a <GPIO_writePin+0x3a>
    1288:	43 c0       	rjmp	.+134    	; 0x1310 <GPIO_writePin+0xc0>
    128a:	2c 81       	ldd	r18, Y+4	; 0x04
    128c:	3d 81       	ldd	r19, Y+5	; 0x05
    128e:	22 30       	cpi	r18, 0x02	; 2
    1290:	31 05       	cpc	r19, r1
    1292:	2c f4       	brge	.+10     	; 0x129e <GPIO_writePin+0x4e>
    1294:	8c 81       	ldd	r24, Y+4	; 0x04
    1296:	9d 81       	ldd	r25, Y+5	; 0x05
    1298:	00 97       	sbiw	r24, 0x00	; 0
    129a:	71 f0       	breq	.+28     	; 0x12b8 <GPIO_writePin+0x68>
    129c:	bc c0       	rjmp	.+376    	; 0x1416 <GPIO_writePin+0x1c6>
    129e:	2c 81       	ldd	r18, Y+4	; 0x04
    12a0:	3d 81       	ldd	r19, Y+5	; 0x05
    12a2:	22 30       	cpi	r18, 0x02	; 2
    12a4:	31 05       	cpc	r19, r1
    12a6:	09 f4       	brne	.+2      	; 0x12aa <GPIO_writePin+0x5a>
    12a8:	5f c0       	rjmp	.+190    	; 0x1368 <GPIO_writePin+0x118>
    12aa:	8c 81       	ldd	r24, Y+4	; 0x04
    12ac:	9d 81       	ldd	r25, Y+5	; 0x05
    12ae:	83 30       	cpi	r24, 0x03	; 3
    12b0:	91 05       	cpc	r25, r1
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <GPIO_writePin+0x66>
    12b4:	85 c0       	rjmp	.+266    	; 0x13c0 <GPIO_writePin+0x170>
    12b6:	af c0       	rjmp	.+350    	; 0x1416 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	81 30       	cpi	r24, 0x01	; 1
    12bc:	a1 f4       	brne	.+40     	; 0x12e6 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    12be:	ab e3       	ldi	r26, 0x3B	; 59
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	eb e3       	ldi	r30, 0x3B	; 59
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	48 2f       	mov	r20, r24
    12ca:	8a 81       	ldd	r24, Y+2	; 0x02
    12cc:	28 2f       	mov	r18, r24
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	02 2e       	mov	r0, r18
    12d6:	02 c0       	rjmp	.+4      	; 0x12dc <GPIO_writePin+0x8c>
    12d8:	88 0f       	add	r24, r24
    12da:	99 1f       	adc	r25, r25
    12dc:	0a 94       	dec	r0
    12de:	e2 f7       	brpl	.-8      	; 0x12d8 <GPIO_writePin+0x88>
    12e0:	84 2b       	or	r24, r20
    12e2:	8c 93       	st	X, r24
    12e4:	98 c0       	rjmp	.+304    	; 0x1416 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    12e6:	ab e3       	ldi	r26, 0x3B	; 59
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	eb e3       	ldi	r30, 0x3B	; 59
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	48 2f       	mov	r20, r24
    12f2:	8a 81       	ldd	r24, Y+2	; 0x02
    12f4:	28 2f       	mov	r18, r24
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	02 2e       	mov	r0, r18
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <GPIO_writePin+0xb4>
    1300:	88 0f       	add	r24, r24
    1302:	99 1f       	adc	r25, r25
    1304:	0a 94       	dec	r0
    1306:	e2 f7       	brpl	.-8      	; 0x1300 <GPIO_writePin+0xb0>
    1308:	80 95       	com	r24
    130a:	84 23       	and	r24, r20
    130c:	8c 93       	st	X, r24
    130e:	83 c0       	rjmp	.+262    	; 0x1416 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1310:	8b 81       	ldd	r24, Y+3	; 0x03
    1312:	81 30       	cpi	r24, 0x01	; 1
    1314:	a1 f4       	brne	.+40     	; 0x133e <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1316:	a8 e3       	ldi	r26, 0x38	; 56
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	e8 e3       	ldi	r30, 0x38	; 56
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	48 2f       	mov	r20, r24
    1322:	8a 81       	ldd	r24, Y+2	; 0x02
    1324:	28 2f       	mov	r18, r24
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	02 2e       	mov	r0, r18
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <GPIO_writePin+0xe4>
    1330:	88 0f       	add	r24, r24
    1332:	99 1f       	adc	r25, r25
    1334:	0a 94       	dec	r0
    1336:	e2 f7       	brpl	.-8      	; 0x1330 <GPIO_writePin+0xe0>
    1338:	84 2b       	or	r24, r20
    133a:	8c 93       	st	X, r24
    133c:	6c c0       	rjmp	.+216    	; 0x1416 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    133e:	a8 e3       	ldi	r26, 0x38	; 56
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	e8 e3       	ldi	r30, 0x38	; 56
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	48 2f       	mov	r20, r24
    134a:	8a 81       	ldd	r24, Y+2	; 0x02
    134c:	28 2f       	mov	r18, r24
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	02 2e       	mov	r0, r18
    1356:	02 c0       	rjmp	.+4      	; 0x135c <GPIO_writePin+0x10c>
    1358:	88 0f       	add	r24, r24
    135a:	99 1f       	adc	r25, r25
    135c:	0a 94       	dec	r0
    135e:	e2 f7       	brpl	.-8      	; 0x1358 <GPIO_writePin+0x108>
    1360:	80 95       	com	r24
    1362:	84 23       	and	r24, r20
    1364:	8c 93       	st	X, r24
    1366:	57 c0       	rjmp	.+174    	; 0x1416 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	81 30       	cpi	r24, 0x01	; 1
    136c:	a1 f4       	brne	.+40     	; 0x1396 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    136e:	a5 e3       	ldi	r26, 0x35	; 53
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	e5 e3       	ldi	r30, 0x35	; 53
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	48 2f       	mov	r20, r24
    137a:	8a 81       	ldd	r24, Y+2	; 0x02
    137c:	28 2f       	mov	r18, r24
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	02 2e       	mov	r0, r18
    1386:	02 c0       	rjmp	.+4      	; 0x138c <GPIO_writePin+0x13c>
    1388:	88 0f       	add	r24, r24
    138a:	99 1f       	adc	r25, r25
    138c:	0a 94       	dec	r0
    138e:	e2 f7       	brpl	.-8      	; 0x1388 <GPIO_writePin+0x138>
    1390:	84 2b       	or	r24, r20
    1392:	8c 93       	st	X, r24
    1394:	40 c0       	rjmp	.+128    	; 0x1416 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1396:	a5 e3       	ldi	r26, 0x35	; 53
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	e5 e3       	ldi	r30, 0x35	; 53
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	48 2f       	mov	r20, r24
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	28 2f       	mov	r18, r24
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	02 2e       	mov	r0, r18
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <GPIO_writePin+0x164>
    13b0:	88 0f       	add	r24, r24
    13b2:	99 1f       	adc	r25, r25
    13b4:	0a 94       	dec	r0
    13b6:	e2 f7       	brpl	.-8      	; 0x13b0 <GPIO_writePin+0x160>
    13b8:	80 95       	com	r24
    13ba:	84 23       	and	r24, r20
    13bc:	8c 93       	st	X, r24
    13be:	2b c0       	rjmp	.+86     	; 0x1416 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	81 30       	cpi	r24, 0x01	; 1
    13c4:	a1 f4       	brne	.+40     	; 0x13ee <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    13c6:	a2 e3       	ldi	r26, 0x32	; 50
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	e2 e3       	ldi	r30, 0x32	; 50
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	48 2f       	mov	r20, r24
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	28 2f       	mov	r18, r24
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	02 2e       	mov	r0, r18
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <GPIO_writePin+0x194>
    13e0:	88 0f       	add	r24, r24
    13e2:	99 1f       	adc	r25, r25
    13e4:	0a 94       	dec	r0
    13e6:	e2 f7       	brpl	.-8      	; 0x13e0 <GPIO_writePin+0x190>
    13e8:	84 2b       	or	r24, r20
    13ea:	8c 93       	st	X, r24
    13ec:	14 c0       	rjmp	.+40     	; 0x1416 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    13ee:	a2 e3       	ldi	r26, 0x32	; 50
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	e2 e3       	ldi	r30, 0x32	; 50
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	48 2f       	mov	r20, r24
    13fa:	8a 81       	ldd	r24, Y+2	; 0x02
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	02 2e       	mov	r0, r18
    1406:	02 c0       	rjmp	.+4      	; 0x140c <GPIO_writePin+0x1bc>
    1408:	88 0f       	add	r24, r24
    140a:	99 1f       	adc	r25, r25
    140c:	0a 94       	dec	r0
    140e:	e2 f7       	brpl	.-8      	; 0x1408 <GPIO_writePin+0x1b8>
    1410:	80 95       	com	r24
    1412:	84 23       	and	r24, r20
    1414:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1416:	0f 90       	pop	r0
    1418:	0f 90       	pop	r0
    141a:	0f 90       	pop	r0
    141c:	0f 90       	pop	r0
    141e:	0f 90       	pop	r0
    1420:	cf 91       	pop	r28
    1422:	df 91       	pop	r29
    1424:	08 95       	ret

00001426 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1426:	df 93       	push	r29
    1428:	cf 93       	push	r28
    142a:	00 d0       	rcall	.+0      	; 0x142c <GPIO_readPin+0x6>
    142c:	00 d0       	rcall	.+0      	; 0x142e <GPIO_readPin+0x8>
    142e:	0f 92       	push	r0
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
    1434:	8a 83       	std	Y+2, r24	; 0x02
    1436:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1438:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	88 30       	cpi	r24, 0x08	; 8
    143e:	08 f0       	brcs	.+2      	; 0x1442 <GPIO_readPin+0x1c>
    1440:	84 c0       	rjmp	.+264    	; 0x154a <GPIO_readPin+0x124>
    1442:	8a 81       	ldd	r24, Y+2	; 0x02
    1444:	84 30       	cpi	r24, 0x04	; 4
    1446:	08 f0       	brcs	.+2      	; 0x144a <GPIO_readPin+0x24>
    1448:	80 c0       	rjmp	.+256    	; 0x154a <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    144a:	8a 81       	ldd	r24, Y+2	; 0x02
    144c:	28 2f       	mov	r18, r24
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	3d 83       	std	Y+5, r19	; 0x05
    1452:	2c 83       	std	Y+4, r18	; 0x04
    1454:	4c 81       	ldd	r20, Y+4	; 0x04
    1456:	5d 81       	ldd	r21, Y+5	; 0x05
    1458:	41 30       	cpi	r20, 0x01	; 1
    145a:	51 05       	cpc	r21, r1
    145c:	79 f1       	breq	.+94     	; 0x14bc <GPIO_readPin+0x96>
    145e:	8c 81       	ldd	r24, Y+4	; 0x04
    1460:	9d 81       	ldd	r25, Y+5	; 0x05
    1462:	82 30       	cpi	r24, 0x02	; 2
    1464:	91 05       	cpc	r25, r1
    1466:	34 f4       	brge	.+12     	; 0x1474 <GPIO_readPin+0x4e>
    1468:	2c 81       	ldd	r18, Y+4	; 0x04
    146a:	3d 81       	ldd	r19, Y+5	; 0x05
    146c:	21 15       	cp	r18, r1
    146e:	31 05       	cpc	r19, r1
    1470:	69 f0       	breq	.+26     	; 0x148c <GPIO_readPin+0x66>
    1472:	6b c0       	rjmp	.+214    	; 0x154a <GPIO_readPin+0x124>
    1474:	4c 81       	ldd	r20, Y+4	; 0x04
    1476:	5d 81       	ldd	r21, Y+5	; 0x05
    1478:	42 30       	cpi	r20, 0x02	; 2
    147a:	51 05       	cpc	r21, r1
    147c:	b9 f1       	breq	.+110    	; 0x14ec <GPIO_readPin+0xc6>
    147e:	8c 81       	ldd	r24, Y+4	; 0x04
    1480:	9d 81       	ldd	r25, Y+5	; 0x05
    1482:	83 30       	cpi	r24, 0x03	; 3
    1484:	91 05       	cpc	r25, r1
    1486:	09 f4       	brne	.+2      	; 0x148a <GPIO_readPin+0x64>
    1488:	49 c0       	rjmp	.+146    	; 0x151c <GPIO_readPin+0xf6>
    148a:	5f c0       	rjmp	.+190    	; 0x154a <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    148c:	e9 e3       	ldi	r30, 0x39	; 57
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	8b 81       	ldd	r24, Y+3	; 0x03
    1498:	88 2f       	mov	r24, r24
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	a9 01       	movw	r20, r18
    149e:	02 c0       	rjmp	.+4      	; 0x14a4 <GPIO_readPin+0x7e>
    14a0:	55 95       	asr	r21
    14a2:	47 95       	ror	r20
    14a4:	8a 95       	dec	r24
    14a6:	e2 f7       	brpl	.-8      	; 0x14a0 <GPIO_readPin+0x7a>
    14a8:	ca 01       	movw	r24, r20
    14aa:	81 70       	andi	r24, 0x01	; 1
    14ac:	90 70       	andi	r25, 0x00	; 0
    14ae:	88 23       	and	r24, r24
    14b0:	19 f0       	breq	.+6      	; 0x14b8 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	89 83       	std	Y+1, r24	; 0x01
    14b6:	49 c0       	rjmp	.+146    	; 0x154a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14b8:	19 82       	std	Y+1, r1	; 0x01
    14ba:	47 c0       	rjmp	.+142    	; 0x154a <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    14bc:	e6 e3       	ldi	r30, 0x36	; 54
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	28 2f       	mov	r18, r24
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	8b 81       	ldd	r24, Y+3	; 0x03
    14c8:	88 2f       	mov	r24, r24
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	a9 01       	movw	r20, r18
    14ce:	02 c0       	rjmp	.+4      	; 0x14d4 <GPIO_readPin+0xae>
    14d0:	55 95       	asr	r21
    14d2:	47 95       	ror	r20
    14d4:	8a 95       	dec	r24
    14d6:	e2 f7       	brpl	.-8      	; 0x14d0 <GPIO_readPin+0xaa>
    14d8:	ca 01       	movw	r24, r20
    14da:	81 70       	andi	r24, 0x01	; 1
    14dc:	90 70       	andi	r25, 0x00	; 0
    14de:	88 23       	and	r24, r24
    14e0:	19 f0       	breq	.+6      	; 0x14e8 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	89 83       	std	Y+1, r24	; 0x01
    14e6:	31 c0       	rjmp	.+98     	; 0x154a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14e8:	19 82       	std	Y+1, r1	; 0x01
    14ea:	2f c0       	rjmp	.+94     	; 0x154a <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    14ec:	e3 e3       	ldi	r30, 0x33	; 51
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	8b 81       	ldd	r24, Y+3	; 0x03
    14f8:	88 2f       	mov	r24, r24
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	a9 01       	movw	r20, r18
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <GPIO_readPin+0xde>
    1500:	55 95       	asr	r21
    1502:	47 95       	ror	r20
    1504:	8a 95       	dec	r24
    1506:	e2 f7       	brpl	.-8      	; 0x1500 <GPIO_readPin+0xda>
    1508:	ca 01       	movw	r24, r20
    150a:	81 70       	andi	r24, 0x01	; 1
    150c:	90 70       	andi	r25, 0x00	; 0
    150e:	88 23       	and	r24, r24
    1510:	19 f0       	breq	.+6      	; 0x1518 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	89 83       	std	Y+1, r24	; 0x01
    1516:	19 c0       	rjmp	.+50     	; 0x154a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1518:	19 82       	std	Y+1, r1	; 0x01
    151a:	17 c0       	rjmp	.+46     	; 0x154a <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    151c:	e0 e3       	ldi	r30, 0x30	; 48
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	28 2f       	mov	r18, r24
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	8b 81       	ldd	r24, Y+3	; 0x03
    1528:	88 2f       	mov	r24, r24
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	a9 01       	movw	r20, r18
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <GPIO_readPin+0x10e>
    1530:	55 95       	asr	r21
    1532:	47 95       	ror	r20
    1534:	8a 95       	dec	r24
    1536:	e2 f7       	brpl	.-8      	; 0x1530 <GPIO_readPin+0x10a>
    1538:	ca 01       	movw	r24, r20
    153a:	81 70       	andi	r24, 0x01	; 1
    153c:	90 70       	andi	r25, 0x00	; 0
    153e:	88 23       	and	r24, r24
    1540:	19 f0       	breq	.+6      	; 0x1548 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	89 83       	std	Y+1, r24	; 0x01
    1546:	01 c0       	rjmp	.+2      	; 0x154a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1548:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    154a:	89 81       	ldd	r24, Y+1	; 0x01
}
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	cf 91       	pop	r28
    1558:	df 91       	pop	r29
    155a:	08 95       	ret

0000155c <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    155c:	df 93       	push	r29
    155e:	cf 93       	push	r28
    1560:	00 d0       	rcall	.+0      	; 0x1562 <GPIO_setupPortDirection+0x6>
    1562:	00 d0       	rcall	.+0      	; 0x1564 <GPIO_setupPortDirection+0x8>
    1564:	cd b7       	in	r28, 0x3d	; 61
    1566:	de b7       	in	r29, 0x3e	; 62
    1568:	89 83       	std	Y+1, r24	; 0x01
    156a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    156c:	89 81       	ldd	r24, Y+1	; 0x01
    156e:	84 30       	cpi	r24, 0x04	; 4
    1570:	90 f5       	brcc	.+100    	; 0x15d6 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1572:	89 81       	ldd	r24, Y+1	; 0x01
    1574:	28 2f       	mov	r18, r24
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	3c 83       	std	Y+4, r19	; 0x04
    157a:	2b 83       	std	Y+3, r18	; 0x03
    157c:	8b 81       	ldd	r24, Y+3	; 0x03
    157e:	9c 81       	ldd	r25, Y+4	; 0x04
    1580:	81 30       	cpi	r24, 0x01	; 1
    1582:	91 05       	cpc	r25, r1
    1584:	d1 f0       	breq	.+52     	; 0x15ba <GPIO_setupPortDirection+0x5e>
    1586:	2b 81       	ldd	r18, Y+3	; 0x03
    1588:	3c 81       	ldd	r19, Y+4	; 0x04
    158a:	22 30       	cpi	r18, 0x02	; 2
    158c:	31 05       	cpc	r19, r1
    158e:	2c f4       	brge	.+10     	; 0x159a <GPIO_setupPortDirection+0x3e>
    1590:	8b 81       	ldd	r24, Y+3	; 0x03
    1592:	9c 81       	ldd	r25, Y+4	; 0x04
    1594:	00 97       	sbiw	r24, 0x00	; 0
    1596:	61 f0       	breq	.+24     	; 0x15b0 <GPIO_setupPortDirection+0x54>
    1598:	1e c0       	rjmp	.+60     	; 0x15d6 <GPIO_setupPortDirection+0x7a>
    159a:	2b 81       	ldd	r18, Y+3	; 0x03
    159c:	3c 81       	ldd	r19, Y+4	; 0x04
    159e:	22 30       	cpi	r18, 0x02	; 2
    15a0:	31 05       	cpc	r19, r1
    15a2:	81 f0       	breq	.+32     	; 0x15c4 <GPIO_setupPortDirection+0x68>
    15a4:	8b 81       	ldd	r24, Y+3	; 0x03
    15a6:	9c 81       	ldd	r25, Y+4	; 0x04
    15a8:	83 30       	cpi	r24, 0x03	; 3
    15aa:	91 05       	cpc	r25, r1
    15ac:	81 f0       	breq	.+32     	; 0x15ce <GPIO_setupPortDirection+0x72>
    15ae:	13 c0       	rjmp	.+38     	; 0x15d6 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    15b0:	ea e3       	ldi	r30, 0x3A	; 58
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
    15b6:	80 83       	st	Z, r24
    15b8:	0e c0       	rjmp	.+28     	; 0x15d6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    15ba:	e7 e3       	ldi	r30, 0x37	; 55
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	80 83       	st	Z, r24
    15c2:	09 c0       	rjmp	.+18     	; 0x15d6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    15c4:	e4 e3       	ldi	r30, 0x34	; 52
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ca:	80 83       	st	Z, r24
    15cc:	04 c0       	rjmp	.+8      	; 0x15d6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    15ce:	e1 e3       	ldi	r30, 0x31	; 49
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	8a 81       	ldd	r24, Y+2	; 0x02
    15d4:	80 83       	st	Z, r24
			break;
		}
	}
}
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	0f 90       	pop	r0
    15de:	cf 91       	pop	r28
    15e0:	df 91       	pop	r29
    15e2:	08 95       	ret

000015e4 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    15e4:	df 93       	push	r29
    15e6:	cf 93       	push	r28
    15e8:	00 d0       	rcall	.+0      	; 0x15ea <GPIO_writePort+0x6>
    15ea:	00 d0       	rcall	.+0      	; 0x15ec <GPIO_writePort+0x8>
    15ec:	cd b7       	in	r28, 0x3d	; 61
    15ee:	de b7       	in	r29, 0x3e	; 62
    15f0:	89 83       	std	Y+1, r24	; 0x01
    15f2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    15f4:	89 81       	ldd	r24, Y+1	; 0x01
    15f6:	84 30       	cpi	r24, 0x04	; 4
    15f8:	90 f5       	brcc	.+100    	; 0x165e <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    15fa:	89 81       	ldd	r24, Y+1	; 0x01
    15fc:	28 2f       	mov	r18, r24
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	3c 83       	std	Y+4, r19	; 0x04
    1602:	2b 83       	std	Y+3, r18	; 0x03
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	9c 81       	ldd	r25, Y+4	; 0x04
    1608:	81 30       	cpi	r24, 0x01	; 1
    160a:	91 05       	cpc	r25, r1
    160c:	d1 f0       	breq	.+52     	; 0x1642 <GPIO_writePort+0x5e>
    160e:	2b 81       	ldd	r18, Y+3	; 0x03
    1610:	3c 81       	ldd	r19, Y+4	; 0x04
    1612:	22 30       	cpi	r18, 0x02	; 2
    1614:	31 05       	cpc	r19, r1
    1616:	2c f4       	brge	.+10     	; 0x1622 <GPIO_writePort+0x3e>
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	9c 81       	ldd	r25, Y+4	; 0x04
    161c:	00 97       	sbiw	r24, 0x00	; 0
    161e:	61 f0       	breq	.+24     	; 0x1638 <GPIO_writePort+0x54>
    1620:	1e c0       	rjmp	.+60     	; 0x165e <GPIO_writePort+0x7a>
    1622:	2b 81       	ldd	r18, Y+3	; 0x03
    1624:	3c 81       	ldd	r19, Y+4	; 0x04
    1626:	22 30       	cpi	r18, 0x02	; 2
    1628:	31 05       	cpc	r19, r1
    162a:	81 f0       	breq	.+32     	; 0x164c <GPIO_writePort+0x68>
    162c:	8b 81       	ldd	r24, Y+3	; 0x03
    162e:	9c 81       	ldd	r25, Y+4	; 0x04
    1630:	83 30       	cpi	r24, 0x03	; 3
    1632:	91 05       	cpc	r25, r1
    1634:	81 f0       	breq	.+32     	; 0x1656 <GPIO_writePort+0x72>
    1636:	13 c0       	rjmp	.+38     	; 0x165e <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1638:	eb e3       	ldi	r30, 0x3B	; 59
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	8a 81       	ldd	r24, Y+2	; 0x02
    163e:	80 83       	st	Z, r24
    1640:	0e c0       	rjmp	.+28     	; 0x165e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1642:	e8 e3       	ldi	r30, 0x38	; 56
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	80 83       	st	Z, r24
    164a:	09 c0       	rjmp	.+18     	; 0x165e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    164c:	e5 e3       	ldi	r30, 0x35	; 53
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	8a 81       	ldd	r24, Y+2	; 0x02
    1652:	80 83       	st	Z, r24
    1654:	04 c0       	rjmp	.+8      	; 0x165e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1656:	e2 e3       	ldi	r30, 0x32	; 50
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	8a 81       	ldd	r24, Y+2	; 0x02
    165c:	80 83       	st	Z, r24
			break;
		}
	}
}
    165e:	0f 90       	pop	r0
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	cf 91       	pop	r28
    1668:	df 91       	pop	r29
    166a:	08 95       	ret

0000166c <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    166c:	df 93       	push	r29
    166e:	cf 93       	push	r28
    1670:	00 d0       	rcall	.+0      	; 0x1672 <GPIO_readPort+0x6>
    1672:	00 d0       	rcall	.+0      	; 0x1674 <GPIO_readPort+0x8>
    1674:	cd b7       	in	r28, 0x3d	; 61
    1676:	de b7       	in	r29, 0x3e	; 62
    1678:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    167a:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    167c:	8a 81       	ldd	r24, Y+2	; 0x02
    167e:	84 30       	cpi	r24, 0x04	; 4
    1680:	90 f5       	brcc	.+100    	; 0x16e6 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1682:	8a 81       	ldd	r24, Y+2	; 0x02
    1684:	28 2f       	mov	r18, r24
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	3c 83       	std	Y+4, r19	; 0x04
    168a:	2b 83       	std	Y+3, r18	; 0x03
    168c:	8b 81       	ldd	r24, Y+3	; 0x03
    168e:	9c 81       	ldd	r25, Y+4	; 0x04
    1690:	81 30       	cpi	r24, 0x01	; 1
    1692:	91 05       	cpc	r25, r1
    1694:	d1 f0       	breq	.+52     	; 0x16ca <GPIO_readPort+0x5e>
    1696:	2b 81       	ldd	r18, Y+3	; 0x03
    1698:	3c 81       	ldd	r19, Y+4	; 0x04
    169a:	22 30       	cpi	r18, 0x02	; 2
    169c:	31 05       	cpc	r19, r1
    169e:	2c f4       	brge	.+10     	; 0x16aa <GPIO_readPort+0x3e>
    16a0:	8b 81       	ldd	r24, Y+3	; 0x03
    16a2:	9c 81       	ldd	r25, Y+4	; 0x04
    16a4:	00 97       	sbiw	r24, 0x00	; 0
    16a6:	61 f0       	breq	.+24     	; 0x16c0 <GPIO_readPort+0x54>
    16a8:	1e c0       	rjmp	.+60     	; 0x16e6 <GPIO_readPort+0x7a>
    16aa:	2b 81       	ldd	r18, Y+3	; 0x03
    16ac:	3c 81       	ldd	r19, Y+4	; 0x04
    16ae:	22 30       	cpi	r18, 0x02	; 2
    16b0:	31 05       	cpc	r19, r1
    16b2:	81 f0       	breq	.+32     	; 0x16d4 <GPIO_readPort+0x68>
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	9c 81       	ldd	r25, Y+4	; 0x04
    16b8:	83 30       	cpi	r24, 0x03	; 3
    16ba:	91 05       	cpc	r25, r1
    16bc:	81 f0       	breq	.+32     	; 0x16de <GPIO_readPort+0x72>
    16be:	13 c0       	rjmp	.+38     	; 0x16e6 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    16c0:	e9 e3       	ldi	r30, 0x39	; 57
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	89 83       	std	Y+1, r24	; 0x01
    16c8:	0e c0       	rjmp	.+28     	; 0x16e6 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    16ca:	e6 e3       	ldi	r30, 0x36	; 54
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	89 83       	std	Y+1, r24	; 0x01
    16d2:	09 c0       	rjmp	.+18     	; 0x16e6 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    16d4:	e3 e3       	ldi	r30, 0x33	; 51
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	89 83       	std	Y+1, r24	; 0x01
    16dc:	04 c0       	rjmp	.+8      	; 0x16e6 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    16de:	e0 e3       	ldi	r30, 0x30	; 48
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    16e8:	0f 90       	pop	r0
    16ea:	0f 90       	pop	r0
    16ec:	0f 90       	pop	r0
    16ee:	0f 90       	pop	r0
    16f0:	cf 91       	pop	r28
    16f2:	df 91       	pop	r29
    16f4:	08 95       	ret

000016f6 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    16f6:	df 93       	push	r29
    16f8:	cf 93       	push	r28
    16fa:	cd b7       	in	r28, 0x3d	; 61
    16fc:	de b7       	in	r29, 0x3e	; 62
    16fe:	60 97       	sbiw	r28, 0x10	; 16
    1700:	0f b6       	in	r0, 0x3f	; 63
    1702:	f8 94       	cli
    1704:	de bf       	out	0x3e, r29	; 62
    1706:	0f be       	out	0x3f, r0	; 63
    1708:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	64 e0       	ldi	r22, 0x04	; 4
    170e:	40 e0       	ldi	r20, 0x00	; 0
    1710:	0e 94 3d 08 	call	0x107a	; 0x107a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	65 e0       	ldi	r22, 0x05	; 5
    1718:	40 e0       	ldi	r20, 0x00	; 0
    171a:	0e 94 3d 08 	call	0x107a	; 0x107a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	66 e0       	ldi	r22, 0x06	; 6
    1722:	40 e0       	ldi	r20, 0x00	; 0
    1724:	0e 94 3d 08 	call	0x107a	; 0x107a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	67 e0       	ldi	r22, 0x07	; 7
    172c:	40 e0       	ldi	r20, 0x00	; 0
    172e:	0e 94 3d 08 	call	0x107a	; 0x107a <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1732:	83 e0       	ldi	r24, 0x03	; 3
    1734:	62 e0       	ldi	r22, 0x02	; 2
    1736:	40 e0       	ldi	r20, 0x00	; 0
    1738:	0e 94 3d 08 	call	0x107a	; 0x107a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    173c:	83 e0       	ldi	r24, 0x03	; 3
    173e:	63 e0       	ldi	r22, 0x03	; 3
    1740:	40 e0       	ldi	r20, 0x00	; 0
    1742:	0e 94 3d 08 	call	0x107a	; 0x107a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1746:	83 e0       	ldi	r24, 0x03	; 3
    1748:	64 e0       	ldi	r22, 0x04	; 4
    174a:	40 e0       	ldi	r20, 0x00	; 0
    174c:	0e 94 3d 08 	call	0x107a	; 0x107a <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1750:	83 e0       	ldi	r24, 0x03	; 3
    1752:	65 e0       	ldi	r22, 0x05	; 5
    1754:	40 e0       	ldi	r20, 0x00	; 0
    1756:	0e 94 3d 08 	call	0x107a	; 0x107a <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    175a:	1f 86       	std	Y+15, r1	; 0x0f
    175c:	b4 c0       	rjmp	.+360    	; 0x18c6 <KEYPAD_getPressedKey+0x1d0>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    175e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1760:	98 2f       	mov	r25, r24
    1762:	9c 5f       	subi	r25, 0xFC	; 252
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	69 2f       	mov	r22, r25
    1768:	41 e0       	ldi	r20, 0x01	; 1
    176a:	0e 94 3d 08 	call	0x107a	; 0x107a <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    176e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1770:	98 2f       	mov	r25, r24
    1772:	9c 5f       	subi	r25, 0xFC	; 252
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	69 2f       	mov	r22, r25
    1778:	40 e0       	ldi	r20, 0x00	; 0
    177a:	0e 94 28 09 	call	0x1250	; 0x1250 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    177e:	18 8a       	std	Y+16, r1	; 0x10
    1780:	22 c0       	rjmp	.+68     	; 0x17c6 <KEYPAD_getPressedKey+0xd0>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1782:	88 89       	ldd	r24, Y+16	; 0x10
    1784:	98 2f       	mov	r25, r24
    1786:	9e 5f       	subi	r25, 0xFE	; 254
    1788:	83 e0       	ldi	r24, 0x03	; 3
    178a:	69 2f       	mov	r22, r25
    178c:	0e 94 13 0a 	call	0x1426	; 0x1426 <GPIO_readPin>
    1790:	88 23       	and	r24, r24
    1792:	b1 f4       	brne	.+44     	; 0x17c0 <KEYPAD_getPressedKey+0xca>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1794:	8f 85       	ldd	r24, Y+15	; 0x0f
    1796:	88 2f       	mov	r24, r24
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	88 0f       	add	r24, r24
    179c:	99 1f       	adc	r25, r25
    179e:	88 0f       	add	r24, r24
    17a0:	99 1f       	adc	r25, r25
    17a2:	98 2f       	mov	r25, r24
    17a4:	88 89       	ldd	r24, Y+16	; 0x10
    17a6:	89 0f       	add	r24, r25
    17a8:	8f 5f       	subi	r24, 0xFF	; 255
    17aa:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    17ae:	60 96       	adiw	r28, 0x10	; 16
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	f8 94       	cli
    17b4:	de bf       	out	0x3e, r29	; 62
    17b6:	0f be       	out	0x3f, r0	; 63
    17b8:	cd bf       	out	0x3d, r28	; 61
    17ba:	cf 91       	pop	r28
    17bc:	df 91       	pop	r29
    17be:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    17c0:	88 89       	ldd	r24, Y+16	; 0x10
    17c2:	8f 5f       	subi	r24, 0xFF	; 255
    17c4:	88 8b       	std	Y+16, r24	; 0x10
    17c6:	88 89       	ldd	r24, Y+16	; 0x10
    17c8:	84 30       	cpi	r24, 0x04	; 4
    17ca:	d8 f2       	brcs	.-74     	; 0x1782 <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    17cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    17ce:	98 2f       	mov	r25, r24
    17d0:	9c 5f       	subi	r25, 0xFC	; 252
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	69 2f       	mov	r22, r25
    17d6:	40 e0       	ldi	r20, 0x00	; 0
    17d8:	0e 94 3d 08 	call	0x107a	; 0x107a <GPIO_setupPinDirection>
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	a0 ea       	ldi	r26, 0xA0	; 160
    17e2:	b0 e4       	ldi	r27, 0x40	; 64
    17e4:	8b 87       	std	Y+11, r24	; 0x0b
    17e6:	9c 87       	std	Y+12, r25	; 0x0c
    17e8:	ad 87       	std	Y+13, r26	; 0x0d
    17ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    17f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	4a ef       	ldi	r20, 0xFA	; 250
    17fa:	54 e4       	ldi	r21, 0x44	; 68
    17fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1800:	dc 01       	movw	r26, r24
    1802:	cb 01       	movw	r24, r22
    1804:	8f 83       	std	Y+7, r24	; 0x07
    1806:	98 87       	std	Y+8, r25	; 0x08
    1808:	a9 87       	std	Y+9, r26	; 0x09
    180a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    180c:	6f 81       	ldd	r22, Y+7	; 0x07
    180e:	78 85       	ldd	r23, Y+8	; 0x08
    1810:	89 85       	ldd	r24, Y+9	; 0x09
    1812:	9a 85       	ldd	r25, Y+10	; 0x0a
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	40 e8       	ldi	r20, 0x80	; 128
    181a:	5f e3       	ldi	r21, 0x3F	; 63
    181c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1820:	88 23       	and	r24, r24
    1822:	2c f4       	brge	.+10     	; 0x182e <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	9e 83       	std	Y+6, r25	; 0x06
    182a:	8d 83       	std	Y+5, r24	; 0x05
    182c:	3f c0       	rjmp	.+126    	; 0x18ac <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
    182e:	6f 81       	ldd	r22, Y+7	; 0x07
    1830:	78 85       	ldd	r23, Y+8	; 0x08
    1832:	89 85       	ldd	r24, Y+9	; 0x09
    1834:	9a 85       	ldd	r25, Y+10	; 0x0a
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	3f ef       	ldi	r19, 0xFF	; 255
    183a:	4f e7       	ldi	r20, 0x7F	; 127
    183c:	57 e4       	ldi	r21, 0x47	; 71
    183e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1842:	18 16       	cp	r1, r24
    1844:	4c f5       	brge	.+82     	; 0x1898 <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1846:	6b 85       	ldd	r22, Y+11	; 0x0b
    1848:	7c 85       	ldd	r23, Y+12	; 0x0c
    184a:	8d 85       	ldd	r24, Y+13	; 0x0d
    184c:	9e 85       	ldd	r25, Y+14	; 0x0e
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	40 e2       	ldi	r20, 0x20	; 32
    1854:	51 e4       	ldi	r21, 0x41	; 65
    1856:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    185a:	dc 01       	movw	r26, r24
    185c:	cb 01       	movw	r24, r22
    185e:	bc 01       	movw	r22, r24
    1860:	cd 01       	movw	r24, r26
    1862:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1866:	dc 01       	movw	r26, r24
    1868:	cb 01       	movw	r24, r22
    186a:	9e 83       	std	Y+6, r25	; 0x06
    186c:	8d 83       	std	Y+5, r24	; 0x05
    186e:	0f c0       	rjmp	.+30     	; 0x188e <KEYPAD_getPressedKey+0x198>
    1870:	88 ec       	ldi	r24, 0xC8	; 200
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	9c 83       	std	Y+4, r25	; 0x04
    1876:	8b 83       	std	Y+3, r24	; 0x03
    1878:	8b 81       	ldd	r24, Y+3	; 0x03
    187a:	9c 81       	ldd	r25, Y+4	; 0x04
    187c:	01 97       	sbiw	r24, 0x01	; 1
    187e:	f1 f7       	brne	.-4      	; 0x187c <KEYPAD_getPressedKey+0x186>
    1880:	9c 83       	std	Y+4, r25	; 0x04
    1882:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1884:	8d 81       	ldd	r24, Y+5	; 0x05
    1886:	9e 81       	ldd	r25, Y+6	; 0x06
    1888:	01 97       	sbiw	r24, 0x01	; 1
    188a:	9e 83       	std	Y+6, r25	; 0x06
    188c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    188e:	8d 81       	ldd	r24, Y+5	; 0x05
    1890:	9e 81       	ldd	r25, Y+6	; 0x06
    1892:	00 97       	sbiw	r24, 0x00	; 0
    1894:	69 f7       	brne	.-38     	; 0x1870 <KEYPAD_getPressedKey+0x17a>
    1896:	14 c0       	rjmp	.+40     	; 0x18c0 <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1898:	6f 81       	ldd	r22, Y+7	; 0x07
    189a:	78 85       	ldd	r23, Y+8	; 0x08
    189c:	89 85       	ldd	r24, Y+9	; 0x09
    189e:	9a 85       	ldd	r25, Y+10	; 0x0a
    18a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a4:	dc 01       	movw	r26, r24
    18a6:	cb 01       	movw	r24, r22
    18a8:	9e 83       	std	Y+6, r25	; 0x06
    18aa:	8d 83       	std	Y+5, r24	; 0x05
    18ac:	8d 81       	ldd	r24, Y+5	; 0x05
    18ae:	9e 81       	ldd	r25, Y+6	; 0x06
    18b0:	9a 83       	std	Y+2, r25	; 0x02
    18b2:	89 83       	std	Y+1, r24	; 0x01
    18b4:	89 81       	ldd	r24, Y+1	; 0x01
    18b6:	9a 81       	ldd	r25, Y+2	; 0x02
    18b8:	01 97       	sbiw	r24, 0x01	; 1
    18ba:	f1 f7       	brne	.-4      	; 0x18b8 <KEYPAD_getPressedKey+0x1c2>
    18bc:	9a 83       	std	Y+2, r25	; 0x02
    18be:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    18c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    18c2:	8f 5f       	subi	r24, 0xFF	; 255
    18c4:	8f 87       	std	Y+15, r24	; 0x0f
    18c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    18c8:	84 30       	cpi	r24, 0x04	; 4
    18ca:	08 f4       	brcc	.+2      	; 0x18ce <KEYPAD_getPressedKey+0x1d8>
    18cc:	48 cf       	rjmp	.-368    	; 0x175e <KEYPAD_getPressedKey+0x68>
    18ce:	45 cf       	rjmp	.-374    	; 0x175a <KEYPAD_getPressedKey+0x64>

000018d0 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    18d0:	df 93       	push	r29
    18d2:	cf 93       	push	r28
    18d4:	00 d0       	rcall	.+0      	; 0x18d6 <KEYPAD_4x4_adjustKeyNumber+0x6>
    18d6:	00 d0       	rcall	.+0      	; 0x18d8 <KEYPAD_4x4_adjustKeyNumber+0x8>
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62
    18dc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    18de:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    18e0:	8a 81       	ldd	r24, Y+2	; 0x02
    18e2:	28 2f       	mov	r18, r24
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	3c 83       	std	Y+4, r19	; 0x04
    18e8:	2b 83       	std	Y+3, r18	; 0x03
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	9c 81       	ldd	r25, Y+4	; 0x04
    18ee:	88 30       	cpi	r24, 0x08	; 8
    18f0:	91 05       	cpc	r25, r1
    18f2:	09 f4       	brne	.+2      	; 0x18f6 <KEYPAD_4x4_adjustKeyNumber+0x26>
    18f4:	70 c0       	rjmp	.+224    	; 0x19d6 <KEYPAD_4x4_adjustKeyNumber+0x106>
    18f6:	2b 81       	ldd	r18, Y+3	; 0x03
    18f8:	3c 81       	ldd	r19, Y+4	; 0x04
    18fa:	29 30       	cpi	r18, 0x09	; 9
    18fc:	31 05       	cpc	r19, r1
    18fe:	5c f5       	brge	.+86     	; 0x1956 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1900:	8b 81       	ldd	r24, Y+3	; 0x03
    1902:	9c 81       	ldd	r25, Y+4	; 0x04
    1904:	84 30       	cpi	r24, 0x04	; 4
    1906:	91 05       	cpc	r25, r1
    1908:	09 f4       	brne	.+2      	; 0x190c <KEYPAD_4x4_adjustKeyNumber+0x3c>
    190a:	59 c0       	rjmp	.+178    	; 0x19be <KEYPAD_4x4_adjustKeyNumber+0xee>
    190c:	2b 81       	ldd	r18, Y+3	; 0x03
    190e:	3c 81       	ldd	r19, Y+4	; 0x04
    1910:	25 30       	cpi	r18, 0x05	; 5
    1912:	31 05       	cpc	r19, r1
    1914:	9c f4       	brge	.+38     	; 0x193c <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1916:	8b 81       	ldd	r24, Y+3	; 0x03
    1918:	9c 81       	ldd	r25, Y+4	; 0x04
    191a:	82 30       	cpi	r24, 0x02	; 2
    191c:	91 05       	cpc	r25, r1
    191e:	09 f4       	brne	.+2      	; 0x1922 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1920:	48 c0       	rjmp	.+144    	; 0x19b2 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1922:	2b 81       	ldd	r18, Y+3	; 0x03
    1924:	3c 81       	ldd	r19, Y+4	; 0x04
    1926:	23 30       	cpi	r18, 0x03	; 3
    1928:	31 05       	cpc	r19, r1
    192a:	0c f0       	brlt	.+2      	; 0x192e <KEYPAD_4x4_adjustKeyNumber+0x5e>
    192c:	45 c0       	rjmp	.+138    	; 0x19b8 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	9c 81       	ldd	r25, Y+4	; 0x04
    1932:	81 30       	cpi	r24, 0x01	; 1
    1934:	91 05       	cpc	r25, r1
    1936:	09 f4       	brne	.+2      	; 0x193a <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1938:	39 c0       	rjmp	.+114    	; 0x19ac <KEYPAD_4x4_adjustKeyNumber+0xdc>
    193a:	67 c0       	rjmp	.+206    	; 0x1a0a <KEYPAD_4x4_adjustKeyNumber+0x13a>
    193c:	2b 81       	ldd	r18, Y+3	; 0x03
    193e:	3c 81       	ldd	r19, Y+4	; 0x04
    1940:	26 30       	cpi	r18, 0x06	; 6
    1942:	31 05       	cpc	r19, r1
    1944:	09 f4       	brne	.+2      	; 0x1948 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1946:	41 c0       	rjmp	.+130    	; 0x19ca <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1948:	8b 81       	ldd	r24, Y+3	; 0x03
    194a:	9c 81       	ldd	r25, Y+4	; 0x04
    194c:	87 30       	cpi	r24, 0x07	; 7
    194e:	91 05       	cpc	r25, r1
    1950:	0c f0       	brlt	.+2      	; 0x1954 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1952:	3e c0       	rjmp	.+124    	; 0x19d0 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1954:	37 c0       	rjmp	.+110    	; 0x19c4 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1956:	2b 81       	ldd	r18, Y+3	; 0x03
    1958:	3c 81       	ldd	r19, Y+4	; 0x04
    195a:	2c 30       	cpi	r18, 0x0C	; 12
    195c:	31 05       	cpc	r19, r1
    195e:	09 f4       	brne	.+2      	; 0x1962 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1960:	46 c0       	rjmp	.+140    	; 0x19ee <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1962:	8b 81       	ldd	r24, Y+3	; 0x03
    1964:	9c 81       	ldd	r25, Y+4	; 0x04
    1966:	8d 30       	cpi	r24, 0x0D	; 13
    1968:	91 05       	cpc	r25, r1
    196a:	5c f4       	brge	.+22     	; 0x1982 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    196c:	2b 81       	ldd	r18, Y+3	; 0x03
    196e:	3c 81       	ldd	r19, Y+4	; 0x04
    1970:	2a 30       	cpi	r18, 0x0A	; 10
    1972:	31 05       	cpc	r19, r1
    1974:	b1 f1       	breq	.+108    	; 0x19e2 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1976:	8b 81       	ldd	r24, Y+3	; 0x03
    1978:	9c 81       	ldd	r25, Y+4	; 0x04
    197a:	8b 30       	cpi	r24, 0x0B	; 11
    197c:	91 05       	cpc	r25, r1
    197e:	a4 f5       	brge	.+104    	; 0x19e8 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1980:	2d c0       	rjmp	.+90     	; 0x19dc <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1982:	2b 81       	ldd	r18, Y+3	; 0x03
    1984:	3c 81       	ldd	r19, Y+4	; 0x04
    1986:	2e 30       	cpi	r18, 0x0E	; 14
    1988:	31 05       	cpc	r19, r1
    198a:	b9 f1       	breq	.+110    	; 0x19fa <KEYPAD_4x4_adjustKeyNumber+0x12a>
    198c:	8b 81       	ldd	r24, Y+3	; 0x03
    198e:	9c 81       	ldd	r25, Y+4	; 0x04
    1990:	8e 30       	cpi	r24, 0x0E	; 14
    1992:	91 05       	cpc	r25, r1
    1994:	7c f1       	brlt	.+94     	; 0x19f4 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1996:	2b 81       	ldd	r18, Y+3	; 0x03
    1998:	3c 81       	ldd	r19, Y+4	; 0x04
    199a:	2f 30       	cpi	r18, 0x0F	; 15
    199c:	31 05       	cpc	r19, r1
    199e:	79 f1       	breq	.+94     	; 0x19fe <KEYPAD_4x4_adjustKeyNumber+0x12e>
    19a0:	8b 81       	ldd	r24, Y+3	; 0x03
    19a2:	9c 81       	ldd	r25, Y+4	; 0x04
    19a4:	80 31       	cpi	r24, 0x10	; 16
    19a6:	91 05       	cpc	r25, r1
    19a8:	69 f1       	breq	.+90     	; 0x1a04 <KEYPAD_4x4_adjustKeyNumber+0x134>
    19aa:	2f c0       	rjmp	.+94     	; 0x1a0a <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    19ac:	87 e0       	ldi	r24, 0x07	; 7
    19ae:	89 83       	std	Y+1, r24	; 0x01
    19b0:	2e c0       	rjmp	.+92     	; 0x1a0e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    19b2:	88 e0       	ldi	r24, 0x08	; 8
    19b4:	89 83       	std	Y+1, r24	; 0x01
    19b6:	2b c0       	rjmp	.+86     	; 0x1a0e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    19b8:	89 e0       	ldi	r24, 0x09	; 9
    19ba:	89 83       	std	Y+1, r24	; 0x01
    19bc:	28 c0       	rjmp	.+80     	; 0x1a0e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    19be:	85 e2       	ldi	r24, 0x25	; 37
    19c0:	89 83       	std	Y+1, r24	; 0x01
    19c2:	25 c0       	rjmp	.+74     	; 0x1a0e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    19c4:	84 e0       	ldi	r24, 0x04	; 4
    19c6:	89 83       	std	Y+1, r24	; 0x01
    19c8:	22 c0       	rjmp	.+68     	; 0x1a0e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    19ca:	85 e0       	ldi	r24, 0x05	; 5
    19cc:	89 83       	std	Y+1, r24	; 0x01
    19ce:	1f c0       	rjmp	.+62     	; 0x1a0e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    19d0:	86 e0       	ldi	r24, 0x06	; 6
    19d2:	89 83       	std	Y+1, r24	; 0x01
    19d4:	1c c0       	rjmp	.+56     	; 0x1a0e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    19d6:	8a e2       	ldi	r24, 0x2A	; 42
    19d8:	89 83       	std	Y+1, r24	; 0x01
    19da:	19 c0       	rjmp	.+50     	; 0x1a0e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	89 83       	std	Y+1, r24	; 0x01
    19e0:	16 c0       	rjmp	.+44     	; 0x1a0e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    19e2:	82 e0       	ldi	r24, 0x02	; 2
    19e4:	89 83       	std	Y+1, r24	; 0x01
    19e6:	13 c0       	rjmp	.+38     	; 0x1a0e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    19e8:	83 e0       	ldi	r24, 0x03	; 3
    19ea:	89 83       	std	Y+1, r24	; 0x01
    19ec:	10 c0       	rjmp	.+32     	; 0x1a0e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    19ee:	8d e2       	ldi	r24, 0x2D	; 45
    19f0:	89 83       	std	Y+1, r24	; 0x01
    19f2:	0d c0       	rjmp	.+26     	; 0x1a0e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    19f4:	8d e0       	ldi	r24, 0x0D	; 13
    19f6:	89 83       	std	Y+1, r24	; 0x01
    19f8:	0a c0       	rjmp	.+20     	; 0x1a0e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    19fa:	19 82       	std	Y+1, r1	; 0x01
    19fc:	08 c0       	rjmp	.+16     	; 0x1a0e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    19fe:	8d e3       	ldi	r24, 0x3D	; 61
    1a00:	89 83       	std	Y+1, r24	; 0x01
    1a02:	05 c0       	rjmp	.+10     	; 0x1a0e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1a04:	8b e2       	ldi	r24, 0x2B	; 43
    1a06:	89 83       	std	Y+1, r24	; 0x01
    1a08:	02 c0       	rjmp	.+4      	; 0x1a0e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1a0e:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1a10:	0f 90       	pop	r0
    1a12:	0f 90       	pop	r0
    1a14:	0f 90       	pop	r0
    1a16:	0f 90       	pop	r0
    1a18:	cf 91       	pop	r28
    1a1a:	df 91       	pop	r29
    1a1c:	08 95       	ret

00001a1e <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1a1e:	df 93       	push	r29
    1a20:	cf 93       	push	r28
    1a22:	cd b7       	in	r28, 0x3d	; 61
    1a24:	de b7       	in	r29, 0x3e	; 62
    1a26:	2e 97       	sbiw	r28, 0x0e	; 14
    1a28:	0f b6       	in	r0, 0x3f	; 63
    1a2a:	f8 94       	cli
    1a2c:	de bf       	out	0x3e, r29	; 62
    1a2e:	0f be       	out	0x3f, r0	; 63
    1a30:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	61 e0       	ldi	r22, 0x01	; 1
    1a36:	41 e0       	ldi	r20, 0x01	; 1
    1a38:	0e 94 3d 08 	call	0x107a	; 0x107a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	60 e0       	ldi	r22, 0x00	; 0
    1a40:	41 e0       	ldi	r20, 0x01	; 1
    1a42:	0e 94 3d 08 	call	0x107a	; 0x107a <GPIO_setupPinDirection>
    1a46:	80 e0       	ldi	r24, 0x00	; 0
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	a0 ea       	ldi	r26, 0xA0	; 160
    1a4c:	b1 e4       	ldi	r27, 0x41	; 65
    1a4e:	8b 87       	std	Y+11, r24	; 0x0b
    1a50:	9c 87       	std	Y+12, r25	; 0x0c
    1a52:	ad 87       	std	Y+13, r26	; 0x0d
    1a54:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a56:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a58:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	4a ef       	ldi	r20, 0xFA	; 250
    1a64:	54 e4       	ldi	r21, 0x44	; 68
    1a66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	8f 83       	std	Y+7, r24	; 0x07
    1a70:	98 87       	std	Y+8, r25	; 0x08
    1a72:	a9 87       	std	Y+9, r26	; 0x09
    1a74:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a76:	6f 81       	ldd	r22, Y+7	; 0x07
    1a78:	78 85       	ldd	r23, Y+8	; 0x08
    1a7a:	89 85       	ldd	r24, Y+9	; 0x09
    1a7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	40 e8       	ldi	r20, 0x80	; 128
    1a84:	5f e3       	ldi	r21, 0x3F	; 63
    1a86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a8a:	88 23       	and	r24, r24
    1a8c:	2c f4       	brge	.+10     	; 0x1a98 <LCD_init+0x7a>
		__ticks = 1;
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	9e 83       	std	Y+6, r25	; 0x06
    1a94:	8d 83       	std	Y+5, r24	; 0x05
    1a96:	3f c0       	rjmp	.+126    	; 0x1b16 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1a98:	6f 81       	ldd	r22, Y+7	; 0x07
    1a9a:	78 85       	ldd	r23, Y+8	; 0x08
    1a9c:	89 85       	ldd	r24, Y+9	; 0x09
    1a9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	3f ef       	ldi	r19, 0xFF	; 255
    1aa4:	4f e7       	ldi	r20, 0x7F	; 127
    1aa6:	57 e4       	ldi	r21, 0x47	; 71
    1aa8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aac:	18 16       	cp	r1, r24
    1aae:	4c f5       	brge	.+82     	; 0x1b02 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ab2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ab4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	40 e2       	ldi	r20, 0x20	; 32
    1abe:	51 e4       	ldi	r21, 0x41	; 65
    1ac0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	bc 01       	movw	r22, r24
    1aca:	cd 01       	movw	r24, r26
    1acc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	9e 83       	std	Y+6, r25	; 0x06
    1ad6:	8d 83       	std	Y+5, r24	; 0x05
    1ad8:	0f c0       	rjmp	.+30     	; 0x1af8 <LCD_init+0xda>
    1ada:	88 ec       	ldi	r24, 0xC8	; 200
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	9c 83       	std	Y+4, r25	; 0x04
    1ae0:	8b 83       	std	Y+3, r24	; 0x03
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae6:	01 97       	sbiw	r24, 0x01	; 1
    1ae8:	f1 f7       	brne	.-4      	; 0x1ae6 <LCD_init+0xc8>
    1aea:	9c 83       	std	Y+4, r25	; 0x04
    1aec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aee:	8d 81       	ldd	r24, Y+5	; 0x05
    1af0:	9e 81       	ldd	r25, Y+6	; 0x06
    1af2:	01 97       	sbiw	r24, 0x01	; 1
    1af4:	9e 83       	std	Y+6, r25	; 0x06
    1af6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1af8:	8d 81       	ldd	r24, Y+5	; 0x05
    1afa:	9e 81       	ldd	r25, Y+6	; 0x06
    1afc:	00 97       	sbiw	r24, 0x00	; 0
    1afe:	69 f7       	brne	.-38     	; 0x1ada <LCD_init+0xbc>
    1b00:	14 c0       	rjmp	.+40     	; 0x1b2a <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b02:	6f 81       	ldd	r22, Y+7	; 0x07
    1b04:	78 85       	ldd	r23, Y+8	; 0x08
    1b06:	89 85       	ldd	r24, Y+9	; 0x09
    1b08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b0e:	dc 01       	movw	r26, r24
    1b10:	cb 01       	movw	r24, r22
    1b12:	9e 83       	std	Y+6, r25	; 0x06
    1b14:	8d 83       	std	Y+5, r24	; 0x05
    1b16:	8d 81       	ldd	r24, Y+5	; 0x05
    1b18:	9e 81       	ldd	r25, Y+6	; 0x06
    1b1a:	9a 83       	std	Y+2, r25	; 0x02
    1b1c:	89 83       	std	Y+1, r24	; 0x01
    1b1e:	89 81       	ldd	r24, Y+1	; 0x01
    1b20:	9a 81       	ldd	r25, Y+2	; 0x02
    1b22:	01 97       	sbiw	r24, 0x01	; 1
    1b24:	f1 f7       	brne	.-4      	; 0x1b22 <LCD_init+0x104>
    1b26:	9a 83       	std	Y+2, r25	; 0x02
    1b28:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1b2a:	80 e0       	ldi	r24, 0x00	; 0
    1b2c:	6f ef       	ldi	r22, 0xFF	; 255
    1b2e:	0e 94 ae 0a 	call	0x155c	; 0x155c <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1b32:	88 e3       	ldi	r24, 0x38	; 56
    1b34:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1b38:	8c e0       	ldi	r24, 0x0C	; 12
    1b3a:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <LCD_sendCommand>
}
    1b44:	2e 96       	adiw	r28, 0x0e	; 14
    1b46:	0f b6       	in	r0, 0x3f	; 63
    1b48:	f8 94       	cli
    1b4a:	de bf       	out	0x3e, r29	; 62
    1b4c:	0f be       	out	0x3f, r0	; 63
    1b4e:	cd bf       	out	0x3d, r28	; 61
    1b50:	cf 91       	pop	r28
    1b52:	df 91       	pop	r29
    1b54:	08 95       	ret

00001b56 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1b56:	df 93       	push	r29
    1b58:	cf 93       	push	r28
    1b5a:	cd b7       	in	r28, 0x3d	; 61
    1b5c:	de b7       	in	r29, 0x3e	; 62
    1b5e:	e9 97       	sbiw	r28, 0x39	; 57
    1b60:	0f b6       	in	r0, 0x3f	; 63
    1b62:	f8 94       	cli
    1b64:	de bf       	out	0x3e, r29	; 62
    1b66:	0f be       	out	0x3f, r0	; 63
    1b68:	cd bf       	out	0x3d, r28	; 61
    1b6a:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	61 e0       	ldi	r22, 0x01	; 1
    1b70:	40 e0       	ldi	r20, 0x00	; 0
    1b72:	0e 94 28 09 	call	0x1250	; 0x1250 <GPIO_writePin>
    1b76:	80 e0       	ldi	r24, 0x00	; 0
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	a0 e8       	ldi	r26, 0x80	; 128
    1b7c:	bf e3       	ldi	r27, 0x3F	; 63
    1b7e:	8d ab       	std	Y+53, r24	; 0x35
    1b80:	9e ab       	std	Y+54, r25	; 0x36
    1b82:	af ab       	std	Y+55, r26	; 0x37
    1b84:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b86:	6d a9       	ldd	r22, Y+53	; 0x35
    1b88:	7e a9       	ldd	r23, Y+54	; 0x36
    1b8a:	8f a9       	ldd	r24, Y+55	; 0x37
    1b8c:	98 ad       	ldd	r25, Y+56	; 0x38
    1b8e:	20 e0       	ldi	r18, 0x00	; 0
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	4a ef       	ldi	r20, 0xFA	; 250
    1b94:	54 e4       	ldi	r21, 0x44	; 68
    1b96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b9a:	dc 01       	movw	r26, r24
    1b9c:	cb 01       	movw	r24, r22
    1b9e:	89 ab       	std	Y+49, r24	; 0x31
    1ba0:	9a ab       	std	Y+50, r25	; 0x32
    1ba2:	ab ab       	std	Y+51, r26	; 0x33
    1ba4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ba6:	69 a9       	ldd	r22, Y+49	; 0x31
    1ba8:	7a a9       	ldd	r23, Y+50	; 0x32
    1baa:	8b a9       	ldd	r24, Y+51	; 0x33
    1bac:	9c a9       	ldd	r25, Y+52	; 0x34
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	40 e8       	ldi	r20, 0x80	; 128
    1bb4:	5f e3       	ldi	r21, 0x3F	; 63
    1bb6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bba:	88 23       	and	r24, r24
    1bbc:	2c f4       	brge	.+10     	; 0x1bc8 <LCD_sendCommand+0x72>
		__ticks = 1;
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	98 ab       	std	Y+48, r25	; 0x30
    1bc4:	8f a7       	std	Y+47, r24	; 0x2f
    1bc6:	3f c0       	rjmp	.+126    	; 0x1c46 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1bc8:	69 a9       	ldd	r22, Y+49	; 0x31
    1bca:	7a a9       	ldd	r23, Y+50	; 0x32
    1bcc:	8b a9       	ldd	r24, Y+51	; 0x33
    1bce:	9c a9       	ldd	r25, Y+52	; 0x34
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    1bd2:	3f ef       	ldi	r19, 0xFF	; 255
    1bd4:	4f e7       	ldi	r20, 0x7F	; 127
    1bd6:	57 e4       	ldi	r21, 0x47	; 71
    1bd8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bdc:	18 16       	cp	r1, r24
    1bde:	4c f5       	brge	.+82     	; 0x1c32 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be0:	6d a9       	ldd	r22, Y+53	; 0x35
    1be2:	7e a9       	ldd	r23, Y+54	; 0x36
    1be4:	8f a9       	ldd	r24, Y+55	; 0x37
    1be6:	98 ad       	ldd	r25, Y+56	; 0x38
    1be8:	20 e0       	ldi	r18, 0x00	; 0
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	40 e2       	ldi	r20, 0x20	; 32
    1bee:	51 e4       	ldi	r21, 0x41	; 65
    1bf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	bc 01       	movw	r22, r24
    1bfa:	cd 01       	movw	r24, r26
    1bfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c00:	dc 01       	movw	r26, r24
    1c02:	cb 01       	movw	r24, r22
    1c04:	98 ab       	std	Y+48, r25	; 0x30
    1c06:	8f a7       	std	Y+47, r24	; 0x2f
    1c08:	0f c0       	rjmp	.+30     	; 0x1c28 <LCD_sendCommand+0xd2>
    1c0a:	88 ec       	ldi	r24, 0xC8	; 200
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	9e a7       	std	Y+46, r25	; 0x2e
    1c10:	8d a7       	std	Y+45, r24	; 0x2d
    1c12:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c14:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c16:	01 97       	sbiw	r24, 0x01	; 1
    1c18:	f1 f7       	brne	.-4      	; 0x1c16 <LCD_sendCommand+0xc0>
    1c1a:	9e a7       	std	Y+46, r25	; 0x2e
    1c1c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c20:	98 a9       	ldd	r25, Y+48	; 0x30
    1c22:	01 97       	sbiw	r24, 0x01	; 1
    1c24:	98 ab       	std	Y+48, r25	; 0x30
    1c26:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c28:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c2a:	98 a9       	ldd	r25, Y+48	; 0x30
    1c2c:	00 97       	sbiw	r24, 0x00	; 0
    1c2e:	69 f7       	brne	.-38     	; 0x1c0a <LCD_sendCommand+0xb4>
    1c30:	14 c0       	rjmp	.+40     	; 0x1c5a <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c32:	69 a9       	ldd	r22, Y+49	; 0x31
    1c34:	7a a9       	ldd	r23, Y+50	; 0x32
    1c36:	8b a9       	ldd	r24, Y+51	; 0x33
    1c38:	9c a9       	ldd	r25, Y+52	; 0x34
    1c3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	98 ab       	std	Y+48, r25	; 0x30
    1c44:	8f a7       	std	Y+47, r24	; 0x2f
    1c46:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c48:	98 a9       	ldd	r25, Y+48	; 0x30
    1c4a:	9c a7       	std	Y+44, r25	; 0x2c
    1c4c:	8b a7       	std	Y+43, r24	; 0x2b
    1c4e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c50:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c52:	01 97       	sbiw	r24, 0x01	; 1
    1c54:	f1 f7       	brne	.-4      	; 0x1c52 <LCD_sendCommand+0xfc>
    1c56:	9c a7       	std	Y+44, r25	; 0x2c
    1c58:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	60 e0       	ldi	r22, 0x00	; 0
    1c5e:	41 e0       	ldi	r20, 0x01	; 1
    1c60:	0e 94 28 09 	call	0x1250	; 0x1250 <GPIO_writePin>
    1c64:	80 e0       	ldi	r24, 0x00	; 0
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	a0 e8       	ldi	r26, 0x80	; 128
    1c6a:	bf e3       	ldi	r27, 0x3F	; 63
    1c6c:	8f a3       	std	Y+39, r24	; 0x27
    1c6e:	98 a7       	std	Y+40, r25	; 0x28
    1c70:	a9 a7       	std	Y+41, r26	; 0x29
    1c72:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c74:	6f a1       	ldd	r22, Y+39	; 0x27
    1c76:	78 a5       	ldd	r23, Y+40	; 0x28
    1c78:	89 a5       	ldd	r24, Y+41	; 0x29
    1c7a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	4a ef       	ldi	r20, 0xFA	; 250
    1c82:	54 e4       	ldi	r21, 0x44	; 68
    1c84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	8b a3       	std	Y+35, r24	; 0x23
    1c8e:	9c a3       	std	Y+36, r25	; 0x24
    1c90:	ad a3       	std	Y+37, r26	; 0x25
    1c92:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c94:	6b a1       	ldd	r22, Y+35	; 0x23
    1c96:	7c a1       	ldd	r23, Y+36	; 0x24
    1c98:	8d a1       	ldd	r24, Y+37	; 0x25
    1c9a:	9e a1       	ldd	r25, Y+38	; 0x26
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	40 e8       	ldi	r20, 0x80	; 128
    1ca2:	5f e3       	ldi	r21, 0x3F	; 63
    1ca4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ca8:	88 23       	and	r24, r24
    1caa:	2c f4       	brge	.+10     	; 0x1cb6 <LCD_sendCommand+0x160>
		__ticks = 1;
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	9a a3       	std	Y+34, r25	; 0x22
    1cb2:	89 a3       	std	Y+33, r24	; 0x21
    1cb4:	3f c0       	rjmp	.+126    	; 0x1d34 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1cb6:	6b a1       	ldd	r22, Y+35	; 0x23
    1cb8:	7c a1       	ldd	r23, Y+36	; 0x24
    1cba:	8d a1       	ldd	r24, Y+37	; 0x25
    1cbc:	9e a1       	ldd	r25, Y+38	; 0x26
    1cbe:	20 e0       	ldi	r18, 0x00	; 0
    1cc0:	3f ef       	ldi	r19, 0xFF	; 255
    1cc2:	4f e7       	ldi	r20, 0x7F	; 127
    1cc4:	57 e4       	ldi	r21, 0x47	; 71
    1cc6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cca:	18 16       	cp	r1, r24
    1ccc:	4c f5       	brge	.+82     	; 0x1d20 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cce:	6f a1       	ldd	r22, Y+39	; 0x27
    1cd0:	78 a5       	ldd	r23, Y+40	; 0x28
    1cd2:	89 a5       	ldd	r24, Y+41	; 0x29
    1cd4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	40 e2       	ldi	r20, 0x20	; 32
    1cdc:	51 e4       	ldi	r21, 0x41	; 65
    1cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	bc 01       	movw	r22, r24
    1ce8:	cd 01       	movw	r24, r26
    1cea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	9a a3       	std	Y+34, r25	; 0x22
    1cf4:	89 a3       	std	Y+33, r24	; 0x21
    1cf6:	0f c0       	rjmp	.+30     	; 0x1d16 <LCD_sendCommand+0x1c0>
    1cf8:	88 ec       	ldi	r24, 0xC8	; 200
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	98 a3       	std	Y+32, r25	; 0x20
    1cfe:	8f 8f       	std	Y+31, r24	; 0x1f
    1d00:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d02:	98 a1       	ldd	r25, Y+32	; 0x20
    1d04:	01 97       	sbiw	r24, 0x01	; 1
    1d06:	f1 f7       	brne	.-4      	; 0x1d04 <LCD_sendCommand+0x1ae>
    1d08:	98 a3       	std	Y+32, r25	; 0x20
    1d0a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d0c:	89 a1       	ldd	r24, Y+33	; 0x21
    1d0e:	9a a1       	ldd	r25, Y+34	; 0x22
    1d10:	01 97       	sbiw	r24, 0x01	; 1
    1d12:	9a a3       	std	Y+34, r25	; 0x22
    1d14:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d16:	89 a1       	ldd	r24, Y+33	; 0x21
    1d18:	9a a1       	ldd	r25, Y+34	; 0x22
    1d1a:	00 97       	sbiw	r24, 0x00	; 0
    1d1c:	69 f7       	brne	.-38     	; 0x1cf8 <LCD_sendCommand+0x1a2>
    1d1e:	14 c0       	rjmp	.+40     	; 0x1d48 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d20:	6b a1       	ldd	r22, Y+35	; 0x23
    1d22:	7c a1       	ldd	r23, Y+36	; 0x24
    1d24:	8d a1       	ldd	r24, Y+37	; 0x25
    1d26:	9e a1       	ldd	r25, Y+38	; 0x26
    1d28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	cb 01       	movw	r24, r22
    1d30:	9a a3       	std	Y+34, r25	; 0x22
    1d32:	89 a3       	std	Y+33, r24	; 0x21
    1d34:	89 a1       	ldd	r24, Y+33	; 0x21
    1d36:	9a a1       	ldd	r25, Y+34	; 0x22
    1d38:	9e 8f       	std	Y+30, r25	; 0x1e
    1d3a:	8d 8f       	std	Y+29, r24	; 0x1d
    1d3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d3e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d40:	01 97       	sbiw	r24, 0x01	; 1
    1d42:	f1 f7       	brne	.-4      	; 0x1d40 <LCD_sendCommand+0x1ea>
    1d44:	9e 8f       	std	Y+30, r25	; 0x1e
    1d46:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	69 ad       	ldd	r22, Y+57	; 0x39
    1d4c:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <GPIO_writePort>
    1d50:	80 e0       	ldi	r24, 0x00	; 0
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	a0 e8       	ldi	r26, 0x80	; 128
    1d56:	bf e3       	ldi	r27, 0x3F	; 63
    1d58:	89 8f       	std	Y+25, r24	; 0x19
    1d5a:	9a 8f       	std	Y+26, r25	; 0x1a
    1d5c:	ab 8f       	std	Y+27, r26	; 0x1b
    1d5e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d60:	69 8d       	ldd	r22, Y+25	; 0x19
    1d62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	4a ef       	ldi	r20, 0xFA	; 250
    1d6e:	54 e4       	ldi	r21, 0x44	; 68
    1d70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d74:	dc 01       	movw	r26, r24
    1d76:	cb 01       	movw	r24, r22
    1d78:	8d 8b       	std	Y+21, r24	; 0x15
    1d7a:	9e 8b       	std	Y+22, r25	; 0x16
    1d7c:	af 8b       	std	Y+23, r26	; 0x17
    1d7e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d80:	6d 89       	ldd	r22, Y+21	; 0x15
    1d82:	7e 89       	ldd	r23, Y+22	; 0x16
    1d84:	8f 89       	ldd	r24, Y+23	; 0x17
    1d86:	98 8d       	ldd	r25, Y+24	; 0x18
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	40 e8       	ldi	r20, 0x80	; 128
    1d8e:	5f e3       	ldi	r21, 0x3F	; 63
    1d90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d94:	88 23       	and	r24, r24
    1d96:	2c f4       	brge	.+10     	; 0x1da2 <LCD_sendCommand+0x24c>
		__ticks = 1;
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	9c 8b       	std	Y+20, r25	; 0x14
    1d9e:	8b 8b       	std	Y+19, r24	; 0x13
    1da0:	3f c0       	rjmp	.+126    	; 0x1e20 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1da2:	6d 89       	ldd	r22, Y+21	; 0x15
    1da4:	7e 89       	ldd	r23, Y+22	; 0x16
    1da6:	8f 89       	ldd	r24, Y+23	; 0x17
    1da8:	98 8d       	ldd	r25, Y+24	; 0x18
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	3f ef       	ldi	r19, 0xFF	; 255
    1dae:	4f e7       	ldi	r20, 0x7F	; 127
    1db0:	57 e4       	ldi	r21, 0x47	; 71
    1db2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1db6:	18 16       	cp	r1, r24
    1db8:	4c f5       	brge	.+82     	; 0x1e0c <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dba:	69 8d       	ldd	r22, Y+25	; 0x19
    1dbc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dc0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	40 e2       	ldi	r20, 0x20	; 32
    1dc8:	51 e4       	ldi	r21, 0x41	; 65
    1dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dce:	dc 01       	movw	r26, r24
    1dd0:	cb 01       	movw	r24, r22
    1dd2:	bc 01       	movw	r22, r24
    1dd4:	cd 01       	movw	r24, r26
    1dd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dda:	dc 01       	movw	r26, r24
    1ddc:	cb 01       	movw	r24, r22
    1dde:	9c 8b       	std	Y+20, r25	; 0x14
    1de0:	8b 8b       	std	Y+19, r24	; 0x13
    1de2:	0f c0       	rjmp	.+30     	; 0x1e02 <LCD_sendCommand+0x2ac>
    1de4:	88 ec       	ldi	r24, 0xC8	; 200
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	9a 8b       	std	Y+18, r25	; 0x12
    1dea:	89 8b       	std	Y+17, r24	; 0x11
    1dec:	89 89       	ldd	r24, Y+17	; 0x11
    1dee:	9a 89       	ldd	r25, Y+18	; 0x12
    1df0:	01 97       	sbiw	r24, 0x01	; 1
    1df2:	f1 f7       	brne	.-4      	; 0x1df0 <LCD_sendCommand+0x29a>
    1df4:	9a 8b       	std	Y+18, r25	; 0x12
    1df6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1df8:	8b 89       	ldd	r24, Y+19	; 0x13
    1dfa:	9c 89       	ldd	r25, Y+20	; 0x14
    1dfc:	01 97       	sbiw	r24, 0x01	; 1
    1dfe:	9c 8b       	std	Y+20, r25	; 0x14
    1e00:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e02:	8b 89       	ldd	r24, Y+19	; 0x13
    1e04:	9c 89       	ldd	r25, Y+20	; 0x14
    1e06:	00 97       	sbiw	r24, 0x00	; 0
    1e08:	69 f7       	brne	.-38     	; 0x1de4 <LCD_sendCommand+0x28e>
    1e0a:	14 c0       	rjmp	.+40     	; 0x1e34 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e0c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e0e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e10:	8f 89       	ldd	r24, Y+23	; 0x17
    1e12:	98 8d       	ldd	r25, Y+24	; 0x18
    1e14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	9c 8b       	std	Y+20, r25	; 0x14
    1e1e:	8b 8b       	std	Y+19, r24	; 0x13
    1e20:	8b 89       	ldd	r24, Y+19	; 0x13
    1e22:	9c 89       	ldd	r25, Y+20	; 0x14
    1e24:	98 8b       	std	Y+16, r25	; 0x10
    1e26:	8f 87       	std	Y+15, r24	; 0x0f
    1e28:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e2a:	98 89       	ldd	r25, Y+16	; 0x10
    1e2c:	01 97       	sbiw	r24, 0x01	; 1
    1e2e:	f1 f7       	brne	.-4      	; 0x1e2c <LCD_sendCommand+0x2d6>
    1e30:	98 8b       	std	Y+16, r25	; 0x10
    1e32:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	60 e0       	ldi	r22, 0x00	; 0
    1e38:	40 e0       	ldi	r20, 0x00	; 0
    1e3a:	0e 94 28 09 	call	0x1250	; 0x1250 <GPIO_writePin>
    1e3e:	80 e0       	ldi	r24, 0x00	; 0
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	a0 e8       	ldi	r26, 0x80	; 128
    1e44:	bf e3       	ldi	r27, 0x3F	; 63
    1e46:	8b 87       	std	Y+11, r24	; 0x0b
    1e48:	9c 87       	std	Y+12, r25	; 0x0c
    1e4a:	ad 87       	std	Y+13, r26	; 0x0d
    1e4c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e50:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e52:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e54:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e56:	20 e0       	ldi	r18, 0x00	; 0
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	4a ef       	ldi	r20, 0xFA	; 250
    1e5c:	54 e4       	ldi	r21, 0x44	; 68
    1e5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e62:	dc 01       	movw	r26, r24
    1e64:	cb 01       	movw	r24, r22
    1e66:	8f 83       	std	Y+7, r24	; 0x07
    1e68:	98 87       	std	Y+8, r25	; 0x08
    1e6a:	a9 87       	std	Y+9, r26	; 0x09
    1e6c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e70:	78 85       	ldd	r23, Y+8	; 0x08
    1e72:	89 85       	ldd	r24, Y+9	; 0x09
    1e74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e76:	20 e0       	ldi	r18, 0x00	; 0
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	40 e8       	ldi	r20, 0x80	; 128
    1e7c:	5f e3       	ldi	r21, 0x3F	; 63
    1e7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e82:	88 23       	and	r24, r24
    1e84:	2c f4       	brge	.+10     	; 0x1e90 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	9e 83       	std	Y+6, r25	; 0x06
    1e8c:	8d 83       	std	Y+5, r24	; 0x05
    1e8e:	3f c0       	rjmp	.+126    	; 0x1f0e <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1e90:	6f 81       	ldd	r22, Y+7	; 0x07
    1e92:	78 85       	ldd	r23, Y+8	; 0x08
    1e94:	89 85       	ldd	r24, Y+9	; 0x09
    1e96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	3f ef       	ldi	r19, 0xFF	; 255
    1e9c:	4f e7       	ldi	r20, 0x7F	; 127
    1e9e:	57 e4       	ldi	r21, 0x47	; 71
    1ea0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ea4:	18 16       	cp	r1, r24
    1ea6:	4c f5       	brge	.+82     	; 0x1efa <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ea8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eaa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eac:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eae:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	40 e2       	ldi	r20, 0x20	; 32
    1eb6:	51 e4       	ldi	r21, 0x41	; 65
    1eb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ebc:	dc 01       	movw	r26, r24
    1ebe:	cb 01       	movw	r24, r22
    1ec0:	bc 01       	movw	r22, r24
    1ec2:	cd 01       	movw	r24, r26
    1ec4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec8:	dc 01       	movw	r26, r24
    1eca:	cb 01       	movw	r24, r22
    1ecc:	9e 83       	std	Y+6, r25	; 0x06
    1ece:	8d 83       	std	Y+5, r24	; 0x05
    1ed0:	0f c0       	rjmp	.+30     	; 0x1ef0 <LCD_sendCommand+0x39a>
    1ed2:	88 ec       	ldi	r24, 0xC8	; 200
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	9c 83       	std	Y+4, r25	; 0x04
    1ed8:	8b 83       	std	Y+3, r24	; 0x03
    1eda:	8b 81       	ldd	r24, Y+3	; 0x03
    1edc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ede:	01 97       	sbiw	r24, 0x01	; 1
    1ee0:	f1 f7       	brne	.-4      	; 0x1ede <LCD_sendCommand+0x388>
    1ee2:	9c 83       	std	Y+4, r25	; 0x04
    1ee4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ee6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eea:	01 97       	sbiw	r24, 0x01	; 1
    1eec:	9e 83       	std	Y+6, r25	; 0x06
    1eee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ef0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef4:	00 97       	sbiw	r24, 0x00	; 0
    1ef6:	69 f7       	brne	.-38     	; 0x1ed2 <LCD_sendCommand+0x37c>
    1ef8:	14 c0       	rjmp	.+40     	; 0x1f22 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1efa:	6f 81       	ldd	r22, Y+7	; 0x07
    1efc:	78 85       	ldd	r23, Y+8	; 0x08
    1efe:	89 85       	ldd	r24, Y+9	; 0x09
    1f00:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f06:	dc 01       	movw	r26, r24
    1f08:	cb 01       	movw	r24, r22
    1f0a:	9e 83       	std	Y+6, r25	; 0x06
    1f0c:	8d 83       	std	Y+5, r24	; 0x05
    1f0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f10:	9e 81       	ldd	r25, Y+6	; 0x06
    1f12:	9a 83       	std	Y+2, r25	; 0x02
    1f14:	89 83       	std	Y+1, r24	; 0x01
    1f16:	89 81       	ldd	r24, Y+1	; 0x01
    1f18:	9a 81       	ldd	r25, Y+2	; 0x02
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	f1 f7       	brne	.-4      	; 0x1f1a <LCD_sendCommand+0x3c4>
    1f1e:	9a 83       	std	Y+2, r25	; 0x02
    1f20:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1f22:	e9 96       	adiw	r28, 0x39	; 57
    1f24:	0f b6       	in	r0, 0x3f	; 63
    1f26:	f8 94       	cli
    1f28:	de bf       	out	0x3e, r29	; 62
    1f2a:	0f be       	out	0x3f, r0	; 63
    1f2c:	cd bf       	out	0x3d, r28	; 61
    1f2e:	cf 91       	pop	r28
    1f30:	df 91       	pop	r29
    1f32:	08 95       	ret

00001f34 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1f34:	df 93       	push	r29
    1f36:	cf 93       	push	r28
    1f38:	cd b7       	in	r28, 0x3d	; 61
    1f3a:	de b7       	in	r29, 0x3e	; 62
    1f3c:	e9 97       	sbiw	r28, 0x39	; 57
    1f3e:	0f b6       	in	r0, 0x3f	; 63
    1f40:	f8 94       	cli
    1f42:	de bf       	out	0x3e, r29	; 62
    1f44:	0f be       	out	0x3f, r0	; 63
    1f46:	cd bf       	out	0x3d, r28	; 61
    1f48:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	61 e0       	ldi	r22, 0x01	; 1
    1f4e:	41 e0       	ldi	r20, 0x01	; 1
    1f50:	0e 94 28 09 	call	0x1250	; 0x1250 <GPIO_writePin>
    1f54:	80 e0       	ldi	r24, 0x00	; 0
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	a0 e8       	ldi	r26, 0x80	; 128
    1f5a:	bf e3       	ldi	r27, 0x3F	; 63
    1f5c:	8d ab       	std	Y+53, r24	; 0x35
    1f5e:	9e ab       	std	Y+54, r25	; 0x36
    1f60:	af ab       	std	Y+55, r26	; 0x37
    1f62:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f64:	6d a9       	ldd	r22, Y+53	; 0x35
    1f66:	7e a9       	ldd	r23, Y+54	; 0x36
    1f68:	8f a9       	ldd	r24, Y+55	; 0x37
    1f6a:	98 ad       	ldd	r25, Y+56	; 0x38
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	4a ef       	ldi	r20, 0xFA	; 250
    1f72:	54 e4       	ldi	r21, 0x44	; 68
    1f74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f78:	dc 01       	movw	r26, r24
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	89 ab       	std	Y+49, r24	; 0x31
    1f7e:	9a ab       	std	Y+50, r25	; 0x32
    1f80:	ab ab       	std	Y+51, r26	; 0x33
    1f82:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f84:	69 a9       	ldd	r22, Y+49	; 0x31
    1f86:	7a a9       	ldd	r23, Y+50	; 0x32
    1f88:	8b a9       	ldd	r24, Y+51	; 0x33
    1f8a:	9c a9       	ldd	r25, Y+52	; 0x34
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	40 e8       	ldi	r20, 0x80	; 128
    1f92:	5f e3       	ldi	r21, 0x3F	; 63
    1f94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f98:	88 23       	and	r24, r24
    1f9a:	2c f4       	brge	.+10     	; 0x1fa6 <LCD_displayCharacter+0x72>
		__ticks = 1;
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	98 ab       	std	Y+48, r25	; 0x30
    1fa2:	8f a7       	std	Y+47, r24	; 0x2f
    1fa4:	3f c0       	rjmp	.+126    	; 0x2024 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1fa6:	69 a9       	ldd	r22, Y+49	; 0x31
    1fa8:	7a a9       	ldd	r23, Y+50	; 0x32
    1faa:	8b a9       	ldd	r24, Y+51	; 0x33
    1fac:	9c a9       	ldd	r25, Y+52	; 0x34
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	3f ef       	ldi	r19, 0xFF	; 255
    1fb2:	4f e7       	ldi	r20, 0x7F	; 127
    1fb4:	57 e4       	ldi	r21, 0x47	; 71
    1fb6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fba:	18 16       	cp	r1, r24
    1fbc:	4c f5       	brge	.+82     	; 0x2010 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fbe:	6d a9       	ldd	r22, Y+53	; 0x35
    1fc0:	7e a9       	ldd	r23, Y+54	; 0x36
    1fc2:	8f a9       	ldd	r24, Y+55	; 0x37
    1fc4:	98 ad       	ldd	r25, Y+56	; 0x38
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	40 e2       	ldi	r20, 0x20	; 32
    1fcc:	51 e4       	ldi	r21, 0x41	; 65
    1fce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	bc 01       	movw	r22, r24
    1fd8:	cd 01       	movw	r24, r26
    1fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	98 ab       	std	Y+48, r25	; 0x30
    1fe4:	8f a7       	std	Y+47, r24	; 0x2f
    1fe6:	0f c0       	rjmp	.+30     	; 0x2006 <LCD_displayCharacter+0xd2>
    1fe8:	88 ec       	ldi	r24, 0xC8	; 200
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	9e a7       	std	Y+46, r25	; 0x2e
    1fee:	8d a7       	std	Y+45, r24	; 0x2d
    1ff0:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ff2:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ff4:	01 97       	sbiw	r24, 0x01	; 1
    1ff6:	f1 f7       	brne	.-4      	; 0x1ff4 <LCD_displayCharacter+0xc0>
    1ff8:	9e a7       	std	Y+46, r25	; 0x2e
    1ffa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ffc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ffe:	98 a9       	ldd	r25, Y+48	; 0x30
    2000:	01 97       	sbiw	r24, 0x01	; 1
    2002:	98 ab       	std	Y+48, r25	; 0x30
    2004:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2006:	8f a5       	ldd	r24, Y+47	; 0x2f
    2008:	98 a9       	ldd	r25, Y+48	; 0x30
    200a:	00 97       	sbiw	r24, 0x00	; 0
    200c:	69 f7       	brne	.-38     	; 0x1fe8 <LCD_displayCharacter+0xb4>
    200e:	14 c0       	rjmp	.+40     	; 0x2038 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2010:	69 a9       	ldd	r22, Y+49	; 0x31
    2012:	7a a9       	ldd	r23, Y+50	; 0x32
    2014:	8b a9       	ldd	r24, Y+51	; 0x33
    2016:	9c a9       	ldd	r25, Y+52	; 0x34
    2018:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	98 ab       	std	Y+48, r25	; 0x30
    2022:	8f a7       	std	Y+47, r24	; 0x2f
    2024:	8f a5       	ldd	r24, Y+47	; 0x2f
    2026:	98 a9       	ldd	r25, Y+48	; 0x30
    2028:	9c a7       	std	Y+44, r25	; 0x2c
    202a:	8b a7       	std	Y+43, r24	; 0x2b
    202c:	8b a5       	ldd	r24, Y+43	; 0x2b
    202e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2030:	01 97       	sbiw	r24, 0x01	; 1
    2032:	f1 f7       	brne	.-4      	; 0x2030 <LCD_displayCharacter+0xfc>
    2034:	9c a7       	std	Y+44, r25	; 0x2c
    2036:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	60 e0       	ldi	r22, 0x00	; 0
    203c:	41 e0       	ldi	r20, 0x01	; 1
    203e:	0e 94 28 09 	call	0x1250	; 0x1250 <GPIO_writePin>
    2042:	80 e0       	ldi	r24, 0x00	; 0
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	a0 e8       	ldi	r26, 0x80	; 128
    2048:	bf e3       	ldi	r27, 0x3F	; 63
    204a:	8f a3       	std	Y+39, r24	; 0x27
    204c:	98 a7       	std	Y+40, r25	; 0x28
    204e:	a9 a7       	std	Y+41, r26	; 0x29
    2050:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2052:	6f a1       	ldd	r22, Y+39	; 0x27
    2054:	78 a5       	ldd	r23, Y+40	; 0x28
    2056:	89 a5       	ldd	r24, Y+41	; 0x29
    2058:	9a a5       	ldd	r25, Y+42	; 0x2a
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	4a ef       	ldi	r20, 0xFA	; 250
    2060:	54 e4       	ldi	r21, 0x44	; 68
    2062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	8b a3       	std	Y+35, r24	; 0x23
    206c:	9c a3       	std	Y+36, r25	; 0x24
    206e:	ad a3       	std	Y+37, r26	; 0x25
    2070:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2072:	6b a1       	ldd	r22, Y+35	; 0x23
    2074:	7c a1       	ldd	r23, Y+36	; 0x24
    2076:	8d a1       	ldd	r24, Y+37	; 0x25
    2078:	9e a1       	ldd	r25, Y+38	; 0x26
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	40 e8       	ldi	r20, 0x80	; 128
    2080:	5f e3       	ldi	r21, 0x3F	; 63
    2082:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2086:	88 23       	and	r24, r24
    2088:	2c f4       	brge	.+10     	; 0x2094 <LCD_displayCharacter+0x160>
		__ticks = 1;
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	9a a3       	std	Y+34, r25	; 0x22
    2090:	89 a3       	std	Y+33, r24	; 0x21
    2092:	3f c0       	rjmp	.+126    	; 0x2112 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2094:	6b a1       	ldd	r22, Y+35	; 0x23
    2096:	7c a1       	ldd	r23, Y+36	; 0x24
    2098:	8d a1       	ldd	r24, Y+37	; 0x25
    209a:	9e a1       	ldd	r25, Y+38	; 0x26
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	3f ef       	ldi	r19, 0xFF	; 255
    20a0:	4f e7       	ldi	r20, 0x7F	; 127
    20a2:	57 e4       	ldi	r21, 0x47	; 71
    20a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20a8:	18 16       	cp	r1, r24
    20aa:	4c f5       	brge	.+82     	; 0x20fe <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ac:	6f a1       	ldd	r22, Y+39	; 0x27
    20ae:	78 a5       	ldd	r23, Y+40	; 0x28
    20b0:	89 a5       	ldd	r24, Y+41	; 0x29
    20b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	40 e2       	ldi	r20, 0x20	; 32
    20ba:	51 e4       	ldi	r21, 0x41	; 65
    20bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	bc 01       	movw	r22, r24
    20c6:	cd 01       	movw	r24, r26
    20c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20cc:	dc 01       	movw	r26, r24
    20ce:	cb 01       	movw	r24, r22
    20d0:	9a a3       	std	Y+34, r25	; 0x22
    20d2:	89 a3       	std	Y+33, r24	; 0x21
    20d4:	0f c0       	rjmp	.+30     	; 0x20f4 <LCD_displayCharacter+0x1c0>
    20d6:	88 ec       	ldi	r24, 0xC8	; 200
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	98 a3       	std	Y+32, r25	; 0x20
    20dc:	8f 8f       	std	Y+31, r24	; 0x1f
    20de:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20e0:	98 a1       	ldd	r25, Y+32	; 0x20
    20e2:	01 97       	sbiw	r24, 0x01	; 1
    20e4:	f1 f7       	brne	.-4      	; 0x20e2 <LCD_displayCharacter+0x1ae>
    20e6:	98 a3       	std	Y+32, r25	; 0x20
    20e8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ea:	89 a1       	ldd	r24, Y+33	; 0x21
    20ec:	9a a1       	ldd	r25, Y+34	; 0x22
    20ee:	01 97       	sbiw	r24, 0x01	; 1
    20f0:	9a a3       	std	Y+34, r25	; 0x22
    20f2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f4:	89 a1       	ldd	r24, Y+33	; 0x21
    20f6:	9a a1       	ldd	r25, Y+34	; 0x22
    20f8:	00 97       	sbiw	r24, 0x00	; 0
    20fa:	69 f7       	brne	.-38     	; 0x20d6 <LCD_displayCharacter+0x1a2>
    20fc:	14 c0       	rjmp	.+40     	; 0x2126 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20fe:	6b a1       	ldd	r22, Y+35	; 0x23
    2100:	7c a1       	ldd	r23, Y+36	; 0x24
    2102:	8d a1       	ldd	r24, Y+37	; 0x25
    2104:	9e a1       	ldd	r25, Y+38	; 0x26
    2106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	9a a3       	std	Y+34, r25	; 0x22
    2110:	89 a3       	std	Y+33, r24	; 0x21
    2112:	89 a1       	ldd	r24, Y+33	; 0x21
    2114:	9a a1       	ldd	r25, Y+34	; 0x22
    2116:	9e 8f       	std	Y+30, r25	; 0x1e
    2118:	8d 8f       	std	Y+29, r24	; 0x1d
    211a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    211c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    211e:	01 97       	sbiw	r24, 0x01	; 1
    2120:	f1 f7       	brne	.-4      	; 0x211e <LCD_displayCharacter+0x1ea>
    2122:	9e 8f       	std	Y+30, r25	; 0x1e
    2124:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2126:	80 e0       	ldi	r24, 0x00	; 0
    2128:	69 ad       	ldd	r22, Y+57	; 0x39
    212a:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <GPIO_writePort>
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	a0 e8       	ldi	r26, 0x80	; 128
    2134:	bf e3       	ldi	r27, 0x3F	; 63
    2136:	89 8f       	std	Y+25, r24	; 0x19
    2138:	9a 8f       	std	Y+26, r25	; 0x1a
    213a:	ab 8f       	std	Y+27, r26	; 0x1b
    213c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    213e:	69 8d       	ldd	r22, Y+25	; 0x19
    2140:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2142:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2144:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	4a ef       	ldi	r20, 0xFA	; 250
    214c:	54 e4       	ldi	r21, 0x44	; 68
    214e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2152:	dc 01       	movw	r26, r24
    2154:	cb 01       	movw	r24, r22
    2156:	8d 8b       	std	Y+21, r24	; 0x15
    2158:	9e 8b       	std	Y+22, r25	; 0x16
    215a:	af 8b       	std	Y+23, r26	; 0x17
    215c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    215e:	6d 89       	ldd	r22, Y+21	; 0x15
    2160:	7e 89       	ldd	r23, Y+22	; 0x16
    2162:	8f 89       	ldd	r24, Y+23	; 0x17
    2164:	98 8d       	ldd	r25, Y+24	; 0x18
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	40 e8       	ldi	r20, 0x80	; 128
    216c:	5f e3       	ldi	r21, 0x3F	; 63
    216e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2172:	88 23       	and	r24, r24
    2174:	2c f4       	brge	.+10     	; 0x2180 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	9c 8b       	std	Y+20, r25	; 0x14
    217c:	8b 8b       	std	Y+19, r24	; 0x13
    217e:	3f c0       	rjmp	.+126    	; 0x21fe <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2180:	6d 89       	ldd	r22, Y+21	; 0x15
    2182:	7e 89       	ldd	r23, Y+22	; 0x16
    2184:	8f 89       	ldd	r24, Y+23	; 0x17
    2186:	98 8d       	ldd	r25, Y+24	; 0x18
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	3f ef       	ldi	r19, 0xFF	; 255
    218c:	4f e7       	ldi	r20, 0x7F	; 127
    218e:	57 e4       	ldi	r21, 0x47	; 71
    2190:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2194:	18 16       	cp	r1, r24
    2196:	4c f5       	brge	.+82     	; 0x21ea <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2198:	69 8d       	ldd	r22, Y+25	; 0x19
    219a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    219c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    219e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	40 e2       	ldi	r20, 0x20	; 32
    21a6:	51 e4       	ldi	r21, 0x41	; 65
    21a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	bc 01       	movw	r22, r24
    21b2:	cd 01       	movw	r24, r26
    21b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b8:	dc 01       	movw	r26, r24
    21ba:	cb 01       	movw	r24, r22
    21bc:	9c 8b       	std	Y+20, r25	; 0x14
    21be:	8b 8b       	std	Y+19, r24	; 0x13
    21c0:	0f c0       	rjmp	.+30     	; 0x21e0 <LCD_displayCharacter+0x2ac>
    21c2:	88 ec       	ldi	r24, 0xC8	; 200
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	9a 8b       	std	Y+18, r25	; 0x12
    21c8:	89 8b       	std	Y+17, r24	; 0x11
    21ca:	89 89       	ldd	r24, Y+17	; 0x11
    21cc:	9a 89       	ldd	r25, Y+18	; 0x12
    21ce:	01 97       	sbiw	r24, 0x01	; 1
    21d0:	f1 f7       	brne	.-4      	; 0x21ce <LCD_displayCharacter+0x29a>
    21d2:	9a 8b       	std	Y+18, r25	; 0x12
    21d4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d6:	8b 89       	ldd	r24, Y+19	; 0x13
    21d8:	9c 89       	ldd	r25, Y+20	; 0x14
    21da:	01 97       	sbiw	r24, 0x01	; 1
    21dc:	9c 8b       	std	Y+20, r25	; 0x14
    21de:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e0:	8b 89       	ldd	r24, Y+19	; 0x13
    21e2:	9c 89       	ldd	r25, Y+20	; 0x14
    21e4:	00 97       	sbiw	r24, 0x00	; 0
    21e6:	69 f7       	brne	.-38     	; 0x21c2 <LCD_displayCharacter+0x28e>
    21e8:	14 c0       	rjmp	.+40     	; 0x2212 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ea:	6d 89       	ldd	r22, Y+21	; 0x15
    21ec:	7e 89       	ldd	r23, Y+22	; 0x16
    21ee:	8f 89       	ldd	r24, Y+23	; 0x17
    21f0:	98 8d       	ldd	r25, Y+24	; 0x18
    21f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	9c 8b       	std	Y+20, r25	; 0x14
    21fc:	8b 8b       	std	Y+19, r24	; 0x13
    21fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2200:	9c 89       	ldd	r25, Y+20	; 0x14
    2202:	98 8b       	std	Y+16, r25	; 0x10
    2204:	8f 87       	std	Y+15, r24	; 0x0f
    2206:	8f 85       	ldd	r24, Y+15	; 0x0f
    2208:	98 89       	ldd	r25, Y+16	; 0x10
    220a:	01 97       	sbiw	r24, 0x01	; 1
    220c:	f1 f7       	brne	.-4      	; 0x220a <LCD_displayCharacter+0x2d6>
    220e:	98 8b       	std	Y+16, r25	; 0x10
    2210:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2212:	81 e0       	ldi	r24, 0x01	; 1
    2214:	60 e0       	ldi	r22, 0x00	; 0
    2216:	40 e0       	ldi	r20, 0x00	; 0
    2218:	0e 94 28 09 	call	0x1250	; 0x1250 <GPIO_writePin>
    221c:	80 e0       	ldi	r24, 0x00	; 0
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	a0 e8       	ldi	r26, 0x80	; 128
    2222:	bf e3       	ldi	r27, 0x3F	; 63
    2224:	8b 87       	std	Y+11, r24	; 0x0b
    2226:	9c 87       	std	Y+12, r25	; 0x0c
    2228:	ad 87       	std	Y+13, r26	; 0x0d
    222a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    222c:	6b 85       	ldd	r22, Y+11	; 0x0b
    222e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2230:	8d 85       	ldd	r24, Y+13	; 0x0d
    2232:	9e 85       	ldd	r25, Y+14	; 0x0e
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	4a ef       	ldi	r20, 0xFA	; 250
    223a:	54 e4       	ldi	r21, 0x44	; 68
    223c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2240:	dc 01       	movw	r26, r24
    2242:	cb 01       	movw	r24, r22
    2244:	8f 83       	std	Y+7, r24	; 0x07
    2246:	98 87       	std	Y+8, r25	; 0x08
    2248:	a9 87       	std	Y+9, r26	; 0x09
    224a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    224c:	6f 81       	ldd	r22, Y+7	; 0x07
    224e:	78 85       	ldd	r23, Y+8	; 0x08
    2250:	89 85       	ldd	r24, Y+9	; 0x09
    2252:	9a 85       	ldd	r25, Y+10	; 0x0a
    2254:	20 e0       	ldi	r18, 0x00	; 0
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	40 e8       	ldi	r20, 0x80	; 128
    225a:	5f e3       	ldi	r21, 0x3F	; 63
    225c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2260:	88 23       	and	r24, r24
    2262:	2c f4       	brge	.+10     	; 0x226e <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	9e 83       	std	Y+6, r25	; 0x06
    226a:	8d 83       	std	Y+5, r24	; 0x05
    226c:	3f c0       	rjmp	.+126    	; 0x22ec <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    226e:	6f 81       	ldd	r22, Y+7	; 0x07
    2270:	78 85       	ldd	r23, Y+8	; 0x08
    2272:	89 85       	ldd	r24, Y+9	; 0x09
    2274:	9a 85       	ldd	r25, Y+10	; 0x0a
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	3f ef       	ldi	r19, 0xFF	; 255
    227a:	4f e7       	ldi	r20, 0x7F	; 127
    227c:	57 e4       	ldi	r21, 0x47	; 71
    227e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2282:	18 16       	cp	r1, r24
    2284:	4c f5       	brge	.+82     	; 0x22d8 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2286:	6b 85       	ldd	r22, Y+11	; 0x0b
    2288:	7c 85       	ldd	r23, Y+12	; 0x0c
    228a:	8d 85       	ldd	r24, Y+13	; 0x0d
    228c:	9e 85       	ldd	r25, Y+14	; 0x0e
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	40 e2       	ldi	r20, 0x20	; 32
    2294:	51 e4       	ldi	r21, 0x41	; 65
    2296:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	bc 01       	movw	r22, r24
    22a0:	cd 01       	movw	r24, r26
    22a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	9e 83       	std	Y+6, r25	; 0x06
    22ac:	8d 83       	std	Y+5, r24	; 0x05
    22ae:	0f c0       	rjmp	.+30     	; 0x22ce <LCD_displayCharacter+0x39a>
    22b0:	88 ec       	ldi	r24, 0xC8	; 200
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	9c 83       	std	Y+4, r25	; 0x04
    22b6:	8b 83       	std	Y+3, r24	; 0x03
    22b8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ba:	9c 81       	ldd	r25, Y+4	; 0x04
    22bc:	01 97       	sbiw	r24, 0x01	; 1
    22be:	f1 f7       	brne	.-4      	; 0x22bc <LCD_displayCharacter+0x388>
    22c0:	9c 83       	std	Y+4, r25	; 0x04
    22c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c4:	8d 81       	ldd	r24, Y+5	; 0x05
    22c6:	9e 81       	ldd	r25, Y+6	; 0x06
    22c8:	01 97       	sbiw	r24, 0x01	; 1
    22ca:	9e 83       	std	Y+6, r25	; 0x06
    22cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ce:	8d 81       	ldd	r24, Y+5	; 0x05
    22d0:	9e 81       	ldd	r25, Y+6	; 0x06
    22d2:	00 97       	sbiw	r24, 0x00	; 0
    22d4:	69 f7       	brne	.-38     	; 0x22b0 <LCD_displayCharacter+0x37c>
    22d6:	14 c0       	rjmp	.+40     	; 0x2300 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d8:	6f 81       	ldd	r22, Y+7	; 0x07
    22da:	78 85       	ldd	r23, Y+8	; 0x08
    22dc:	89 85       	ldd	r24, Y+9	; 0x09
    22de:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	9e 83       	std	Y+6, r25	; 0x06
    22ea:	8d 83       	std	Y+5, r24	; 0x05
    22ec:	8d 81       	ldd	r24, Y+5	; 0x05
    22ee:	9e 81       	ldd	r25, Y+6	; 0x06
    22f0:	9a 83       	std	Y+2, r25	; 0x02
    22f2:	89 83       	std	Y+1, r24	; 0x01
    22f4:	89 81       	ldd	r24, Y+1	; 0x01
    22f6:	9a 81       	ldd	r25, Y+2	; 0x02
    22f8:	01 97       	sbiw	r24, 0x01	; 1
    22fa:	f1 f7       	brne	.-4      	; 0x22f8 <LCD_displayCharacter+0x3c4>
    22fc:	9a 83       	std	Y+2, r25	; 0x02
    22fe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2300:	e9 96       	adiw	r28, 0x39	; 57
    2302:	0f b6       	in	r0, 0x3f	; 63
    2304:	f8 94       	cli
    2306:	de bf       	out	0x3e, r29	; 62
    2308:	0f be       	out	0x3f, r0	; 63
    230a:	cd bf       	out	0x3d, r28	; 61
    230c:	cf 91       	pop	r28
    230e:	df 91       	pop	r29
    2310:	08 95       	ret

00002312 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2312:	df 93       	push	r29
    2314:	cf 93       	push	r28
    2316:	00 d0       	rcall	.+0      	; 0x2318 <LCD_displayString+0x6>
    2318:	0f 92       	push	r0
    231a:	cd b7       	in	r28, 0x3d	; 61
    231c:	de b7       	in	r29, 0x3e	; 62
    231e:	9b 83       	std	Y+3, r25	; 0x03
    2320:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2322:	19 82       	std	Y+1, r1	; 0x01
    2324:	0e c0       	rjmp	.+28     	; 0x2342 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2326:	89 81       	ldd	r24, Y+1	; 0x01
    2328:	28 2f       	mov	r18, r24
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	8a 81       	ldd	r24, Y+2	; 0x02
    232e:	9b 81       	ldd	r25, Y+3	; 0x03
    2330:	fc 01       	movw	r30, r24
    2332:	e2 0f       	add	r30, r18
    2334:	f3 1f       	adc	r31, r19
    2336:	80 81       	ld	r24, Z
    2338:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <LCD_displayCharacter>
		i++;
    233c:	89 81       	ldd	r24, Y+1	; 0x01
    233e:	8f 5f       	subi	r24, 0xFF	; 255
    2340:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2342:	89 81       	ldd	r24, Y+1	; 0x01
    2344:	28 2f       	mov	r18, r24
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	8a 81       	ldd	r24, Y+2	; 0x02
    234a:	9b 81       	ldd	r25, Y+3	; 0x03
    234c:	fc 01       	movw	r30, r24
    234e:	e2 0f       	add	r30, r18
    2350:	f3 1f       	adc	r31, r19
    2352:	80 81       	ld	r24, Z
    2354:	88 23       	and	r24, r24
    2356:	39 f7       	brne	.-50     	; 0x2326 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2358:	0f 90       	pop	r0
    235a:	0f 90       	pop	r0
    235c:	0f 90       	pop	r0
    235e:	cf 91       	pop	r28
    2360:	df 91       	pop	r29
    2362:	08 95       	ret

00002364 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2364:	df 93       	push	r29
    2366:	cf 93       	push	r28
    2368:	00 d0       	rcall	.+0      	; 0x236a <LCD_moveCursor+0x6>
    236a:	00 d0       	rcall	.+0      	; 0x236c <LCD_moveCursor+0x8>
    236c:	0f 92       	push	r0
    236e:	cd b7       	in	r28, 0x3d	; 61
    2370:	de b7       	in	r29, 0x3e	; 62
    2372:	8a 83       	std	Y+2, r24	; 0x02
    2374:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2376:	8a 81       	ldd	r24, Y+2	; 0x02
    2378:	28 2f       	mov	r18, r24
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	3d 83       	std	Y+5, r19	; 0x05
    237e:	2c 83       	std	Y+4, r18	; 0x04
    2380:	8c 81       	ldd	r24, Y+4	; 0x04
    2382:	9d 81       	ldd	r25, Y+5	; 0x05
    2384:	81 30       	cpi	r24, 0x01	; 1
    2386:	91 05       	cpc	r25, r1
    2388:	c1 f0       	breq	.+48     	; 0x23ba <LCD_moveCursor+0x56>
    238a:	2c 81       	ldd	r18, Y+4	; 0x04
    238c:	3d 81       	ldd	r19, Y+5	; 0x05
    238e:	22 30       	cpi	r18, 0x02	; 2
    2390:	31 05       	cpc	r19, r1
    2392:	2c f4       	brge	.+10     	; 0x239e <LCD_moveCursor+0x3a>
    2394:	8c 81       	ldd	r24, Y+4	; 0x04
    2396:	9d 81       	ldd	r25, Y+5	; 0x05
    2398:	00 97       	sbiw	r24, 0x00	; 0
    239a:	61 f0       	breq	.+24     	; 0x23b4 <LCD_moveCursor+0x50>
    239c:	19 c0       	rjmp	.+50     	; 0x23d0 <LCD_moveCursor+0x6c>
    239e:	2c 81       	ldd	r18, Y+4	; 0x04
    23a0:	3d 81       	ldd	r19, Y+5	; 0x05
    23a2:	22 30       	cpi	r18, 0x02	; 2
    23a4:	31 05       	cpc	r19, r1
    23a6:	69 f0       	breq	.+26     	; 0x23c2 <LCD_moveCursor+0x5e>
    23a8:	8c 81       	ldd	r24, Y+4	; 0x04
    23aa:	9d 81       	ldd	r25, Y+5	; 0x05
    23ac:	83 30       	cpi	r24, 0x03	; 3
    23ae:	91 05       	cpc	r25, r1
    23b0:	61 f0       	breq	.+24     	; 0x23ca <LCD_moveCursor+0x66>
    23b2:	0e c0       	rjmp	.+28     	; 0x23d0 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    23b4:	8b 81       	ldd	r24, Y+3	; 0x03
    23b6:	89 83       	std	Y+1, r24	; 0x01
    23b8:	0b c0       	rjmp	.+22     	; 0x23d0 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    23ba:	8b 81       	ldd	r24, Y+3	; 0x03
    23bc:	80 5c       	subi	r24, 0xC0	; 192
    23be:	89 83       	std	Y+1, r24	; 0x01
    23c0:	07 c0       	rjmp	.+14     	; 0x23d0 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    23c2:	8b 81       	ldd	r24, Y+3	; 0x03
    23c4:	80 5f       	subi	r24, 0xF0	; 240
    23c6:	89 83       	std	Y+1, r24	; 0x01
    23c8:	03 c0       	rjmp	.+6      	; 0x23d0 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    23ca:	8b 81       	ldd	r24, Y+3	; 0x03
    23cc:	80 5b       	subi	r24, 0xB0	; 176
    23ce:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    23d0:	89 81       	ldd	r24, Y+1	; 0x01
    23d2:	80 68       	ori	r24, 0x80	; 128
    23d4:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <LCD_sendCommand>
}
    23d8:	0f 90       	pop	r0
    23da:	0f 90       	pop	r0
    23dc:	0f 90       	pop	r0
    23de:	0f 90       	pop	r0
    23e0:	0f 90       	pop	r0
    23e2:	cf 91       	pop	r28
    23e4:	df 91       	pop	r29
    23e6:	08 95       	ret

000023e8 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    23e8:	df 93       	push	r29
    23ea:	cf 93       	push	r28
    23ec:	00 d0       	rcall	.+0      	; 0x23ee <LCD_displayStringRowColumn+0x6>
    23ee:	00 d0       	rcall	.+0      	; 0x23f0 <LCD_displayStringRowColumn+0x8>
    23f0:	cd b7       	in	r28, 0x3d	; 61
    23f2:	de b7       	in	r29, 0x3e	; 62
    23f4:	89 83       	std	Y+1, r24	; 0x01
    23f6:	6a 83       	std	Y+2, r22	; 0x02
    23f8:	5c 83       	std	Y+4, r21	; 0x04
    23fa:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    23fc:	89 81       	ldd	r24, Y+1	; 0x01
    23fe:	6a 81       	ldd	r22, Y+2	; 0x02
    2400:	0e 94 b2 11 	call	0x2364	; 0x2364 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2404:	8b 81       	ldd	r24, Y+3	; 0x03
    2406:	9c 81       	ldd	r25, Y+4	; 0x04
    2408:	0e 94 89 11 	call	0x2312	; 0x2312 <LCD_displayString>
}
    240c:	0f 90       	pop	r0
    240e:	0f 90       	pop	r0
    2410:	0f 90       	pop	r0
    2412:	0f 90       	pop	r0
    2414:	cf 91       	pop	r28
    2416:	df 91       	pop	r29
    2418:	08 95       	ret

0000241a <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    241a:	df 93       	push	r29
    241c:	cf 93       	push	r28
    241e:	cd b7       	in	r28, 0x3d	; 61
    2420:	de b7       	in	r29, 0x3e	; 62
    2422:	62 97       	sbiw	r28, 0x12	; 18
    2424:	0f b6       	in	r0, 0x3f	; 63
    2426:	f8 94       	cli
    2428:	de bf       	out	0x3e, r29	; 62
    242a:	0f be       	out	0x3f, r0	; 63
    242c:	cd bf       	out	0x3d, r28	; 61
    242e:	9a 8b       	std	Y+18, r25	; 0x12
    2430:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2432:	89 89       	ldd	r24, Y+17	; 0x11
    2434:	9a 89       	ldd	r25, Y+18	; 0x12
    2436:	9e 01       	movw	r18, r28
    2438:	2f 5f       	subi	r18, 0xFF	; 255
    243a:	3f 4f       	sbci	r19, 0xFF	; 255
    243c:	b9 01       	movw	r22, r18
    243e:	4a e0       	ldi	r20, 0x0A	; 10
    2440:	50 e0       	ldi	r21, 0x00	; 0
    2442:	0e 94 af 14 	call	0x295e	; 0x295e <itoa>
   LCD_displayString(buff); /* Display the string */
    2446:	ce 01       	movw	r24, r28
    2448:	01 96       	adiw	r24, 0x01	; 1
    244a:	0e 94 89 11 	call	0x2312	; 0x2312 <LCD_displayString>
}
    244e:	62 96       	adiw	r28, 0x12	; 18
    2450:	0f b6       	in	r0, 0x3f	; 63
    2452:	f8 94       	cli
    2454:	de bf       	out	0x3e, r29	; 62
    2456:	0f be       	out	0x3f, r0	; 63
    2458:	cd bf       	out	0x3d, r28	; 61
    245a:	cf 91       	pop	r28
    245c:	df 91       	pop	r29
    245e:	08 95       	ret

00002460 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2460:	df 93       	push	r29
    2462:	cf 93       	push	r28
    2464:	cd b7       	in	r28, 0x3d	; 61
    2466:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2468:	81 e0       	ldi	r24, 0x01	; 1
    246a:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <LCD_sendCommand>
}
    246e:	cf 91       	pop	r28
    2470:	df 91       	pop	r29
    2472:	08 95       	ret

00002474 <__vector_9>:
static volatile void (*g_CallBackPtr)(void) = NULL_PTR;




ISR(TIMER1_OVF_vect){
    2474:	1f 92       	push	r1
    2476:	0f 92       	push	r0
    2478:	0f b6       	in	r0, 0x3f	; 63
    247a:	0f 92       	push	r0
    247c:	11 24       	eor	r1, r1
    247e:	2f 93       	push	r18
    2480:	3f 93       	push	r19
    2482:	4f 93       	push	r20
    2484:	5f 93       	push	r21
    2486:	6f 93       	push	r22
    2488:	7f 93       	push	r23
    248a:	8f 93       	push	r24
    248c:	9f 93       	push	r25
    248e:	af 93       	push	r26
    2490:	bf 93       	push	r27
    2492:	ef 93       	push	r30
    2494:	ff 93       	push	r31
    2496:	df 93       	push	r29
    2498:	cf 93       	push	r28
    249a:	cd b7       	in	r28, 0x3d	; 61
    249c:	de b7       	in	r29, 0x3e	; 62

	(*g_CallBackPtr)();
    249e:	e0 91 f5 00 	lds	r30, 0x00F5
    24a2:	f0 91 f6 00 	lds	r31, 0x00F6
    24a6:	09 95       	icall
}
    24a8:	cf 91       	pop	r28
    24aa:	df 91       	pop	r29
    24ac:	ff 91       	pop	r31
    24ae:	ef 91       	pop	r30
    24b0:	bf 91       	pop	r27
    24b2:	af 91       	pop	r26
    24b4:	9f 91       	pop	r25
    24b6:	8f 91       	pop	r24
    24b8:	7f 91       	pop	r23
    24ba:	6f 91       	pop	r22
    24bc:	5f 91       	pop	r21
    24be:	4f 91       	pop	r20
    24c0:	3f 91       	pop	r19
    24c2:	2f 91       	pop	r18
    24c4:	0f 90       	pop	r0
    24c6:	0f be       	out	0x3f, r0	; 63
    24c8:	0f 90       	pop	r0
    24ca:	1f 90       	pop	r1
    24cc:	18 95       	reti

000024ce <__vector_7>:

ISR(TIMER1_COMPA_vect){
    24ce:	1f 92       	push	r1
    24d0:	0f 92       	push	r0
    24d2:	0f b6       	in	r0, 0x3f	; 63
    24d4:	0f 92       	push	r0
    24d6:	11 24       	eor	r1, r1
    24d8:	2f 93       	push	r18
    24da:	3f 93       	push	r19
    24dc:	4f 93       	push	r20
    24de:	5f 93       	push	r21
    24e0:	6f 93       	push	r22
    24e2:	7f 93       	push	r23
    24e4:	8f 93       	push	r24
    24e6:	9f 93       	push	r25
    24e8:	af 93       	push	r26
    24ea:	bf 93       	push	r27
    24ec:	ef 93       	push	r30
    24ee:	ff 93       	push	r31
    24f0:	df 93       	push	r29
    24f2:	cf 93       	push	r28
    24f4:	cd b7       	in	r28, 0x3d	; 61
    24f6:	de b7       	in	r29, 0x3e	; 62

	(*g_CallBackPtr)();
    24f8:	e0 91 f5 00 	lds	r30, 0x00F5
    24fc:	f0 91 f6 00 	lds	r31, 0x00F6
    2500:	09 95       	icall

}
    2502:	cf 91       	pop	r28
    2504:	df 91       	pop	r29
    2506:	ff 91       	pop	r31
    2508:	ef 91       	pop	r30
    250a:	bf 91       	pop	r27
    250c:	af 91       	pop	r26
    250e:	9f 91       	pop	r25
    2510:	8f 91       	pop	r24
    2512:	7f 91       	pop	r23
    2514:	6f 91       	pop	r22
    2516:	5f 91       	pop	r21
    2518:	4f 91       	pop	r20
    251a:	3f 91       	pop	r19
    251c:	2f 91       	pop	r18
    251e:	0f 90       	pop	r0
    2520:	0f be       	out	0x3f, r0	; 63
    2522:	0f 90       	pop	r0
    2524:	1f 90       	pop	r1
    2526:	18 95       	reti

00002528 <Timer1_init>:

void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    2528:	df 93       	push	r29
    252a:	cf 93       	push	r28
    252c:	00 d0       	rcall	.+0      	; 0x252e <Timer1_init+0x6>
    252e:	cd b7       	in	r28, 0x3d	; 61
    2530:	de b7       	in	r29, 0x3e	; 62
    2532:	9a 83       	std	Y+2, r25	; 0x02
    2534:	89 83       	std	Y+1, r24	; 0x01


	TCCR1A |= (1<<FOC1A);
    2536:	af e4       	ldi	r26, 0x4F	; 79
    2538:	b0 e0       	ldi	r27, 0x00	; 0
    253a:	ef e4       	ldi	r30, 0x4F	; 79
    253c:	f0 e0       	ldi	r31, 0x00	; 0
    253e:	80 81       	ld	r24, Z
    2540:	88 60       	ori	r24, 0x08	; 8
    2542:	8c 93       	st	X, r24
	TCCR1A |= (1<<FOC1B);
    2544:	af e4       	ldi	r26, 0x4F	; 79
    2546:	b0 e0       	ldi	r27, 0x00	; 0
    2548:	ef e4       	ldi	r30, 0x4F	; 79
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	80 81       	ld	r24, Z
    254e:	84 60       	ori	r24, 0x04	; 4
    2550:	8c 93       	st	X, r24

	if(Config_Ptr->mode == NORMAL){
    2552:	e9 81       	ldd	r30, Y+1	; 0x01
    2554:	fa 81       	ldd	r31, Y+2	; 0x02
    2556:	85 81       	ldd	r24, Z+5	; 0x05
    2558:	88 23       	and	r24, r24
    255a:	41 f4       	brne	.+16     	; 0x256c <Timer1_init+0x44>

		TIMSK |= (1<<TOIE1);
    255c:	a9 e5       	ldi	r26, 0x59	; 89
    255e:	b0 e0       	ldi	r27, 0x00	; 0
    2560:	e9 e5       	ldi	r30, 0x59	; 89
    2562:	f0 e0       	ldi	r31, 0x00	; 0
    2564:	80 81       	ld	r24, Z
    2566:	84 60       	ori	r24, 0x04	; 4
    2568:	8c 93       	st	X, r24
    256a:	13 c0       	rjmp	.+38     	; 0x2592 <Timer1_init+0x6a>
	}
	else if(Config_Ptr->mode == CTC_OCR){
    256c:	e9 81       	ldd	r30, Y+1	; 0x01
    256e:	fa 81       	ldd	r31, Y+2	; 0x02
    2570:	85 81       	ldd	r24, Z+5	; 0x05
    2572:	84 30       	cpi	r24, 0x04	; 4
    2574:	71 f4       	brne	.+28     	; 0x2592 <Timer1_init+0x6a>

		TCCR1B|=(1<<WGM12);
    2576:	ae e4       	ldi	r26, 0x4E	; 78
    2578:	b0 e0       	ldi	r27, 0x00	; 0
    257a:	ee e4       	ldi	r30, 0x4E	; 78
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	80 81       	ld	r24, Z
    2580:	88 60       	ori	r24, 0x08	; 8
    2582:	8c 93       	st	X, r24


		TIMSK |= (1<<OCIE1A);
    2584:	a9 e5       	ldi	r26, 0x59	; 89
    2586:	b0 e0       	ldi	r27, 0x00	; 0
    2588:	e9 e5       	ldi	r30, 0x59	; 89
    258a:	f0 e0       	ldi	r31, 0x00	; 0
    258c:	80 81       	ld	r24, Z
    258e:	80 61       	ori	r24, 0x10	; 16
    2590:	8c 93       	st	X, r24

	}

	TCCR1B |= ( ( (Config_Ptr->prescaler&0x1) >>0) <<CS10)
    2592:	ae e4       	ldi	r26, 0x4E	; 78
    2594:	b0 e0       	ldi	r27, 0x00	; 0
    2596:	ee e4       	ldi	r30, 0x4E	; 78
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	80 81       	ld	r24, Z
    259c:	98 2f       	mov	r25, r24
    259e:	e9 81       	ldd	r30, Y+1	; 0x01
    25a0:	fa 81       	ldd	r31, Y+2	; 0x02
    25a2:	84 81       	ldd	r24, Z+4	; 0x04
    25a4:	87 70       	andi	r24, 0x07	; 7
    25a6:	89 2b       	or	r24, r25
    25a8:	8c 93       	st	X, r24
		     |( ( (Config_Ptr->prescaler&0x2) >>1) <<CS11)
		     |( ( (Config_Ptr->prescaler&0x4) >>2) <<CS12);

	TCNT1 = Config_Ptr->initial_value;
    25aa:	ac e4       	ldi	r26, 0x4C	; 76
    25ac:	b0 e0       	ldi	r27, 0x00	; 0
    25ae:	e9 81       	ldd	r30, Y+1	; 0x01
    25b0:	fa 81       	ldd	r31, Y+2	; 0x02
    25b2:	80 81       	ld	r24, Z
    25b4:	91 81       	ldd	r25, Z+1	; 0x01
    25b6:	11 96       	adiw	r26, 0x01	; 1
    25b8:	9c 93       	st	X, r25
    25ba:	8e 93       	st	-X, r24

	if(Config_Ptr->mode == CTC_OCR){
    25bc:	e9 81       	ldd	r30, Y+1	; 0x01
    25be:	fa 81       	ldd	r31, Y+2	; 0x02
    25c0:	85 81       	ldd	r24, Z+5	; 0x05
    25c2:	84 30       	cpi	r24, 0x04	; 4
    25c4:	51 f4       	brne	.+20     	; 0x25da <Timer1_init+0xb2>
		OCR1A = Config_Ptr->compare_value;
    25c6:	ea e4       	ldi	r30, 0x4A	; 74
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	a9 81       	ldd	r26, Y+1	; 0x01
    25cc:	ba 81       	ldd	r27, Y+2	; 0x02
    25ce:	12 96       	adiw	r26, 0x02	; 2
    25d0:	8d 91       	ld	r24, X+
    25d2:	9c 91       	ld	r25, X
    25d4:	13 97       	sbiw	r26, 0x03	; 3
    25d6:	91 83       	std	Z+1, r25	; 0x01
    25d8:	80 83       	st	Z, r24
//			SET_BIT(TIMSK,TOIE1);
//		}
//		else if(Config_Ptr->mode == CTC_OCR){
//			SET_BIT(TIMSK,OCIE1A);
//		}
		SREG |= (1<<7);
    25da:	af e5       	ldi	r26, 0x5F	; 95
    25dc:	b0 e0       	ldi	r27, 0x00	; 0
    25de:	ef e5       	ldi	r30, 0x5F	; 95
    25e0:	f0 e0       	ldi	r31, 0x00	; 0
    25e2:	80 81       	ld	r24, Z
    25e4:	80 68       	ori	r24, 0x80	; 128
    25e6:	8c 93       	st	X, r24
}
    25e8:	0f 90       	pop	r0
    25ea:	0f 90       	pop	r0
    25ec:	cf 91       	pop	r28
    25ee:	df 91       	pop	r29
    25f0:	08 95       	ret

000025f2 <Timer1_deInit>:


void Timer1_deInit(void){
    25f2:	df 93       	push	r29
    25f4:	cf 93       	push	r28
    25f6:	0f 92       	push	r0
    25f8:	cd b7       	in	r28, 0x3d	; 61
    25fa:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    25fc:	ef e4       	ldi	r30, 0x4F	; 79
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	10 82       	st	Z, r1
	TCCR1B = 0;
    2602:	ee e4       	ldi	r30, 0x4E	; 78
    2604:	f0 e0       	ldi	r31, 0x00	; 0
    2606:	10 82       	st	Z, r1
	TCNT1 = 0;
    2608:	ec e4       	ldi	r30, 0x4C	; 76
    260a:	f0 e0       	ldi	r31, 0x00	; 0
    260c:	11 82       	std	Z+1, r1	; 0x01
    260e:	10 82       	st	Z, r1
	OCR1A = 0;
    2610:	ea e4       	ldi	r30, 0x4A	; 74
    2612:	f0 e0       	ldi	r31, 0x00	; 0
    2614:	11 82       	std	Z+1, r1	; 0x01
    2616:	10 82       	st	Z, r1
	TIMSK &= 0x3c;
    2618:	a9 e5       	ldi	r26, 0x59	; 89
    261a:	b0 e0       	ldi	r27, 0x00	; 0
    261c:	e9 e5       	ldi	r30, 0x59	; 89
    261e:	f0 e0       	ldi	r31, 0x00	; 0
    2620:	80 81       	ld	r24, Z
    2622:	8c 73       	andi	r24, 0x3C	; 60
    2624:	8c 93       	st	X, r24
	SREG &= (0<<7);
    2626:	ef e5       	ldi	r30, 0x5F	; 95
    2628:	f0 e0       	ldi	r31, 0x00	; 0
    262a:	80 81       	ld	r24, Z
    262c:	ef e5       	ldi	r30, 0x5F	; 95
    262e:	f0 e0       	ldi	r31, 0x00	; 0
    2630:	10 82       	st	Z, r1
	g_CallBackPtr = NULL_PTR;
    2632:	10 92 f6 00 	sts	0x00F6, r1
    2636:	10 92 f5 00 	sts	0x00F5, r1
}
    263a:	0f 90       	pop	r0
    263c:	cf 91       	pop	r28
    263e:	df 91       	pop	r29
    2640:	08 95       	ret

00002642 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void)){
    2642:	df 93       	push	r29
    2644:	cf 93       	push	r28
    2646:	00 d0       	rcall	.+0      	; 0x2648 <Timer1_setCallBack+0x6>
    2648:	cd b7       	in	r28, 0x3d	; 61
    264a:	de b7       	in	r29, 0x3e	; 62
    264c:	9a 83       	std	Y+2, r25	; 0x02
    264e:	89 83       	std	Y+1, r24	; 0x01
	g_CallBackPtr = a_ptr;
    2650:	89 81       	ldd	r24, Y+1	; 0x01
    2652:	9a 81       	ldd	r25, Y+2	; 0x02
    2654:	90 93 f6 00 	sts	0x00F6, r25
    2658:	80 93 f5 00 	sts	0x00F5, r24
}
    265c:	0f 90       	pop	r0
    265e:	0f 90       	pop	r0
    2660:	cf 91       	pop	r28
    2662:	df 91       	pop	r29
    2664:	08 95       	ret

00002666 <UART_init>:
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
//void UART_init(uint32 baud_rate)
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2666:	df 93       	push	r29
    2668:	cf 93       	push	r28
    266a:	00 d0       	rcall	.+0      	; 0x266c <UART_init+0x6>
    266c:	00 d0       	rcall	.+0      	; 0x266e <UART_init+0x8>
    266e:	cd b7       	in	r28, 0x3d	; 61
    2670:	de b7       	in	r29, 0x3e	; 62
    2672:	9c 83       	std	Y+4, r25	; 0x04
    2674:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2676:	1a 82       	std	Y+2, r1	; 0x02
    2678:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    267a:	eb e2       	ldi	r30, 0x2B	; 43
    267c:	f0 e0       	ldi	r31, 0x00	; 0
    267e:	82 e0       	ldi	r24, 0x02	; 2
    2680:	80 83       	st	Z, r24
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	//UCSRB = (1<<RXEN) | (1<<TXEN);
	UCSRB = (1<<RXEN) | (1<<TXEN)  |( ( (Config_Ptr->bit_data&0x4) >>2) <<UCSZ2);
    2682:	aa e2       	ldi	r26, 0x2A	; 42
    2684:	b0 e0       	ldi	r27, 0x00	; 0
    2686:	eb 81       	ldd	r30, Y+3	; 0x03
    2688:	fc 81       	ldd	r31, Y+4	; 0x04
    268a:	80 81       	ld	r24, Z
    268c:	84 70       	andi	r24, 0x04	; 4
    268e:	88 61       	ori	r24, 0x18	; 24
    2690:	8c 93       	st	X, r24
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	//UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
	UCSRC =( ( (Config_Ptr->bit_data&0x1) >>0) <<UCSZ0)
    2692:	a0 e4       	ldi	r26, 0x40	; 64
    2694:	b0 e0       	ldi	r27, 0x00	; 0
    2696:	eb 81       	ldd	r30, Y+3	; 0x03
    2698:	fc 81       	ldd	r31, Y+4	; 0x04
    269a:	80 81       	ld	r24, Z
    269c:	88 2f       	mov	r24, r24
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	81 70       	andi	r24, 0x01	; 1
    26a2:	90 70       	andi	r25, 0x00	; 0
    26a4:	88 0f       	add	r24, r24
    26a6:	99 1f       	adc	r25, r25
    26a8:	28 2f       	mov	r18, r24
    26aa:	eb 81       	ldd	r30, Y+3	; 0x03
    26ac:	fc 81       	ldd	r31, Y+4	; 0x04
    26ae:	80 81       	ld	r24, Z
    26b0:	88 2f       	mov	r24, r24
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	82 70       	andi	r24, 0x02	; 2
    26b6:	90 70       	andi	r25, 0x00	; 0
    26b8:	95 95       	asr	r25
    26ba:	87 95       	ror	r24
    26bc:	88 0f       	add	r24, r24
    26be:	99 1f       	adc	r25, r25
    26c0:	88 0f       	add	r24, r24
    26c2:	99 1f       	adc	r25, r25
    26c4:	28 2b       	or	r18, r24
    26c6:	eb 81       	ldd	r30, Y+3	; 0x03
    26c8:	fc 81       	ldd	r31, Y+4	; 0x04
    26ca:	81 81       	ldd	r24, Z+1	; 0x01
    26cc:	88 2f       	mov	r24, r24
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	82 70       	andi	r24, 0x02	; 2
    26d2:	90 70       	andi	r25, 0x00	; 0
    26d4:	95 95       	asr	r25
    26d6:	87 95       	ror	r24
    26d8:	88 0f       	add	r24, r24
    26da:	99 1f       	adc	r25, r25
    26dc:	82 95       	swap	r24
    26de:	92 95       	swap	r25
    26e0:	90 7f       	andi	r25, 0xF0	; 240
    26e2:	98 27       	eor	r25, r24
    26e4:	80 7f       	andi	r24, 0xF0	; 240
    26e6:	98 27       	eor	r25, r24
    26e8:	28 2b       	or	r18, r24
    26ea:	eb 81       	ldd	r30, Y+3	; 0x03
    26ec:	fc 81       	ldd	r31, Y+4	; 0x04
    26ee:	81 81       	ldd	r24, Z+1	; 0x01
    26f0:	88 2f       	mov	r24, r24
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	81 70       	andi	r24, 0x01	; 1
    26f6:	90 70       	andi	r25, 0x00	; 0
    26f8:	82 95       	swap	r24
    26fa:	92 95       	swap	r25
    26fc:	90 7f       	andi	r25, 0xF0	; 240
    26fe:	98 27       	eor	r25, r24
    2700:	80 7f       	andi	r24, 0xF0	; 240
    2702:	98 27       	eor	r25, r24
    2704:	28 2b       	or	r18, r24
    2706:	eb 81       	ldd	r30, Y+3	; 0x03
    2708:	fc 81       	ldd	r31, Y+4	; 0x04
    270a:	82 81       	ldd	r24, Z+2	; 0x02
    270c:	88 2f       	mov	r24, r24
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	88 0f       	add	r24, r24
    2712:	99 1f       	adc	r25, r25
    2714:	88 0f       	add	r24, r24
    2716:	99 1f       	adc	r25, r25
    2718:	88 0f       	add	r24, r24
    271a:	99 1f       	adc	r25, r25
    271c:	82 2b       	or	r24, r18
    271e:	80 68       	ori	r24, 0x80	; 128
    2720:	8c 93       	st	X, r24



	/* Calculate the UBRR register value */
	//ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    2722:	eb 81       	ldd	r30, Y+3	; 0x03
    2724:	fc 81       	ldd	r31, Y+4	; 0x04
    2726:	83 81       	ldd	r24, Z+3	; 0x03
    2728:	94 81       	ldd	r25, Z+4	; 0x04
    272a:	a5 81       	ldd	r26, Z+5	; 0x05
    272c:	b6 81       	ldd	r27, Z+6	; 0x06
    272e:	88 0f       	add	r24, r24
    2730:	99 1f       	adc	r25, r25
    2732:	aa 1f       	adc	r26, r26
    2734:	bb 1f       	adc	r27, r27
    2736:	88 0f       	add	r24, r24
    2738:	99 1f       	adc	r25, r25
    273a:	aa 1f       	adc	r26, r26
    273c:	bb 1f       	adc	r27, r27
    273e:	88 0f       	add	r24, r24
    2740:	99 1f       	adc	r25, r25
    2742:	aa 1f       	adc	r26, r26
    2744:	bb 1f       	adc	r27, r27
    2746:	9c 01       	movw	r18, r24
    2748:	ad 01       	movw	r20, r26
    274a:	80 e0       	ldi	r24, 0x00	; 0
    274c:	92 e1       	ldi	r25, 0x12	; 18
    274e:	aa e7       	ldi	r26, 0x7A	; 122
    2750:	b0 e0       	ldi	r27, 0x00	; 0
    2752:	bc 01       	movw	r22, r24
    2754:	cd 01       	movw	r24, r26
    2756:	0e 94 56 14 	call	0x28ac	; 0x28ac <__udivmodsi4>
    275a:	da 01       	movw	r26, r20
    275c:	c9 01       	movw	r24, r18
    275e:	01 97       	sbiw	r24, 0x01	; 1
    2760:	9a 83       	std	Y+2, r25	; 0x02
    2762:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2764:	e0 e4       	ldi	r30, 0x40	; 64
    2766:	f0 e0       	ldi	r31, 0x00	; 0
    2768:	89 81       	ldd	r24, Y+1	; 0x01
    276a:	9a 81       	ldd	r25, Y+2	; 0x02
    276c:	89 2f       	mov	r24, r25
    276e:	99 27       	eor	r25, r25
    2770:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2772:	e9 e2       	ldi	r30, 0x29	; 41
    2774:	f0 e0       	ldi	r31, 0x00	; 0
    2776:	89 81       	ldd	r24, Y+1	; 0x01
    2778:	80 83       	st	Z, r24
}
    277a:	0f 90       	pop	r0
    277c:	0f 90       	pop	r0
    277e:	0f 90       	pop	r0
    2780:	0f 90       	pop	r0
    2782:	cf 91       	pop	r28
    2784:	df 91       	pop	r29
    2786:	08 95       	ret

00002788 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2788:	df 93       	push	r29
    278a:	cf 93       	push	r28
    278c:	0f 92       	push	r0
    278e:	cd b7       	in	r28, 0x3d	; 61
    2790:	de b7       	in	r29, 0x3e	; 62
    2792:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2794:	eb e2       	ldi	r30, 0x2B	; 43
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	80 81       	ld	r24, Z
    279a:	88 2f       	mov	r24, r24
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	80 72       	andi	r24, 0x20	; 32
    27a0:	90 70       	andi	r25, 0x00	; 0
    27a2:	00 97       	sbiw	r24, 0x00	; 0
    27a4:	b9 f3       	breq	.-18     	; 0x2794 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    27a6:	ec e2       	ldi	r30, 0x2C	; 44
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	89 81       	ldd	r24, Y+1	; 0x01
    27ac:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    27ae:	0f 90       	pop	r0
    27b0:	cf 91       	pop	r28
    27b2:	df 91       	pop	r29
    27b4:	08 95       	ret

000027b6 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    27b6:	df 93       	push	r29
    27b8:	cf 93       	push	r28
    27ba:	cd b7       	in	r28, 0x3d	; 61
    27bc:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    27be:	eb e2       	ldi	r30, 0x2B	; 43
    27c0:	f0 e0       	ldi	r31, 0x00	; 0
    27c2:	80 81       	ld	r24, Z
    27c4:	88 23       	and	r24, r24
    27c6:	dc f7       	brge	.-10     	; 0x27be <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    27c8:	ec e2       	ldi	r30, 0x2C	; 44
    27ca:	f0 e0       	ldi	r31, 0x00	; 0
    27cc:	80 81       	ld	r24, Z
}
    27ce:	cf 91       	pop	r28
    27d0:	df 91       	pop	r29
    27d2:	08 95       	ret

000027d4 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    27d4:	df 93       	push	r29
    27d6:	cf 93       	push	r28
    27d8:	00 d0       	rcall	.+0      	; 0x27da <UART_sendString+0x6>
    27da:	0f 92       	push	r0
    27dc:	cd b7       	in	r28, 0x3d	; 61
    27de:	de b7       	in	r29, 0x3e	; 62
    27e0:	9b 83       	std	Y+3, r25	; 0x03
    27e2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    27e4:	19 82       	std	Y+1, r1	; 0x01
    27e6:	0e c0       	rjmp	.+28     	; 0x2804 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    27e8:	89 81       	ldd	r24, Y+1	; 0x01
    27ea:	28 2f       	mov	r18, r24
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	8a 81       	ldd	r24, Y+2	; 0x02
    27f0:	9b 81       	ldd	r25, Y+3	; 0x03
    27f2:	fc 01       	movw	r30, r24
    27f4:	e2 0f       	add	r30, r18
    27f6:	f3 1f       	adc	r31, r19
    27f8:	80 81       	ld	r24, Z
    27fa:	0e 94 c4 13 	call	0x2788	; 0x2788 <UART_sendByte>
		i++;
    27fe:	89 81       	ldd	r24, Y+1	; 0x01
    2800:	8f 5f       	subi	r24, 0xFF	; 255
    2802:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2804:	89 81       	ldd	r24, Y+1	; 0x01
    2806:	28 2f       	mov	r18, r24
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	8a 81       	ldd	r24, Y+2	; 0x02
    280c:	9b 81       	ldd	r25, Y+3	; 0x03
    280e:	fc 01       	movw	r30, r24
    2810:	e2 0f       	add	r30, r18
    2812:	f3 1f       	adc	r31, r19
    2814:	80 81       	ld	r24, Z
    2816:	88 23       	and	r24, r24
    2818:	39 f7       	brne	.-50     	; 0x27e8 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    281a:	0f 90       	pop	r0
    281c:	0f 90       	pop	r0
    281e:	0f 90       	pop	r0
    2820:	cf 91       	pop	r28
    2822:	df 91       	pop	r29
    2824:	08 95       	ret

00002826 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2826:	0f 93       	push	r16
    2828:	1f 93       	push	r17
    282a:	df 93       	push	r29
    282c:	cf 93       	push	r28
    282e:	00 d0       	rcall	.+0      	; 0x2830 <UART_receiveString+0xa>
    2830:	0f 92       	push	r0
    2832:	cd b7       	in	r28, 0x3d	; 61
    2834:	de b7       	in	r29, 0x3e	; 62
    2836:	9b 83       	std	Y+3, r25	; 0x03
    2838:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    283a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    283c:	89 81       	ldd	r24, Y+1	; 0x01
    283e:	28 2f       	mov	r18, r24
    2840:	30 e0       	ldi	r19, 0x00	; 0
    2842:	8a 81       	ldd	r24, Y+2	; 0x02
    2844:	9b 81       	ldd	r25, Y+3	; 0x03
    2846:	8c 01       	movw	r16, r24
    2848:	02 0f       	add	r16, r18
    284a:	13 1f       	adc	r17, r19
    284c:	0e 94 db 13 	call	0x27b6	; 0x27b6 <UART_recieveByte>
    2850:	f8 01       	movw	r30, r16
    2852:	80 83       	st	Z, r24
    2854:	0f c0       	rjmp	.+30     	; 0x2874 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2856:	89 81       	ldd	r24, Y+1	; 0x01
    2858:	8f 5f       	subi	r24, 0xFF	; 255
    285a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    285c:	89 81       	ldd	r24, Y+1	; 0x01
    285e:	28 2f       	mov	r18, r24
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	8a 81       	ldd	r24, Y+2	; 0x02
    2864:	9b 81       	ldd	r25, Y+3	; 0x03
    2866:	8c 01       	movw	r16, r24
    2868:	02 0f       	add	r16, r18
    286a:	13 1f       	adc	r17, r19
    286c:	0e 94 db 13 	call	0x27b6	; 0x27b6 <UART_recieveByte>
    2870:	f8 01       	movw	r30, r16
    2872:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2874:	89 81       	ldd	r24, Y+1	; 0x01
    2876:	28 2f       	mov	r18, r24
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	8a 81       	ldd	r24, Y+2	; 0x02
    287c:	9b 81       	ldd	r25, Y+3	; 0x03
    287e:	fc 01       	movw	r30, r24
    2880:	e2 0f       	add	r30, r18
    2882:	f3 1f       	adc	r31, r19
    2884:	80 81       	ld	r24, Z
    2886:	83 32       	cpi	r24, 0x23	; 35
    2888:	31 f7       	brne	.-52     	; 0x2856 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    288a:	89 81       	ldd	r24, Y+1	; 0x01
    288c:	28 2f       	mov	r18, r24
    288e:	30 e0       	ldi	r19, 0x00	; 0
    2890:	8a 81       	ldd	r24, Y+2	; 0x02
    2892:	9b 81       	ldd	r25, Y+3	; 0x03
    2894:	fc 01       	movw	r30, r24
    2896:	e2 0f       	add	r30, r18
    2898:	f3 1f       	adc	r31, r19
    289a:	10 82       	st	Z, r1
}
    289c:	0f 90       	pop	r0
    289e:	0f 90       	pop	r0
    28a0:	0f 90       	pop	r0
    28a2:	cf 91       	pop	r28
    28a4:	df 91       	pop	r29
    28a6:	1f 91       	pop	r17
    28a8:	0f 91       	pop	r16
    28aa:	08 95       	ret

000028ac <__udivmodsi4>:
    28ac:	a1 e2       	ldi	r26, 0x21	; 33
    28ae:	1a 2e       	mov	r1, r26
    28b0:	aa 1b       	sub	r26, r26
    28b2:	bb 1b       	sub	r27, r27
    28b4:	fd 01       	movw	r30, r26
    28b6:	0d c0       	rjmp	.+26     	; 0x28d2 <__udivmodsi4_ep>

000028b8 <__udivmodsi4_loop>:
    28b8:	aa 1f       	adc	r26, r26
    28ba:	bb 1f       	adc	r27, r27
    28bc:	ee 1f       	adc	r30, r30
    28be:	ff 1f       	adc	r31, r31
    28c0:	a2 17       	cp	r26, r18
    28c2:	b3 07       	cpc	r27, r19
    28c4:	e4 07       	cpc	r30, r20
    28c6:	f5 07       	cpc	r31, r21
    28c8:	20 f0       	brcs	.+8      	; 0x28d2 <__udivmodsi4_ep>
    28ca:	a2 1b       	sub	r26, r18
    28cc:	b3 0b       	sbc	r27, r19
    28ce:	e4 0b       	sbc	r30, r20
    28d0:	f5 0b       	sbc	r31, r21

000028d2 <__udivmodsi4_ep>:
    28d2:	66 1f       	adc	r22, r22
    28d4:	77 1f       	adc	r23, r23
    28d6:	88 1f       	adc	r24, r24
    28d8:	99 1f       	adc	r25, r25
    28da:	1a 94       	dec	r1
    28dc:	69 f7       	brne	.-38     	; 0x28b8 <__udivmodsi4_loop>
    28de:	60 95       	com	r22
    28e0:	70 95       	com	r23
    28e2:	80 95       	com	r24
    28e4:	90 95       	com	r25
    28e6:	9b 01       	movw	r18, r22
    28e8:	ac 01       	movw	r20, r24
    28ea:	bd 01       	movw	r22, r26
    28ec:	cf 01       	movw	r24, r30
    28ee:	08 95       	ret

000028f0 <__prologue_saves__>:
    28f0:	2f 92       	push	r2
    28f2:	3f 92       	push	r3
    28f4:	4f 92       	push	r4
    28f6:	5f 92       	push	r5
    28f8:	6f 92       	push	r6
    28fa:	7f 92       	push	r7
    28fc:	8f 92       	push	r8
    28fe:	9f 92       	push	r9
    2900:	af 92       	push	r10
    2902:	bf 92       	push	r11
    2904:	cf 92       	push	r12
    2906:	df 92       	push	r13
    2908:	ef 92       	push	r14
    290a:	ff 92       	push	r15
    290c:	0f 93       	push	r16
    290e:	1f 93       	push	r17
    2910:	cf 93       	push	r28
    2912:	df 93       	push	r29
    2914:	cd b7       	in	r28, 0x3d	; 61
    2916:	de b7       	in	r29, 0x3e	; 62
    2918:	ca 1b       	sub	r28, r26
    291a:	db 0b       	sbc	r29, r27
    291c:	0f b6       	in	r0, 0x3f	; 63
    291e:	f8 94       	cli
    2920:	de bf       	out	0x3e, r29	; 62
    2922:	0f be       	out	0x3f, r0	; 63
    2924:	cd bf       	out	0x3d, r28	; 61
    2926:	09 94       	ijmp

00002928 <__epilogue_restores__>:
    2928:	2a 88       	ldd	r2, Y+18	; 0x12
    292a:	39 88       	ldd	r3, Y+17	; 0x11
    292c:	48 88       	ldd	r4, Y+16	; 0x10
    292e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2930:	6e 84       	ldd	r6, Y+14	; 0x0e
    2932:	7d 84       	ldd	r7, Y+13	; 0x0d
    2934:	8c 84       	ldd	r8, Y+12	; 0x0c
    2936:	9b 84       	ldd	r9, Y+11	; 0x0b
    2938:	aa 84       	ldd	r10, Y+10	; 0x0a
    293a:	b9 84       	ldd	r11, Y+9	; 0x09
    293c:	c8 84       	ldd	r12, Y+8	; 0x08
    293e:	df 80       	ldd	r13, Y+7	; 0x07
    2940:	ee 80       	ldd	r14, Y+6	; 0x06
    2942:	fd 80       	ldd	r15, Y+5	; 0x05
    2944:	0c 81       	ldd	r16, Y+4	; 0x04
    2946:	1b 81       	ldd	r17, Y+3	; 0x03
    2948:	aa 81       	ldd	r26, Y+2	; 0x02
    294a:	b9 81       	ldd	r27, Y+1	; 0x01
    294c:	ce 0f       	add	r28, r30
    294e:	d1 1d       	adc	r29, r1
    2950:	0f b6       	in	r0, 0x3f	; 63
    2952:	f8 94       	cli
    2954:	de bf       	out	0x3e, r29	; 62
    2956:	0f be       	out	0x3f, r0	; 63
    2958:	cd bf       	out	0x3d, r28	; 61
    295a:	ed 01       	movw	r28, r26
    295c:	08 95       	ret

0000295e <itoa>:
    295e:	fb 01       	movw	r30, r22
    2960:	9f 01       	movw	r18, r30
    2962:	e8 94       	clt
    2964:	42 30       	cpi	r20, 0x02	; 2
    2966:	c4 f0       	brlt	.+48     	; 0x2998 <itoa+0x3a>
    2968:	45 32       	cpi	r20, 0x25	; 37
    296a:	b4 f4       	brge	.+44     	; 0x2998 <itoa+0x3a>
    296c:	4a 30       	cpi	r20, 0x0A	; 10
    296e:	29 f4       	brne	.+10     	; 0x297a <itoa+0x1c>
    2970:	97 fb       	bst	r25, 7
    2972:	1e f4       	brtc	.+6      	; 0x297a <itoa+0x1c>
    2974:	90 95       	com	r25
    2976:	81 95       	neg	r24
    2978:	9f 4f       	sbci	r25, 0xFF	; 255
    297a:	64 2f       	mov	r22, r20
    297c:	77 27       	eor	r23, r23
    297e:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__udivmodhi4>
    2982:	80 5d       	subi	r24, 0xD0	; 208
    2984:	8a 33       	cpi	r24, 0x3A	; 58
    2986:	0c f0       	brlt	.+2      	; 0x298a <itoa+0x2c>
    2988:	89 5d       	subi	r24, 0xD9	; 217
    298a:	81 93       	st	Z+, r24
    298c:	cb 01       	movw	r24, r22
    298e:	00 97       	sbiw	r24, 0x00	; 0
    2990:	a1 f7       	brne	.-24     	; 0x297a <itoa+0x1c>
    2992:	16 f4       	brtc	.+4      	; 0x2998 <itoa+0x3a>
    2994:	5d e2       	ldi	r21, 0x2D	; 45
    2996:	51 93       	st	Z+, r21
    2998:	10 82       	st	Z, r1
    299a:	c9 01       	movw	r24, r18
    299c:	0c 94 d0 14 	jmp	0x29a0	; 0x29a0 <strrev>

000029a0 <strrev>:
    29a0:	dc 01       	movw	r26, r24
    29a2:	fc 01       	movw	r30, r24
    29a4:	67 2f       	mov	r22, r23
    29a6:	71 91       	ld	r23, Z+
    29a8:	77 23       	and	r23, r23
    29aa:	e1 f7       	brne	.-8      	; 0x29a4 <strrev+0x4>
    29ac:	32 97       	sbiw	r30, 0x02	; 2
    29ae:	04 c0       	rjmp	.+8      	; 0x29b8 <strrev+0x18>
    29b0:	7c 91       	ld	r23, X
    29b2:	6d 93       	st	X+, r22
    29b4:	70 83       	st	Z, r23
    29b6:	62 91       	ld	r22, -Z
    29b8:	ae 17       	cp	r26, r30
    29ba:	bf 07       	cpc	r27, r31
    29bc:	c8 f3       	brcs	.-14     	; 0x29b0 <strrev+0x10>
    29be:	08 95       	ret

000029c0 <__udivmodhi4>:
    29c0:	aa 1b       	sub	r26, r26
    29c2:	bb 1b       	sub	r27, r27
    29c4:	51 e1       	ldi	r21, 0x11	; 17
    29c6:	07 c0       	rjmp	.+14     	; 0x29d6 <__udivmodhi4_ep>

000029c8 <__udivmodhi4_loop>:
    29c8:	aa 1f       	adc	r26, r26
    29ca:	bb 1f       	adc	r27, r27
    29cc:	a6 17       	cp	r26, r22
    29ce:	b7 07       	cpc	r27, r23
    29d0:	10 f0       	brcs	.+4      	; 0x29d6 <__udivmodhi4_ep>
    29d2:	a6 1b       	sub	r26, r22
    29d4:	b7 0b       	sbc	r27, r23

000029d6 <__udivmodhi4_ep>:
    29d6:	88 1f       	adc	r24, r24
    29d8:	99 1f       	adc	r25, r25
    29da:	5a 95       	dec	r21
    29dc:	a9 f7       	brne	.-22     	; 0x29c8 <__udivmodhi4_loop>
    29de:	80 95       	com	r24
    29e0:	90 95       	com	r25
    29e2:	bc 01       	movw	r22, r24
    29e4:	cd 01       	movw	r24, r26
    29e6:	08 95       	ret

000029e8 <_exit>:
    29e8:	f8 94       	cli

000029ea <__stop_program>:
    29ea:	ff cf       	rjmp	.-2      	; 0x29ea <__stop_program>
